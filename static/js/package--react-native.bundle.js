(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{93:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=s(n(0)),a=n(1),r=s(n(20)),o=s(n(21)),i=n(6),u=n(11),c=n(10),d=n(7);function s(e){return e&&e.__esModule?e:{default:e}}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}function p(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),p(this,h(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(t,l.default.PureComponent),function(e,t,n){t&&f(e.prototype,t),n&&f(e,n)}(t,[{key:"render",value:function(){return l.default.createElement(l.default.Fragment,null,l.default.createElement(o.default,null,l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"@curi/react-native")," package provides components to use Curi routing in a React Native application."),l.default.createElement("p",null,"For more information on using Curi with React Native, please check out the"," ",l.default.createElement(a.Link,{to:"Guide",params:{slug:"react-native"}},"React Native guide"),"."))),l.default.createElement(r.default,null,l.default.createElement(c.Section,{title:l.default.createElement(i.InlineJS,null,"curiProvider()"),id:"curiProvider"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The application needs a component at its root to re-render the application when new responses are emitted and to make routing related available through React's context. This component is created by passing the Curi ",l.default.createElement(i.InlineJS,null,"router")," to the"," ",l.default.createElement(i.InlineJS,null,"curiProvider()")," function."),l.default.createElement(u.Note,null,l.default.createElement("p",null,"Why does ",l.default.createElement(i.InlineJS,null,"@curi/react-native")," export a function to create a component and not just a component? Props signify values that can change, but an application should only ever have one router. By hard-coding the ",l.default.createElement(i.InlineJS,null,"router")," into a component, we avoid having to handle the possibility of switching routers (which should not happen).")),l.default.createElement(u.Note,null,"All of the other components provided by"," ",l.default.createElement(i.InlineJS,null,"@curi/react-native")," must be descendants of the component created by ",l.default.createElement(i.InlineJS,null,"curiProvider()"),".")),l.default.createElement(d.CodeBlock,{lang:"jsx"},"import { curiProvider } from '@curi/react-native';\n\nconst router = curi(history, routes);\nconst Router = curiProvider(router);\n\nconst App = () => (\n  <Router>\n    {({ response, navigation, router }) => {\n      const { body:Body } = response;\n      return <Body response={response} />;\n    }}\n  </Router>\n);"),l.default.createElement(c.Section,{tag:"h3",title:"Arguments",id:"curiProvider-arguments"},l.default.createElement(c.Subsection,{tag:"h4",title:"router",id:"curiProvider-router"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"A Curi router.")),l.default.createElement(d.CodeBlock,null,'import { curiProvider } from "@curi/react-native";\n\nconst router = curi(history, routes);\nconst Router = curiProvider(router);'))),l.default.createElement(c.Section,{tag:"h3",title:"Props",id:"curiProvider-props"},l.default.createElement(c.Subsection,{tag:"h4",title:"children",id:"curiProvider-render"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"children")," is a render-invoked function. When it is called, it will be passed an object with three properties:"),l.default.createElement("table",null,l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"property"),l.default.createElement("th",null,"description"))),l.default.createElement("tbody",null,l.default.createElement("tr",null,l.default.createElement("td",null,"response"),l.default.createElement("td",null,"the response object generated for the current location")),l.default.createElement("tr",null,l.default.createElement("td",null,"navigation"),l.default.createElement("td",null,"the ",l.default.createElement(i.InlineJS,null,"action")," of the navigation and the"," ",l.default.createElement(i.InlineJS,null,"previous")," response object")),l.default.createElement("tr",null,l.default.createElement("td",null,"router"),l.default.createElement("td",null,"the Curi router")))))))),l.default.createElement(c.Section,{title:l.default.createElement(i.InlineComponent,null,"Link"),id:"Link"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"A ",l.default.createElement(i.InlineComponent,null,"Link")," is used for navigating within your application. By default, this will render a"," ",l.default.createElement(i.InlineComponent,null,"TouchableHighlight"),", but you can also provide another component. When the rendered element is touched, it will use the router's ",l.default.createElement(i.InlineJS,null,"history")," object to change locations, which will trigger a re-render."),l.default.createElement("p",null,"With the ",l.default.createElement(i.InlineComponent,null,"Link"),", instead of providing a URI to navigate to, you specify the name of the route that you want to link to. Then, the pathname of the URI you want the component to link to will be automatically generated for you.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},"import { Link } from '@curi/react-native';\n          \n<Link to='User' params={{ id: 16 }}>\n  <Text>User 16</Text>\n</Link>\n// <TouchableHighlight>\n//   <Text>User 16</Text>\n// </TouchableHighlight>"),l.default.createElement(c.Section,{tag:"h3",title:"Props",id:"Link-props"},l.default.createElement(c.Subsection,{tag:"h4",title:"to",id:"Link-to"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The name of the route that you want to navigate to."),l.default.createElement("p",null,"If ",l.default.createElement(i.InlineJS,null,"to")," is not provided, the ",l.default.createElement(i.InlineComponent,null,"Link")," will re-use the current location's ",l.default.createElement(i.InlineJS,null,"pathname"),". This is useful for linking to hashes within the current page.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},'// Home route is { name: "Home", path: "" }\n<Link to="Home">Home</Link>')),l.default.createElement(c.Subsection,{tag:"h4",title:"params",id:"Link-params"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"If the route that you want to navigate to (or any of its parents) include path parameters, you can specify them using the params prop.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},"// User route is { name: 'User', path: '/user/:id' }\n<Link to='User' params={{ id: 16 }}>User 16</Link>")),l.default.createElement(c.Subsection,{tag:"h4",title:"hash, query & state",id:"Link-hash-query-state"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"While the pathname of the location to navigate to will be generated for you, this does not cover over location properties (query, hash, and state). The ",l.default.createElement(i.InlineJS,null,"query"),","," ",l.default.createElement(i.InlineJS,null,"hash"),", and ",l.default.createElement(i.InlineJS,null,"state")," props are used to pass these values.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},'<Link\n  to=\'Products\'\n  params={{ type: \'vacuums\' }}\n  hash="iroomba"\n  query="volume=loud"\n  state={{ owner: "Tom Haverford" }}\n>\n  DJ Roomba\n</Link>')),l.default.createElement(c.Subsection,{tag:"h4",title:"children",id:"Link-children"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"children")," prop can take two forms: either a valid React Node (e.g. a React element, a string, or"," ",l.default.createElement(i.InlineJS,null,"null"),") or a render-invoked ",l.default.createElement(i.InlineJS,null,"children")," ","function."),l.default.createElement("p",null,"The render-invoked ",l.default.createElement(i.InlineJS,null,"children")," function will be called with the ",l.default.createElement(i.InlineComponent,null,"Link"),"'s navigation state. The navigation state is ",l.default.createElement(i.InlineJS,null,"false")," to start,"," ",l.default.createElement(i.InlineJS,null,"true")," when the ",l.default.createElement(i.InlineComponent,null,"Link")," is clicked, and"," ",l.default.createElement(i.InlineJS,null,"false")," when the the navigation finishes/is cancelled.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},'// a React node\n<Link to="Home">\n  <Text>Home</Text>\n</Link>\n\n// a render-invoked function\n<Link to="User" params={{ id: 1 }}>\n  {navigating => (\n    <React.Fragment>\n      <Text>User 1</Text>\n      {navigating ? <Spinner /> : null}\n    </React.Fragment>\n  )}\n</Link>')),l.default.createElement(c.Subsection,{tag:"h4",title:"anchor",id:"Link-anchor"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"By default, when you render a ",l.default.createElement(i.InlineComponent,null,"Link"),", a"," ",l.default.createElement(i.InlineComponent,null,"TouchableHighlight")," element will be rendered (",l.default.createElement(i.InlineJS,null,"React.createElement(TouchableHighlight, ...)"),"). ",l.default.createElement(i.InlineJS,null,"anchor")," lets you provide your own component to be rendered instead.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},"<Link\n  to='User'\n  params={{ id: 16 }}\n  anchor={TouchableOpacity}\n>\n  <Text>User 16</Text>\n</Link>\n// <TouchableOpacity>\n//   <Text>User 16</Text>\n// </TouchableOpacity>")))),l.default.createElement(c.Section,{title:l.default.createElement(i.InlineComponent,null,"Curious"),id:"Curious"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"A context consumer component for injecting router values into components.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},"import { Curious } from '@curi/react-native';\n\nconst  MyComponent = () => (\n  <Curious>\n    {({ router, response, navigation }) => {\n      // pass these props to any components that need them\n      return (\n        <ThingThatNeedsResponse response={response} />\n      );\n    }}\n  </Curious>\n);"),l.default.createElement(c.Section,{tag:"h3",title:"Props",id:"curious-props"},l.default.createElement(c.Subsection,{tag:"h4",title:"children",id:"curious-children"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"A render-invoked function that returns a React element. This function will receive an object with ",l.default.createElement(i.InlineJS,null,"router"),","," ",l.default.createElement(i.InlineJS,null,"response")," and ",l.default.createElement(i.InlineJS,null,"navigation")," properties."))))),l.default.createElement(c.Section,{title:l.default.createElement(i.InlineComponent,null,"Active"),id:"Active"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(i.InlineComponent,null,"Active"),' component is used to render based on whether or not a route is "active" (its name and params match the current response\'s name and params) using a render-invoked'," ",l.default.createElement(i.InlineJS,null,"children")," function.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},'import { Active } from \'@curi/react-native\';\n\nconst ActiveLink = ({ to, params, partial, ...rest}) => (\n  <Active name={to} params={params} partial={partial}>\n    {active => (\n      <Link\n        to={to}\n        params={params}\n        {...rest}\n        className={active ? "active" : ""}\n      />\n    )}\n  </Active>\n);\n\n<ActiveLink to="Home">Home</ActiveLink>'),l.default.createElement(u.Note,null,l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"This relies on the active route interaction from"," ",l.default.createElement(a.Link,{to:"Package",params:{package:"route-active"}},"@curi/route-active")," ","being added to your router.")),l.default.createElement(d.CodeBlock,null,"import active from '@curi/route-active';\n\nconst router = curi(history, routes, {\n  route: [active()]\n});")),l.default.createElement(c.Section,{tag:"h3",title:"Props",id:"Active-props"},l.default.createElement(c.Subsection,{tag:"h4",title:"name",id:"Active-name"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The name of the route to compare against the response object."))),l.default.createElement(c.Subsection,{tag:"h4",title:"params",id:"Active-params"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"An object containing route parameters. These will be compared against the route params of the response object."))),l.default.createElement(c.Subsection,{tag:"h4",title:"children",id:"Active-children"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"A render-invoked function whose first argument is whether the route (determined using the ",l.default.createElement(i.InlineJS,null,"name")," and"," ",l.default.createElement(i.InlineJS,null,"params"),") is active.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},'// response = { name: "Photo", params: { id: "abcde" }}\n\n<Active name="Photo" params={{ id: "abcde" }}>\n  {active => ( // if active === true\n    <Photo className={active ? "active" : "inactive"} />\n  )}\n</Active>\n// <Photo className="active" />\n\n<Active name="Photo" params={{ id: "qwerty" }}>\n  {active => ( // if active === false\n    <Photo className={active ? "active" : "inactive"} />\n  )}\n</Active>\n// <Photo className="inactive" />'),l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The second argument passed to the render-invoked function is the current ",l.default.createElement(i.InlineJS,null,"response"),". ",l.default.createElement(i.InlineComponent,null,"Active")," only checks if the route is active (i.e. matches the current location's ",l.default.createElement(i.InlineJS,null,"pathname"),"). If you want to check if the"," ",l.default.createElement(i.InlineJS,null,"query")," or ",l.default.createElement(i.InlineJS,null,"hash"),", you should do this yourself inside of the render-invoked function. You can compare the ",l.default.createElement(i.InlineJS,null,"query"),"/",l.default.createElement(i.InlineJS,null,"hash")," against the response's ",l.default.createElement(i.InlineJS,null,"location"),".")),l.default.createElement(d.CodeBlock,{lang:"jsx"},'<Active name="Home">\n  {(active, response) => {\n    const activeHash = response.hash === "ahoy"\n    // ...\n  }}\n</Active>')),l.default.createElement(c.Subsection,{tag:"h4",title:"partial",id:"Active-partial"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"When ",l.default.createElement(i.InlineJS,null,"true"),", ",l.default.createElement(i.InlineJS,null,"partial")," allows ancestor routes to be considered active. Defaults to ",l.default.createElement(i.InlineJS,null,"false"),".")),l.default.createElement(d.CodeBlock,{lang:"jsx"},'// response = { name: "Photo", params: { id: "abcde" }}\n// where "Photo" is a child route of "Album"\n\n<Active name="Album">\n  {active => ( // if active === false\n    <Album className={active ? "active" : "inactive"} />\n  )}\n</Active>\n// <Album className="inactive" />\n\n<Active name="Album" partial={true}>\n  {active => ( // if active === true\n    <Album className={active ? "active" : "inactive"} />\n  )}\n</Active>\n// <Album className="active" />')))),l.default.createElement(c.Section,{title:l.default.createElement(i.InlineComponent,null,"Block"),id:"Block"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(i.InlineComponent,null,"Block")," component lets you prevent navigation until a user has confirmed that they want to navigate. This can be useful when the user attempts to navigate away from a partially filled form.")),l.default.createElement(d.CodeBlock,null,"import { Block } from '@curi/react-native';"),l.default.createElement(c.Section,{tag:"h3",title:"Props",id:"Block-props"},l.default.createElement(c.Subsection,{tag:"h4",title:"active",id:"Block-active"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"A boolean, which is ",l.default.createElement(i.InlineJS,null,"true")," by default. When it is"," ",l.default.createElement(i.InlineJS,null,"true"),", the navigation will be blocked. When it is"," ",l.default.createElement(i.InlineJS,null,"false"),", navigation will not be blocked.")),l.default.createElement(d.CodeBlock,{lang:"jsx"},"// will block navigation\n<Block active={true} confirm={confirm} />\n\n// will not block navigation\n<Block active={false} confirm={confirm} />")),l.default.createElement(c.Subsection,{tag:"h4",title:"confirm",id:"Block-confirm"},l.default.createElement(d.Explanation,null,l.default.createElement("p",null,"The confirm prop is a function that will be called whenever there is navigation."),l.default.createElement("table",null,l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"argument"),l.default.createElement("th",null,"description"))),l.default.createElement("tbody",null,l.default.createElement("tr",null,l.default.createElement("td",null,"location"),l.default.createElement("td",null,"the location that is being navigated to")),l.default.createElement("tr",null,l.default.createElement("td",null,"action"),l.default.createElement("td",null,"the type of navigation")),l.default.createElement("tr",null,l.default.createElement("td",null,"success"),l.default.createElement("td",null,"a function to call when navigation should happen")),l.default.createElement("tr",null,l.default.createElement("td",null,"failure"),l.default.createElement("td",null,"a function to call when navigation should be cancelled."))))),l.default.createElement(d.CodeBlock,{lang:"jsx"},'<Block\n  confirm={({ location, action }, success, failure) => {\n    const response = window.confirm("Shall we?");\n    if (response) {\n      success();\n    } else {\n      failure();\n    }\n  }}\n/>'))))))}}]),t}();t.default=v}}]);