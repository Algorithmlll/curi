(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{110:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){return l.default.createElement(l.default.Fragment,null,l.default.createElement(r.Section,{title:"Store Integration",id:"store"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Curi relies on Svelte's store to interface with an application. By adding the ",l.default.createElement(o.InlineJS,null,"response")," (plus the ",l.default.createElement(o.InlineJS,null,"router")," and"," ",l.default.createElement(o.InlineJS,null,"navigation")," objects) to the store, they are accessible throughout the application."),l.default.createElement("p",null,l.default.createElement(o.InlineJS,null,"@curi/svelte")," provides a function to link the router to the store. This sets up an"," ",l.default.createElement(a.Link,{to:"Guide",params:{slug:"navigating"},hash:"observer"},"observer"),", so that whenever there is a new response, the parts of your application that use the response will be re-rendered.")),l.default.createElement(i.CodeBlock,{lang:"jsx"},'import store from "svelte/store";\nimport { curiStore } from "@curi/svelte";\n\nimport router from "./router";\n\nconst store = new Store();\ncuriStore(router, store);'),l.default.createElement(r.Subsection,{title:"Rendering with the response",id:"rendering-response"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Svelte allows you to render dynamic components using the"," ",l.default.createElement(o.InlineComponent,null,"svelte:component this")," syntax. If you set Svelte components as the ",l.default.createElement(o.InlineJS,null,"body")," properties on your responses, you can combine ",l.default.createElement(o.InlineComponent,null,"svelte:component this")," and"," ",l.default.createElement(o.InlineJS,null,"response.body")," to render the appropriate component for a"," ",l.default.createElement(o.InlineJS,null,"response"),"."),l.default.createElement("p",null,"A root component is a good place to perform general application layout, like menus, in addition to rendering the response's"," ",l.default.createElement(o.InlineJS,null,"body"),".")),l.default.createElement(i.CodeBlock,{lang:"html"},'<template>\n  <header>\n    <NavLinks />\n  </header>\n  <main>\n    <svelte:component this={$curi.response.body} />\n  </main>\n</template>\n\n<script>\n  import NavLinks from "./NavLinks";\n  export default {\n    components: { NavLinks }\n  };\n<\/script>'),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"If your routes use an object to attach multiple components to a response, splitting them apart in computed properties may give your templates a cleaner look."),l.default.createElement("p",null,"If you do attach multiple components to a response, please remember that you want every route to set the same ",l.default.createElement(o.InlineJS,null,"body")," ","shape. Otherwise, you'll have to determine the shape and change how you render, which can quickly become messy.")),l.default.createElement(i.CodeBlock,{lang:"html"},'<script>\nconst routes = [\n  {\n    name: "Home",\n    path: "",\n    response() {\n      return {\n        body: {\n          main: HomeMain,\n          menu: HomeMenu\n        }\n      }\n    }\n  },\n  // ...\n];\n<\/script>\n\n<template>\n  <header>\n    <svelte:component this={menu} />\n  </header>\n  <main>\n  <svelte:component this={main} />\n  </main>\n</template>\n\n<script>\n  export default {\n    computed: {\n      main({ $curi }) {\n        return $curi.response.body.main;\n      },\n      menu({ $curi }) {\n        return $curi.response.body.menu;\n      }\n    }\n  }\n<\/script>'))),l.default.createElement(r.Section,{title:"Navigating",id:"navigating"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(o.InlineComponent,null,"Link")," component is used to navigate between routes within an application. When it renders in the DOM, it will render as an anchor (",l.default.createElement(o.InlineComponent,null,"a"),") element."),l.default.createElement("p",null,"The ",l.default.createElement(o.InlineComponent,null,"Link"),"'s ",l.default.createElement(o.InlineJS,null,"to")," prop describes which route clicking the link should navigate to. If you pass an invalid route name, Curi will warn you."),l.default.createElement("p",null,"If a route has any params (or if any of a route's ancestors have params for nested routes), the ",l.default.createElement(o.InlineJS,null,"params")," prop is used to pass these to the ",l.default.createElement(o.InlineComponent,null,"Link"),".")),l.default.createElement(i.CodeBlock,{lang:"html"},'<template>\n  <nav>\n    <ul>\n      <li>\n        <Link to="Home">Home</Link>\n      </li>\n      <li>\n        <Link to="About">About</Link>\n      </li>\n      <li>\n        <Link to="User" params={{ id: \'blue\' }}>\n          Blue\n        </Link>\n      </li>\n    </ul>\n  </nav>\n</template>\n\n<script>\n  import { Link } from "@curi/svelte";\n\n  export default {\n    components: { Link }\n  };\n<\/script>'),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(o.InlineComponent,null,"Link")," also takes ",l.default.createElement(o.InlineJS,null,"hash"),", ",l.default.createElement(o.InlineJS,null,"query"),", and ",l.default.createElement(o.InlineJS,null,"state")," props to attach their values to the location that will be navigated to.")),l.default.createElement(i.CodeBlock,{lang:"jsx"},'<Link to="Home" hash="details">Home</Link>\n// renders\n<a href="/#details">Home</a>')),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Please check out the full"," ",l.default.createElement(a.Link,{to:"Package",params:{package:"svelte"},hash:"API"},l.default.createElement(o.InlineJS,null,"@curi/svelte"))," ","API documentation to see every component that the package provides.")))};var l=function(e){return e&&e.__esModule?e:{default:e}}(t(0)),a=t(1),o=t(6),r=(t(11),t(10)),i=t(7)}}]);