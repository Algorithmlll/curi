webpackJsonp([3],{49:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=a(n(0)),o=a(n(60)),r=function(e){var t=e.params,n=o.default[t.slug];return n?l.default.createElement(n,null):l.default.createElement("div",null,"The requested tutorial could not be found.")};t.default=r},53:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),l=function(e){var t=e.id;return a.default.createElement("div",{className:"demo"},a.default.createElement("iframe",{src:"https://codesandbox.io/embed/".concat(t),width:"100%",height:"600px",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}),a.default.createElement("p",null,"Use the three buttons at the top of the Sandbox to toggle view modes. Clicking the menu button in the top left corner opens a menu that allows you to switch between files."))},o=l;t.default=o},58:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=a(n(0)),o=a(n(62)),r=function(e){var t=e.children;return l.default.createElement("div",{className:"tutorial"},l.default.createElement("div",{className:"content"},t||null),l.default.createElement("div",{className:"sidebar"},l.default.createElement("h2",null,"Tutorials"),l.default.createElement(o.default,null)))};t.default=r},59:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Outline=t.CompleteBranch=t.TutorialBranches=t.TutorialBranch=void 0;var a=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),l=n(2),o=function(e){var t=e.name;return a.default.createElement("div",{className:"tutorial-branch"},a.default.createElement("p",null,"If you are following along using the"," ",a.default.createElement("a",{href:"https://github.com/pshrmn/curi-tutorial"},"tutorial repo"),", please checkout the ",a.default.createElement(l.InlineJS,null,t)," branch."),a.default.createElement(l.PrismBlock,{lang:"bash"},"git checkout ".concat(t)))};t.TutorialBranch=o;var r=function(e){var t=e.names;return a.default.createElement("div",{className:"tutorial-branch"},a.default.createElement("p",null,"If you are following along using the"," ",a.default.createElement("a",{href:"https://github.com/pshrmn/curi-tutorial"},"tutorial repo"),", please checkout the appropriate branch for your rendering framework."),a.default.createElement(l.PrismBlock,{lang:"bash"},t.map(function(e){return"git checkout ".concat(e)}).join("\n")))};t.TutorialBranches=r;var i=function(e){var t=e.name;return a.default.createElement("div",{className:"tutorial-branch"},a.default.createElement("p",null,"You can view the completed source code for this tutorial"," ",a.default.createElement("a",{href:"https://github.com/pshrmn/curi-tutorial/tree/".concat(t)},"on GitHub"),"."))};t.CompleteBranch=i;var u=function(e){var t=e.children;return a.default.createElement("div",{className:"tutorial-outline"},a.default.createElement("p",null,"In this tutorial, we will be doing the following:"),t)};t.Outline=u},60:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=a(n(61)),o=a(n(63)),r={"react-basics":l.default,"vue-basics":o.default};t.default=r},61:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=a(n(0)),o=n(1),r=a(n(58)),i=n(59),u=n(2),s=n(5),c=n(4),d=a(n(53)),m=function(){return l.default.createElement(r.default,null,l.default.createElement("h1",null,"React Basics Tutorial"),l.default.createElement("p",null,"In this tutorial, we will be building a website for a bookstore. This will focus on the front-end part of the application."),l.default.createElement(i.Outline,null,l.default.createElement("ul",null,l.default.createElement("li",null,"Learn how to define routes and setup the Curi router."),l.default.createElement("li",null,"Learn how to render React components based on the current location."),l.default.createElement("li",null,"Learn how to navigate within the application."))),l.default.createElement(c.Section,{title:"Demo",id:"demo"},l.default.createElement("p",null,"You can run a demo of the site we are building with CodeSandbox."),l.default.createElement(d.default,{id:"github/curijs/react-basic-tutorial/tree/master/"})),l.default.createElement(c.Section,{title:"Setup",id:"setup"},l.default.createElement("p",null,"We will be using"," ",l.default.createElement("a",{href:"https://github.com/facebook/create-react-app"},l.default.createElement(u.InlineJS,null,"create-react-app"))," ","to develop this website."),l.default.createElement(s.Note,null,"The instructions here assume that you have NodeJS and NPM > 5.2 installed on your computer. If you do not and cannot or just prefer to avoid setup altogether, you can follow along using"," ",l.default.createElement("a",{href:"https://codesandbox.io/"},"CodeSandbox"),". Some of the boilerplate will be different, but the differences are minor."),l.default.createElement("p",null,"Begin by opening a terminal and navigating to the directory where you want to save your code. Then, we will use ",l.default.createElement(u.InlineJS,null,"npx")," to create the application."),l.default.createElement(u.PrismBlock,{lang:"bash"},"npx create-react-app curi-bookstore # create the app\ncd curi-bookstore # enter the new app directory\nyarn start # start the dev server"),l.default.createElement("p",null,l.default.createElement(u.InlineJS,null,"create-react-app"),"'s dev server will automatically update when we change files, so we can leave that running. We will still be working in the terminal, so you will want to open up a new terminal window/tab and navigate to the application's directory. Once you have done that, there are a few packages that need to be installed."),l.default.createElement(u.PrismBlock,{lang:"bash"},"yarn add @hickory/browser @curi/core @curi/react"),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"@hickory/browser")," package will be used to create an object that interacts with the browser to power navigation (e.g. updates the URI in the address bar when you click a link). ",l.default.createElement(u.InlineJS,null,"@curi/core")," ","provides the function to actually create the router."," ",l.default.createElement(u.InlineJS,null,"@curi/react")," gives us some React components that interact with the router.")),l.default.createElement(c.Section,{title:"History and Locations",id:"history"},l.default.createElement("p",null,"URIs can be broken into parts to identify a location. With a single-page application, we don't care about the URI's protocol (http, https) or its hostname (www.example.com). The properties we care about are the"," ",l.default.createElement(u.InlineJS,null,"pathname"),", ",l.default.createElement(u.InlineJS,null,"hash"),", and ",l.default.createElement(u.InlineJS,null,"query"),"."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'// uri = "https://example.com/one?key=value#id\n{\n  pathname: "/one",\n  query: "key=value",\n  hash: "id"\n}'),l.default.createElement("p",null,"The router will match its routes against a location's"," ",l.default.createElement(u.InlineJS,null,"pathname")," to figure out which route matches. The"," ",l.default.createElement(u.InlineJS,null,"query")," and ",l.default.createElement(u.InlineJS,null,"hash")," values are not used for matching routes."),l.default.createElement("p",null,"Curi uses the ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory"},"Hickory")," ","library to create a history object that will enable us to navigate within our application. Hickory provides a few different packages to create history objects for different environments, but the only one we care about right now is the browser history, which comes from the"," ",l.default.createElement(u.InlineJS,null,"@hickory/browser")," package. A browser history object will interact with the browser's native"," ",l.default.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API"},"History API")," ","so that our application can change locations (and the URI in the address bar) without making a request to a server and reloading the page."),l.default.createElement("p",null,"We can import the ",l.default.createElement(u.InlineJS,null,"Browser")," function from"," ",l.default.createElement(u.InlineJS,null,"@hickory/browser")," in our index file (",l.default.createElement(u.InlineJS,null,"src/index.js"),", which ",l.default.createElement(u.InlineJS,null,"create-react-app")," created for us). To create a history object, we just need to call that function."),l.default.createElement(s.Note,null,"The history object can be configured with"," ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory/blob/master/docs/api/Browser.md#options"},"an options object"),", but we will stick with the defaults."),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"4,10"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Browser from '@hickory/browser';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();")),l.default.createElement(c.Section,{title:"Defining the Routes",id:"defining-routes"},l.default.createElement("p",null,"Routes are simply JavaScript objects that define the valid locations for a router. They have a ",l.default.createElement(u.InlineJS,null,"name")," and a ",l.default.createElement(u.InlineJS,null,"path"),"."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'// this is a route\n{ name: "Home", path: "" }'),l.default.createElement("p",null,"A route's ",l.default.createElement(u.InlineJS,null,"name")," needs to be unique. We will use route names when we navigate within the application. A route's ",l.default.createElement(u.InlineJS,null,"path")," ","describes the location pathname that it should match."),l.default.createElement(c.Subsection,{title:"Path basics",id:"path-basics",type:"aside"},l.default.createElement("p",null,"Route paths are strings describing the pathname segments they should match."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"{ path: '' } // matches \"/\"\n{ path: 'about/stuff' } // matches \"/about/stuff\""),l.default.createElement("p",null,"Paths never begin with a slash."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// yes\n{ path: '' }\n// no\n{ path: '/' }"),l.default.createElement("p",null,"Paths can include dynamic parameters. These are specified with a string that starts with a colon (",l.default.createElement(u.InlineJS,null,":"),") followed by the name of the params."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// a param named \"id\"\n{ path: ':id' }"),l.default.createElement("p",null,"Routes can be nested using the ",l.default.createElement(u.InlineJS,null,"children")," property of a route. A nested route inherits the path from its ancestor route(s), so its ",l.default.createElement(u.InlineJS,null,"path")," is only the additional part of the pathname that should be matched."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'{\n  name: "Parent",\n  path: "parent", // matches /parent\n  children: [\n    // matches /parent/daughter\n    { name: "Daughter", path: "daughter" },\n    // matches /parent/son\n    { name: "Son", path: "son" }\n  ]\n}')),l.default.createElement("p",null,"The website will start with four routes."),l.default.createElement("table",null,l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"name"),l.default.createElement("th",null,"path"),l.default.createElement("th",null,"Description"))),l.default.createElement("tbody",null,l.default.createElement("tr",null,l.default.createElement("td",null,"Home"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'""')),l.default.createElement("td",null,"Lists books available for purchase")),l.default.createElement("tr",null,l.default.createElement("td",null,"Book"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'"book/:id"')),l.default.createElement("td",null,"Details about an individual book")),l.default.createElement("tr",null,l.default.createElement("td",null,"Checkout"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'"checkout"')),l.default.createElement("td",null,'"Buy" the books in the shopping cart')),l.default.createElement("tr",null,l.default.createElement("td",null,"Catch All"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'"(.*)"')),l.default.createElement("td",null,"Display a not found page for all other locations")))),l.default.createElement(s.Note,null,"The catch all route uses a regular expression syntax to indicate that it should match everything. Curi uses the"," ",l.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp"},l.default.createElement(u.InlineJS,null,"path-to-regexp"))," ","package for route matching. We will only be using some of its basic syntax, but you can read its documentation to learn about more advanced path syntax."),l.default.createElement("p",null,"Inside of the ",l.default.createElement(u.InlineJS,null,"src")," directory, we will create a"," ",l.default.createElement(u.InlineJS,null,"routes.js")," file where we can define the application's routes."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/routes.js"),l.default.createElement(u.PrismBlock,{lang:"javascript"},'// src/routes.js\nexport default [\n  {\n    name: "Home",\n    path: ""\n  },\n  {\n    name: "Book",\n    path: "book/:id"\n  },\n  {\n    name: "Checkout",\n    path: "checkout"\n  },\n  {\n    name: "Catch All",\n    path: "(.*)"\n  }\n];')),l.default.createElement(c.Section,{title:"The Router",id:"router"},l.default.createElement("p",null,"With the history object created and the routes defined, we are ready to create the router. Back in the ",l.default.createElement(u.InlineJS,null,"src/index.js")," file, we should import the ",l.default.createElement(u.InlineJS,null,"curi")," function from ",l.default.createElement(u.InlineJS,null,"@curi/core")," as well as our routes from ",l.default.createElement(u.InlineJS,null,"src/routes.js")),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"4,8,13"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport curi from '@curi/core';\nimport Browser from '@hickory/browser';\n\nimport './index.css';\nimport routes from './routes';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();")),l.default.createElement(c.Section,{title:"Rendering with React",id:"rendering"},l.default.createElement("p",null,"We can now render our application. To do this, we will use the"," ",l.default.createElement(u.InlineComponent,null,"CuriProvider")," component from the ",l.default.createElement(u.InlineJS,null,"@curi/react")," ","package. This component does two things:"),l.default.createElement("ol",null,l.default.createElement("li",null,"It places router-related values on the context for other"," ",l.default.createElement(u.InlineJS,null,"@curi/react")," components"),l.default.createElement("li",null,"It re-renders the application whenever the location changes.")),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineComponent,null,"CuriProvider")," takes two props. The first is"," ",l.default.createElement(u.InlineJS,null,"router"),", which is the router we created above. The second is a children function, passed as the children of the ",l.default.createElement(u.InlineComponent,null,"CuriProvider"),". This function will receive an object that has three properties:"," ",l.default.createElement(u.InlineJS,null,"router"),", ",l.default.createElement(u.InlineJS,null,"response"),", and ",l.default.createElement(u.InlineJS,null,"navigation"),"."),l.default.createElement(u.PrismBlock,{lang:"jsx"},"<CuriProvider router={router}>\n  {({ router, response, navigation }) => {\n    return <div>This is the website</div>;\n  }}\n</CuriProvider>"),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"router")," is our Curi router, but what are the other two?"),l.default.createElement(c.Subsection,{title:"Responses and Navigation",id:"responses",type:"aside"},l.default.createElement("p",null,"Whenever Curi receives a location, it matches its routes against it and generates a response. This is an object with data related to the route that matched the location. Later on we will modify this data ourselves, but for now the important thing to know is that the response lets us know about the current route."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// a sample response object\n{\n  body: undefined,\n  data: undefined,\n  error: undefined,\n  key: '1.0',\n  location: { pathname: '/', ... },\n  name: 'Home',\n  params: {},\n  partials: [],\n  status: 200\n}"),l.default.createElement("p",null,"The router uses an observer model to let functions subscribe to be called when a new response is generated. The ",l.default.createElement(u.InlineComponent,null,"CuriProvider")," ","observes the router so that it can re-render the application whenever there is a new one."),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"navigation")," object contains additional information about a navigation that doesn't make sense to include in the response object. This includes the navigation's \"action\" (",l.default.createElement(u.InlineJS,null,"PUSH"),","," ",l.default.createElement(u.InlineJS,null,"POP"),", or ",l.default.createElement(u.InlineJS,null,"REPLACE"),") and the previous response object.")),l.default.createElement("p",null,"Most of the time, the response is the only property you will need to use to render, but the other two may occasionally be useful."),l.default.createElement("p",null,"How do we use the response to render? Any way you want, really. Based on the sample response above, the obvious idea would be to determine what component to render based on the response's ",l.default.createElement(u.InlineJS,null,"name"),". However, we can make this even easier by using the ",l.default.createElement(u.InlineJS,null,"body")," property."),l.default.createElement("p",null,"Earlier it was mentioned that response objects can be modified. This is done in a route's ",l.default.createElement(u.InlineJS,null,"match.response()")," function."," ",l.default.createElement(u.InlineJS,null,"match.response()")," receives an object with a whole bunch of properties that we can use to modify the response. For the time being, we only care about one: ",l.default.createElement(u.InlineJS,null,"set"),". This is an object with functions that actually modify the response. ",l.default.createElement(u.InlineJS,null,"set.body()")," will set the"," ",l.default.createElement(u.InlineJS,null,"body")," property of the response object."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'{\n  name: "Home",\n  path: "",\n  match: {\n    response({ set }) {\n      set.body(\'Home, sweet home.\');\n      /*\n       * response = {\n       *   body: "Home, sweet home.",\n       *   // ...\n       * }\n       */\n    }\n  }\n}'),l.default.createElement("p",null,"If we pass React components to ",l.default.createElement(u.InlineJS,null,"set.body()"),", we can render those in the ",l.default.createElement(u.InlineComponent,null,"CuriProvider"),"'s children function. We haven't actually defined components for our routes yet, so we should throw together some placeholders."),l.default.createElement(u.PrismBlock,{lang:"bash"},"mkdir -p src/components\ntouch src/components/Home.js src/components/Book.js \\\n  src/components/Checkout.js src/components/NotFound.js"),l.default.createElement(u.PrismBlock,{lang:"jsx"},"// src/components/Home.js\nimport React from 'react';\n\nexport default () => (\n  <div>Home</div>\n);"),l.default.createElement(u.PrismBlock,{lang:"jsx"},"// src/components/Book.js\nimport React from 'react';\n\nexport default () => (\n  <div>Book</div>\n);"),l.default.createElement(u.PrismBlock,{lang:"jsx"},"// src/components/Checkout.js\nimport React from 'react';\n\nexport default () => (\n  <div>Checkout</div>\n);"),l.default.createElement(u.PrismBlock,{lang:"jsx"},"// src/components/NotFound.js\nimport React from 'react';\n\nexport default () => (\n  <div>Not Found</div>\n);"),l.default.createElement("p",null,"These components can be imported in ",l.default.createElement(u.InlineJS,null,"src/routes.js")," and attached to their respective routes."),l.default.createElement(u.PrismBlock,{lang:"javascript","data-line":"2-5,11-15,20-24,29-33,38-42"},'// src/routes.js\nimport Home from \'./components/Home\';\nimport Book from \'./components/Book\';\nimport Checkout from \'./components/Checkout\';\nimport NotFound from \'./components/NotFound\';\n\nexport default [\n  {\n    name: "Home",\n    path: "",\n    match: {\n      response({ set }) {\n        set.body(Home);\n      }\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    match: {\n      response({ set }) {\n        set.body(Book);\n      }\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    match: {\n      response({ set }) {\n        set.body(Checkout);\n      }\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    match: {\n      response({ set }) {\n        set.body(NotFound);\n      }\n    }\n  }\n];'),l.default.createElement("p",null,"We can now render the ",l.default.createElement(u.InlineComponent,null,"CuriProvider")," in our index file. The"," ",l.default.createElement(u.InlineComponent,null,"CuriProvider")," gets passed the Curi router using the"," ",l.default.createElement(u.InlineJS,null,"router")," prop and a render-invoked function as the component's"," ",l.default.createElement(u.InlineJS,null,"children"),". In the render-invoked function, we can use"," ",l.default.createElement(u.InlineJS,null,"response.body")," to render the component for the matched route. We will also pass the ",l.default.createElement(u.InlineJS,null,"response")," as a prop to the rendered component, which will be useful soon."),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"6,15-24"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport curi from '@curi/core';\nimport Browser from '@hickory/browser';\nimport { CuriProvider } from '@curi/react';\n\nimport './index.css';\nimport routes from './routes';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\n\nReactDOM.render((\n  <CuriProvider router={router}>\n    {({ response }) => {\n      const { body:Body } = response;\n      return (\n        <Body response={response} />\n      );\n    }}\n  </CuriProvider>\n), document.getElementById('root'));\nregisterServiceWorker();"),l.default.createElement("p",null,"We can also remove the ",l.default.createElement(u.InlineComponent,null,"App")," component import and delete the related files."),l.default.createElement(u.PrismBlock,{lang:"bash"},"rm src/App.js src/App.css src/App.test.js"),l.default.createElement("p",null,"At this point in time our app is rendering, but is isn't very interesting because we cannot navigate between locations.")),l.default.createElement(c.Section,{title:"Navigating between locations",id:"navigating"},l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"@curi/react")," package provides a ",l.default.createElement(u.InlineComponent,null,"Link")," component that we can use to navigate between locations within our application."),l.default.createElement(c.Subsection,{title:l.default.createElement("span",null,"The ",l.default.createElement(u.InlineComponent,null,"Link")," Component"),id:"link-component",type:"aside"},l.default.createElement("p",null,"Navigation isn't done by manually typing the pathname of the location the link should navigate to. Instead, we specify the name of the route using the ",l.default.createElement(u.InlineJS,null,"to")," prop."),l.default.createElement(u.PrismBlock,{lang:"jsx"},'// { name: "Home", path: "" }\n<Link to="Home">Home</Link>\n// <a href="/">Home</a>'),l.default.createElement("p",null,"If a route has params, we provide these to the ",l.default.createElement(u.InlineComponent,null,"Link")," as a"," ",l.default.createElement(u.InlineJS,null,"params")," object. For a nested route, we would also need to provide params for any ancestor routes."),l.default.createElement(u.PrismBlock,{lang:"jsx"},'// { name: "Book", path: "book/:id" }\n<Link to="Book" params={{ id: 7 }}>The Dark Forest</Link>\n// <a href="/book/7">The Dark Forest</a>'),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineComponent,null,"Link")," is only for in-app navigation. If you want to link to pages outside of the application, use an anchor."),l.default.createElement(u.PrismBlock,{lang:"jsx"},'// in-app\n<Link to="Some Route">Some Route</Link>\n\n// out of app\n<a href="https://github.com">GitHub</a>'),l.default.createElement("p",null,"If you need to attach query or hash data to a ",l.default.createElement(u.InlineComponent,null,"Link"),", use the"," ",l.default.createElement(u.InlineJS,null,"details")," prop."),l.default.createElement(u.PrismBlock,{lang:"jsx"},'// { name: "Checkout", path: "checkout" }\n<Link to="Checkout" details={{ query: \'affiliate=123\' }}>Checkout</Link>\n// <a href="/checkout?affiliate=123">Checkout</a>')),l.default.createElement(c.Subsection,{title:"A Navigation Menu",id:"nav-menu"},l.default.createElement("p",null,"We will start with creating a navigation menu component with links to our home page and checkout page."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/components/NavMenu.js"),l.default.createElement(u.PrismBlock,{lang:"jsx"},"// src/components/NavMenu.js\nimport React from 'react';\nimport { Link } from '@curi/react';\n\nexport default () => (\n  <nav>\n    <ul>\n      <li>\n        <Link to=\"Home\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"Checkout\">Checkout</Link>\n      </li>\n    </ul>\n  </nav>\n);"),l.default.createElement("p",null,"We can import that in our index file and add it to our"," ",l.default.createElement(u.InlineJS,null,"children")," function. This is a good opportunity to also add some structure to the elements returned by the ",l.default.createElement(u.InlineJS,null,"children")," ","function."),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"10,21-28"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport curi from '@curi/core';\nimport Browser from '@hickory/browser';\nimport { CuriProvider } from '@curi/react';\n\nimport './index.css';\nimport routes from './routes';\nimport NavMenu from './components/NavMenu';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\n\nReactDOM.render((\n  <CuriProvider router={router}>\n    {({ response }) => {\n      const { body:Body } = response;\n      return (\n        <div>\n          <header>\n            <NavMenu />\n          </header>\n          <main>\n            <Body response={response} />\n          </main>\n        </div>\n      );\n    }}\n  </CuriProvider>\n), document.getElementById('root'));\nregisterServiceWorker();")),l.default.createElement(c.Subsection,{title:"Linking to Books",id:"book-links"},l.default.createElement("p",null,"We want to be able to link to individual books from the home page. First, we need data about the books. For now, we're going to hard-code the books in the ",l.default.createElement(u.InlineJS,null,"src/books.js")," module."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/books.js"),l.default.createElement("p",null,"You can copy+paste or modify the data, but the structure of the provided data should stay the same."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// src/books.js\nexport default [\n  {\n    id: 0,\n    title: 'The Name of the Wind',\n    author: 'Patrick Rothfuss',\n    published: '2007',\n    pages: 662\n  },\n  {\n    id: 1,\n    title: \"The Wise Man's Fear\",\n    author: 'Patrick Rothfuss',\n    published: '2011',\n    pages: 994\n  },\n  {\n    id: 2,\n    title: 'The Way of Kings',\n    author: 'Brandon Sanderson',\n    published: '2010',\n    pages: 1007\n  },\n  {\n    id: 3,\n    title: 'A Storm of Swords',\n    author: 'George R.R. Martin',\n    published: '2003',\n    pages: 1177\n  },\n  {\n    id: 78,\n    title: 'Words of Radiance',\n    author: 'Brandon Sanderson',\n    published: '2014',\n    pages: 1087\n  }\n];"),l.default.createElement("p",null,"The data can be imported in the ",l.default.createElement(u.InlineComponent,null,"Home")," component. We will iterate over the books with a ",l.default.createElement(u.InlineComponent,null,"Link")," to each one."),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"4,7-17"},"// src/components/Home.js\nimport React from 'react';\nimport { Link } from '@curi/react';\n\nimport books from '../books';\n\nexport default () => (\n  <div>\n    <ul>\n      {books.map(book => (\n        <li key={book.id}>\n          <Link to=\"Book\" params={{ id: book.id }} >\n            {book.title} by {book.author}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </div>\n);"),l.default.createElement("p",null,"Now that we can navigate to the books, we should fill out the UI for the ",l.default.createElement(u.InlineComponent,null,"Book")," component. Up above, we passed the"," ",l.default.createElement(u.InlineJS,null,"response")," object as a prop to the ",l.default.createElement(u.InlineJS,null,"response.body")," ","component. Now, we can use that object in the ",l.default.createElement(u.InlineComponent,null,"Book")," ","component to access the captured route params. This will allow us to know which book to show."),l.default.createElement("p",null,"We will once again import the ",l.default.createElement(u.InlineJS,null,"books.js")," data. We can use"," ",l.default.createElement(u.InlineJS,null,"params.id")," to select the correct book. However,"," ",l.default.createElement(u.InlineJS,null,"params.id")," is a string, so we will need to parse it into an integer. Sometimes there won't be a valid book for the"," ",l.default.createElement(u.InlineJS,null,"params.id"),". In that case, we will also want to display a message that the requested book could not be found."),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"4,6-20"},"// src/components/Book.js\nimport React from 'react';\n\nimport books from '../books';\n\nexport default ({ response }) => {\n  const id = parseInt(response.params.id, 10);\n  const book = books.find(b => b.id === id);\n  if (!book) {\n    return <div>The requested book could not be found</div>;\n  }\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <h2>by {book.author}</h2>\n      <p>Published in {book.published}</p>\n      <p>{book.pages} pages</p>\n    </div>\n  );\n}"))),l.default.createElement(c.Section,{title:"Let's go shopping",id:"shopping"},l.default.createElement("p",null,"We want to be able to add books to our shopping cart. Since this is a play site, we will store the cart data in memory."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/cart.js"),l.default.createElement("p",null,"The shopping cart implementation will be a JavaScript ",l.default.createElement(u.InlineJS,null,"Map"),". We can call its ",l.default.createElement(u.InlineJS,null,"set")," method to add books, its ",l.default.createElement(u.InlineJS,null,"clear")," ","method to reset the cart, and iterate over its ",l.default.createElement(u.InlineJS,null,"entries")," with a"," ",l.default.createElement(u.InlineJS,null,"for...of")," loop."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// src/cart.js\nconst cart = new Map();\n\nexport default {\n  add(book, quantity) {\n    cart.set(book, quantity);\n  },\n  items() {\n    const books = [];\n    for (let [book, quantity] of cart.entries()) {\n      books.push({\n        title: book.title,\n        quantity\n      });\n    }\n    return books;\n  },\n  reset() {\n    cart.clear();\n  }\n};"),l.default.createElement("p",null,"Before we edit the ",l.default.createElement(u.InlineComponent,null,"Book")," component, we should quickly revisit the ",l.default.createElement(u.InlineComponent,null,"CuriProvider"),"'s ",l.default.createElement(u.InlineJS,null,"children")," function. In addition to passing the ",l.default.createElement(u.InlineJS,null,"response")," to ",l.default.createElement(u.InlineJS,null,"response.body"),", we should also pass it our router. This will allow us to do programmatic navigation."),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"18,26"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport curi from '@curi/core';\nimport Browser from '@hickory/browser';\nimport { CuriProvider } from '@curi/react';\n\nimport './index.css';\nimport routes from './routes';\nimport NavMenu from './components/NavMenu';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\n\nReactDOM.render((\n  <CuriProvider router={router}>\n    {({ response, router }) => {\n      const { body:Body } = response;\n      return (\n        <div>\n          <header>\n            <NavMenu />\n          </header>\n          <main>\n            <Body response={response} router={router} />\n          </main>\n        </div>\n      );\n    }}\n  </CuriProvider>\n), document.getElementById('root'));\nregisterServiceWorker();"),l.default.createElement("p",null,"We can now access our ",l.default.createElement(u.InlineJS,null,"router")," in the ",l.default.createElement(u.InlineComponent,null,"Book")," ","component. ",l.default.createElement(u.InlineJS,null,"router.history")," is our Hickory history object. This object can be used to navigate to a new location. This means that when the user clicks a button to add a book to their shopping cart, we can automatically navigate to the checkout page."),l.default.createElement(c.Subsection,{title:"Navigation Methods",id:"nav-methods",type:"aside"},l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"history")," object provides three methods to navigate to new locations."),l.default.createElement("p",null,l.default.createElement(u.InlineJS,null,"push()")," pushes a new location after the current index, removing any locations after the current location."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nhistory.push({ pathname: '/new' })\n// session = ['/one', '/two', '/new'], index = 2"),l.default.createElement("p",null,l.default.createElement(u.InlineJS,null,"replace()")," replaces the location at the current index."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nhistory.replace({ pathname: '/new' })\n// session = ['/one', '/new', '/three'], index = 1"),l.default.createElement("p",null,l.default.createElement(u.InlineJS,null,"navigate()")," is a mix between ",l.default.createElement(u.InlineJS,null,"push()")," and"," ",l.default.createElement(u.InlineJS,null,"replace()"),". It mimics the behavior of clicking on links, so if you navigate to the same location as the current one, and if you navigate to a new location, it will push."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nhistory.navigate({ pathname: '/two' })\n// session = ['/one', '/two', '/three'], index = 1\nhistory.navigate({ pathname: '/new' })\n// session = ['/one', '/two', '/new'], index = 2","`}")),l.default.createElement("p",null,"Curi uses add-ons to add functionality to routes. Most of the time, you have to include these while creating the router, but Curi has one built-in add-on: ",l.default.createElement(u.InlineJS,null,"pathname"),". The ",l.default.createElement(u.InlineComponent,null,"Link")," automatically generates the correct pathname string using the ",l.default.createElement(u.InlineJS,null,"pathname")," ","add-on, the ",l.default.createElement(u.InlineJS,null,"to")," prop (and sometimes the ",l.default.createElement(u.InlineJS,null,"params")," ","prop). We can access this add-on as ",l.default.createElement(u.InlineJS,null,"router.addons.pathname()")," ","to generate pathnames ourselves."),l.default.createElement("p",null,"We also want to import our shopping cart API so that we can add a book to the cart."),l.default.createElement(u.PrismBlock,{lang:"jsx","data-line":"5,19-28"},"// src/components/Book.js\nimport React from 'react';\n\nimport books from '../books';\nimport cart from '../cart';\n\nexport default ({ response, router }) => {\n  const id = parseInt(response.params.id, 10);\n  const book = books.find(b => b.id === id);\n  if (!book) {\n    return <div>The requested book could not be found</div>;\n  }\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <h2>by {book.author}</h2>\n      <p>Published in {book.published}</p>\n      <p>{book.pages} pages</p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          cart.add(book, 1);\n          const pathname = router.addons.pathname('Checkout');\n          router.history.push({ pathname });\n        }}\n      >\n        Add to Cart\n      </button>\n    </div>\n  );\n}"),l.default.createElement("p",null,"Finally, we can update our ",l.default.createElement(u.InlineComponent,null,"Checkout")," component to display the books in the shopping cart. To do this, we will import our cart and books. Our cart only stores book ",l.default.createElement(u.InlineJS,null,"id"),"s, so we will need to merge the book data with the cart data."),l.default.createElement("p",null,'When a user "buys" the books in their shopping cart, we need to clear out the cart. We will also replace the current location with one whose'," ",l.default.createElement(u.InlineJS,null,"location.hash"),' is the string "thanks". When that is present in the URI, we can render a "Thanks for your purchase" message to "confirm" the purchase.'),l.default.createElement(u.PrismBlock,{lang:"jsx"},"// src/components/Checkout.js\nimport React from 'react';\n\nimport cart from '../cart';\n\nexport default ({ router, response }) => {\n  const books = cart.items();  \n  if (!books.length) {\n    return response.location.hash === 'thanks'\n      ? <div>Thanks for your purchase!</div>\n      : <div>The cart is currently empty</div>;\n  }\n  return (\n    <div>\n      <h1>Checkout</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Quantity</th>\n          </tr>\n        </thead>\n        <tbody>\n          {books.map(book => (\n            <tr key={book.title}>\n              <td>{book.title}</td>\n              <td>{book.quantity}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <button\n        type=\"button\"\n        onClick={() => {\n          cart.reset();\n          const pathname = router.addons.pathname('Checkout');\n          router.history.replace({ pathname, hash: 'thanks' });\n        }}\n      >\n        Buy\n      </button>\n    </div>\n  );\n};")),l.default.createElement(c.Section,{title:"What's next?",id:"next"},l.default.createElement("p",null,"We now have a functional website built with React and Curi. What should you do next? Build another site! You can also check out the"," ",l.default.createElement(o.Link,{to:"Guides"},"guides")," for information on advanced techniques.")))};t.default=m},62:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=a(n(0)),o=n(1),r=a(n(3)),i=n(7),u=function(e){var t=e.tutorials;return l.default.createElement("ul",{className:"link-list"},t.map(function(e){return l.default.createElement("li",{key:e.title,className:"solo"},l.default.createElement(o.Link,{to:"Tutorial",params:{slug:e.slug},active:{merge:r.default}},e.title))}))},s=function(){return l.default.createElement("ul",null,Object.keys(i.groupedTutorials).map(function(e){return l.default.createElement("li",{className:"link-group",key:e},l.default.createElement("h3",null,e),l.default.createElement(u,{tutorials:i.groupedTutorials[e]}))}))};t.default=s},63:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=a(n(0)),o=n(1),r=a(n(58)),i=n(59),u=n(2),s=n(5),c=n(4),d=(a(n(53)),function(){return l.default.createElement(r.default,null,l.default.createElement("h1",null,"Vue Basics Tutorial"),l.default.createElement("p",null,"In this tutorial, we will be building a website for a bookstore. This will focus on the front-end part of the application."),l.default.createElement(i.Outline,null,l.default.createElement("ul",null,l.default.createElement("li",null,"Learn how to define routes and setup the Curi router."),l.default.createElement("li",null,"Learn how to render Vue components based on the current location."),l.default.createElement("li",null,"Learn how to navigate within the application."))),l.default.createElement(c.Section,{title:"Setup",id:"setup"},l.default.createElement("p",null,"We will be using"," ",l.default.createElement("a",{href:"https://github.com/vuejs/vue-cli"},l.default.createElement(u.InlineJS,null,"@vue/cli"))," ","to develop this website."),l.default.createElement(s.Note,null,"The instructions here assume that you have NodeJS and NPM > 5.2 installed on your computer. If you do not and cannot or just prefer to avoid setup altogether, you can follow along using"," ",l.default.createElement("a",{href:"https://codesandbox.io/"},"CodeSandbox"),". Some of the boilerplate will be different, but the differences are minor."),l.default.createElement("p",null,"Begin by opening a terminal and navigating to the directory where you want to save your code. Then, we will use ",l.default.createElement(u.InlineJS,null,"@vue/cli")," to create the application. We"),l.default.createElement(u.PrismBlock,{lang:"bash"},"# install vue-cli if it isn't already\nnpm install --global @vue/cli\n# create the application\nvue create curi-bookstore\n# select the default option\n\n# enter the new app directory\ncd curi-bookstore\n# start the dev server\nyarn serve"),l.default.createElement("p",null,"The dev server will automatically update when we change files, so we can leave that running. We will still be working in the terminal, so you will want to open up a new terminal window/tab and navigate to the application's directory. Once you have done that, there are a few packages that need to be installed."),l.default.createElement(u.PrismBlock,{lang:"bash"},"yarn add @hickory/browser @curi/core @curi/vue"),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"@hickory/browser")," package will be used to create an object that interacts with the browser to power navigation (e.g. updates the URI in the address bar when you click a link). ",l.default.createElement(u.InlineJS,null,"@curi/core")," ","provides the function to actually create the router."," ",l.default.createElement(u.InlineJS,null,"@curi/vue")," gives us a plugin for Vue and some Vue components that interact with the router.")),l.default.createElement(c.Section,{title:"History and Locations",id:"history"},l.default.createElement("p",null,"URIs can be broken into parts to identify a location. With a single-page application, we don't care about the URI's protocol (http, https) or its hostname (www.example.com). The properties we care about are the"," ",l.default.createElement(u.InlineJS,null,"pathname"),", ",l.default.createElement(u.InlineJS,null,"hash"),", and ",l.default.createElement(u.InlineJS,null,"query"),"."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'// uri = "https://example.com/one?key=value#id\n{\n  pathname: "/one",\n  query: "key=value",\n  hash: "id"\n}'),l.default.createElement("p",null,"The router will match its routes against a location's"," ",l.default.createElement(u.InlineJS,null,"pathname")," to figure out which route matches. The"," ",l.default.createElement(u.InlineJS,null,"query")," and ",l.default.createElement(u.InlineJS,null,"hash")," values are not used for matching routes."),l.default.createElement("p",null,"Curi uses the ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory"},"Hickory")," ","library to create a history object that will enable us to navigate within our application. Hickory provides a few different packages to create history objects for different environments, but the only one we care about right now is the browser history, which comes from the"," ",l.default.createElement(u.InlineJS,null,"@hickory/browser")," package. A browser history object will interact with the browser's native"," ",l.default.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API"},"History API")," ","so that our application can change locations (and the URI in the address bar) without making a request to a server and reloading the page."),l.default.createElement("p",null,"We can import the ",l.default.createElement(u.InlineJS,null,"Browser")," function from"," ",l.default.createElement(u.InlineJS,null,"@hickory/browser")," in our main file (",l.default.createElement(u.InlineJS,null,"src/main.js"),", which ",l.default.createElement(u.InlineJS,null,"@vue/cli")," created for us). To create a history object, we just need to call that function."),l.default.createElement(s.Note,null,"The history object can be configured with"," ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory/blob/master/docs/api/Browser.md#options"},"an options object"),", but we will stick with the defaults."),l.default.createElement(u.PrismBlock,{lang:"javascript","data-line":"3,9"},"// src/main.js\nimport Vue from 'vue'\nimport Browser from '@hickory/browser'\n\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nconst history = Browser()\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')"),l.default.createElement(s.Note,null,"Eslint will complain here because we haven't actually used the new"," ",l.default.createElement(u.InlineJS,null,"history")," object. We can just ignore that warning for now because we'll get rid of it soon enough.")),l.default.createElement(c.Section,{title:"Defining the Routes",id:"defining-routes"},l.default.createElement("p",null,"Routes are simply JavaScript objects that define the valid locations for a router. They have a ",l.default.createElement(u.InlineJS,null,"name")," and a ",l.default.createElement(u.InlineJS,null,"path"),"."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'// this is a route\n{ name: "Home", path: "" }'),l.default.createElement("p",null,"A route's ",l.default.createElement(u.InlineJS,null,"name")," needs to be unique. We will use route names when we navigate within the application. A route's ",l.default.createElement(u.InlineJS,null,"path")," ","describes the location pathname that it should match."),l.default.createElement(c.Subsection,{title:"Path basics",id:"path-basics",type:"aside"},l.default.createElement("p",null,"Route paths are strings describing the pathname segments they should match."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"{ path: '' } // matches \"/\"\n{ path: 'about/stuff' } // matches \"/about/stuff\""),l.default.createElement("p",null,"Paths never begin with a slash."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// yes\n{ path: '' }\n// no\n{ path: '/' }"),l.default.createElement("p",null,"Paths can include dynamic parameters. These are specified with a string that starts with a colon (",l.default.createElement(u.InlineJS,null,":"),") followed by the name of the params."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// a param named \"id\"\n{ path: ':id' }"),l.default.createElement("p",null,"Routes can be nested using the ",l.default.createElement(u.InlineJS,null,"children")," property of a route. A nested route inherits the path from its ancestor route(s), so its ",l.default.createElement(u.InlineJS,null,"path")," is only the additional part of the pathname that should be matched."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'{\n  name: "Parent",\n  path: "parent", // matches /parent\n  children: [\n    // matches /parent/daughter\n    { name: "Daughter", path: "daughter" },\n    // matches /parent/son\n    { name: "Son", path: "son" }\n  ]\n}')),l.default.createElement("p",null,"The website will start with four routes."),l.default.createElement("table",null,l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"name"),l.default.createElement("th",null,"path"),l.default.createElement("th",null,"Description"))),l.default.createElement("tbody",null,l.default.createElement("tr",null,l.default.createElement("td",null,"Home"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'""')),l.default.createElement("td",null,"Lists books available for purchase")),l.default.createElement("tr",null,l.default.createElement("td",null,"Book"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'"book/:id"')),l.default.createElement("td",null,"Details about an individual book")),l.default.createElement("tr",null,l.default.createElement("td",null,"Checkout"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'"checkout"')),l.default.createElement("td",null,'"Buy" the books in the shopping cart')),l.default.createElement("tr",null,l.default.createElement("td",null,"Catch All"),l.default.createElement("td",null,l.default.createElement(u.InlineJS,null,'"(.*)"')),l.default.createElement("td",null,"Display a not found page for all other locations")))),l.default.createElement(s.Note,null,"The catch all route uses a regular expression syntax to indicate that it should match everything. Curi uses the"," ",l.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp"},l.default.createElement(u.InlineJS,null,"path-to-regexp"))," ","package for route matching. We will only be using some of its basic syntax, but you can read its documentation to learn about more advanced path syntax."),l.default.createElement("p",null,"Inside of the ",l.default.createElement(u.InlineJS,null,"src")," directory, we will create a"," ",l.default.createElement(u.InlineJS,null,"routes.js")," file where we can define the application's routes."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/routes.js"),l.default.createElement(u.PrismBlock,{lang:"javascript"},'// src/routes.js\nexport default [\n  {\n    name: "Home",\n    path: ""\n  },\n  {\n    name: "Book",\n    path: "book/:id"\n  },\n  {\n    name: "Checkout",\n    path: "checkout"\n  },\n  {\n    name: "Catch All",\n    path: "(.*)"\n  }\n];')),l.default.createElement(c.Section,{title:"The Router",id:"router"},l.default.createElement("p",null,"With the history object created and the routes defined, we are ready to create the router. Back in the ",l.default.createElement(u.InlineJS,null,"src/index.js")," file, we should import the ",l.default.createElement(u.InlineJS,null,"curi")," function from ",l.default.createElement(u.InlineJS,null,"@curi/core")," as well as our routes from ",l.default.createElement(u.InlineJS,null,"src/routes.js")),l.default.createElement(u.PrismBlock,{lang:"javascript","data-line":"3,6,12"},"// src/main.js\nimport Vue from 'vue'\nimport curi from '@curi/core';\nimport Browser from '@hickory/browser'\n\nimport routes from './routes';\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nconst history = Browser()\nconst router = curi(history, routes)\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')"),l.default.createElement(s.Note,null,"The Eslint warning has now moved to the ",l.default.createElement(u.InlineJS,null,"router"),", but this is still nothing to worry about."),l.default.createElement("p",null,"We will add router support to the Vue application using a plugin. This plugin does a couple of things. First, it makes some Curi components available within the application. The only one of these components that we will be using is the ",l.default.createElement(u.InlineComponent,null,"curi-link"),". Second, it makes router related values accessible to the components in the application. The router is available as ",l.default.createElement(u.InlineJS,null,"this.$router")," and the"," ",l.default.createElement(u.InlineJS,null,"response")," and ",l.default.createElement(u.InlineJS,null,"navigation")," (we will cover these next) are grouped under ",l.default.createElement(u.InlineJS,null,"this.$curi"),". When the ",l.default.createElement(u.InlineJS,null,"CuriPlugin")," ","is installed, the ",l.default.createElement(u.InlineJS,null,"router")," as passed in the options object."),l.default.createElement(u.PrismBlock,{lang:"javascript","data-line":"5,14"},"// src/main.js\nimport Vue from 'vue'\nimport curi from '@curi/core';\nimport Browser from '@hickory/browser'\nimport { CuriPlugin } from '@curi/vue'\n\nimport routes from './routes';\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nconst history = Browser()\nconst router = curi(history, routes)\nVue.use(CuriPlugin, { router })\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')")),l.default.createElement(c.Section,{title:"Rendering with Vue",id:"rendering"},l.default.createElement("p",null,"We can now render our application. We will re-use the provide"," ",l.default.createElement(u.InlineJS,null,"App.vue")," file."),l.default.createElement(c.Subsection,{title:"Responses and Navigation",id:"responses",type:"aside"},l.default.createElement("p",null,"Whenever Curi receives a location, it matches its routes against it and generates a response. This is an object with data related to the route that matched the location. Later on we will modify this data ourselves, but for now the important thing to know is that the response lets us know about the current route."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// a sample response object\n{\n  body: undefined,\n  data: undefined,\n  error: undefined,\n  key: '1.0',\n  location: { pathname: '/', ... },\n  name: 'Home',\n  params: {},\n  partials: [],\n  status: 200\n}"),l.default.createElement("p",null,"The router uses an observer model to let functions subscribe to be called when a new response is generated. The ",l.default.createElement(u.InlineJS,null,"CuriPlugin")," ","sets up an observer so that it can trigger a re-render whenever there is a new one."),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"navigation")," object contains additional information about a navigation that doesn't make sense to include in the response object. This includes the navigation's \"action\" (",l.default.createElement(u.InlineJS,null,"PUSH"),","," ",l.default.createElement(u.InlineJS,null,"POP"),", or ",l.default.createElement(u.InlineJS,null,"REPLACE"),") and the previous response object. This can be useful for animation and modals.")),l.default.createElement("p",null,"Most of the time, the response is the only property you will need to use to render, but the other two may occasionally be useful."),l.default.createElement("p",null,"How do we use the response to render? Any way you want, really. Based on the sample response above, the obvious idea would be to determine what component to render based on the response's ",l.default.createElement(u.InlineJS,null,"name"),". However, we can make this even easier by using the ",l.default.createElement(u.InlineJS,null,"body")," property."),l.default.createElement("p",null,"Earlier it was mentioned that response objects can be modified. This is done in a route's ",l.default.createElement(u.InlineJS,null,"match.response()")," function."," ",l.default.createElement(u.InlineJS,null,"match.response()")," receives an object with a whole bunch of properties that we can use to modify the response. For the time being, we only care about one: ",l.default.createElement(u.InlineJS,null,"set"),". This is an object with functions that actually modify the response. ",l.default.createElement(u.InlineJS,null,"set.body()")," will set the"," ",l.default.createElement(u.InlineJS,null,"body")," property of the response object."),l.default.createElement(u.PrismBlock,{lang:"javascript"},'{\n  name: "Home",\n  path: "",\n  match: {\n    response({ set }) {\n      set.body(\'Home, sweet home.\');\n      /*\n       * response = {\n       *   body: "Home, sweet home.",\n       *   // ...\n       * }\n       */\n    }\n  }\n}'),l.default.createElement("p",null,"If we pass Vue components to ",l.default.createElement(u.InlineJS,null,"set.body()"),", we can render those using ",l.default.createElement(u.InlineComponent,null,"Component :is"),"."),l.default.createElement("p",null,"We haven't actually defined components for our routes yet, so we should throw together some placeholders."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/components/Home.vue src/components/Book.vue \\\n  src/components/Checkout.vue src/components/NotFound.vue"),l.default.createElement(u.PrismBlock,{lang:"html"},"\x3c!-- src/components/Home.vue --\x3e\n<template>\n  <div>Home</div>\n</template>"),l.default.createElement(u.PrismBlock,{lang:"html"},"\x3c!-- src/components/Book.vue --\x3e\n<template>\n  <div>Book</div>\n</template>"),l.default.createElement(u.PrismBlock,{lang:"html"},"\x3c!-- src/components/Checkout.vue --\x3e\n<template>\n  <div>Checkout</div>\n</template>"),l.default.createElement(u.PrismBlock,{lang:"html"},"\x3c!-- src/components/NotFound.vue --\x3e\n<template>\n  <div>Not Found</div>\n</template>"),l.default.createElement("p",null,"These components can be imported in ",l.default.createElement(u.InlineJS,null,"src/routes.js")," and attached to their respective routes."),l.default.createElement(u.PrismBlock,{lang:"javascript","data-line":"2-5,11-15,20-24,29-33,38-42"},'// src/routes.js\nimport Home from \'./components/Home\';\nimport Book from \'./components/Book\';\nimport Checkout from \'./components/Checkout\';\nimport NotFound from \'./components/NotFound\';\n\nexport default [\n  {\n    name: "Home",\n    path: "",\n    match: {\n      response({ set }) {\n        set.body(Home);\n      }\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    match: {\n      response({ set }) {\n        set.body(Book);\n      }\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    match: {\n      response({ set }) {\n        set.body(Checkout);\n      }\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    match: {\n      response({ set }) {\n        set.body(NotFound);\n      }\n    }\n  }\n];'),l.default.createElement("p",null,"We can now update ",l.default.createElement(u.InlineJS,null,"App.vue")," to render ",l.default.createElement(u.InlineJS,null,"response.body")," ","as a component, which as mentioned above is available through"," ",l.default.createElement(u.InlineJS,null,"this.$curi"),"."),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- src/App.vue --\x3e\n<template>\n  <component :is="$curi.response.body" />\n</template>\n'),l.default.createElement("p",null,"We can also remove the ",l.default.createElement(u.InlineComponent,null,"HelloWorld")," component."),l.default.createElement(u.PrismBlock,{lang:"bash"},"rm src/components/HelloWorld.vue"),l.default.createElement("p",null,"At this point in time our app is rendering, but is isn't very interesting because we cannot navigate between locations.")),l.default.createElement(c.Section,{title:"Navigating between locations",id:"navigating"},l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"CuriPlugin")," makes a ",l.default.createElement(u.InlineComponent,null,"curi-link")," component available with the appliaction. We can use that to navigate between locations within our application."),l.default.createElement(c.Subsection,{title:l.default.createElement("span",null,"The ",l.default.createElement(u.InlineComponent,null,"curi-link")," Component"),id:"link-component",type:"aside"},l.default.createElement("p",null,"Navigation isn't done by manually typing the pathname of the location the link should navigate to. Instead, we specify the name of the route using the ",l.default.createElement(u.InlineJS,null,"to")," prop."),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- { name: "Home", path: "" } --\x3e\n<curi-link to="Home">Home</curi-link>\n\x3c!-- <a href="/">Home</a> --\x3e'),l.default.createElement("p",null,"If a route has params, we provide these to the ",l.default.createElement(u.InlineComponent,null,"curi-link")," as a ",l.default.createElement(u.InlineJS,null,"params")," object. For a nested route, we would also need to provide params for any ancestor routes."),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- { name: "Book", path: "book/:id" } --\x3e\n<curi-link to="Book" :params="{ id: 7 }">The Dark Forest</curi-link>\n\x3c!-- <a href="/book/7">The Dark Forest</a> --\x3e'),l.default.createElement("p",null,"The ",l.default.createElement(u.InlineComponent,null,"curi-link")," is only for in-app navigation. If you want to link to pages outside of the application, use an anchor."),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- in-app --\x3e\n<curi-link to="Some Route">Some Route</curi-link>\n\n\x3c!-- out of app --\x3e\n<a href="https://github.com">GitHub</a>'),l.default.createElement("p",null,"If you need to attach query or hash data to a ",l.default.createElement(u.InlineComponent,null,"curi-link"),", use the ",l.default.createElement(u.InlineJS,null,"details")," prop."),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- { name: "Checkout", path: "checkout" } --\x3e\n<curi-link to="Checkout" :details="{ query: \'a=123\' }">Checkout</curi-link>\n\x3c!-- <a href="/checkout?a=123">Checkout</a> --\x3e')),l.default.createElement(c.Subsection,{title:"A Navigation Menu",id:"nav-menu"},l.default.createElement("p",null,"We will start with creating a navigation menu component with links to our home page and checkout page."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/components/NavMenu.vue"),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- src/components/NavMenu.vue --\x3e\n<template>\n  <nav>\n    <ul>\n      <li>\n        <curi-link to="Home">Home</curi-link>\n      </li>\n      <li>\n        <curi-link to="Checkout">Checkout</curi-link>\n      </li>\n    </ul>\n  </nav>\n</template>'),l.default.createElement("p",null,"We can import that in our ",l.default.createElement(u.InlineJS,null,"App.vue")," file and add it to our template. This is a good opportunity to also add some structure to the elements in the template."),l.default.createElement(u.PrismBlock,{lang:"html"},"\x3c!-- src/App.vue --\x3e\n<template>\n  <div>\n    <header>\n      <nav-menu />\n    </header>\n    <main>\n      <component :is=\"$curi.response.body\" />\n    </main>\n  </div>\n</template>\n\n<script type=\"src/javascript\">\n  import NavMenu from './components/NavMenu';\n\n  export default {\n    name: 'app',\n    components: {\n      'nav-menu': NavMenu\n    }\n  };\n<\/script>")),l.default.createElement(c.Subsection,{title:"Linking to Books",id:"book-links"},l.default.createElement("p",null,"We want to be able to link to individual books from the home page. First, we need data about the books. For now, we're going to hard-code the books in the ",l.default.createElement(u.InlineJS,null,"src/books.js")," module."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/books.js"),l.default.createElement("p",null,"You can copy+paste or modify the data, but the structure of the provided data should stay the same."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// src/books.js\nexport default [\n  {\n    id: 0,\n    title: 'The Name of the Wind',\n    author: 'Patrick Rothfuss',\n    published: '2007',\n    pages: 662\n  },\n  {\n    id: 1,\n    title: \"The Wise Man's Fear\",\n    author: 'Patrick Rothfuss',\n    published: '2011',\n    pages: 994\n  },\n  {\n    id: 2,\n    title: 'The Way of Kings',\n    author: 'Brandon Sanderson',\n    published: '2010',\n    pages: 1007\n  },\n  {\n    id: 3,\n    title: 'A Storm of Swords',\n    author: 'George R.R. Martin',\n    published: '2003',\n    pages: 1177\n  },\n  {\n    id: 78,\n    title: 'Words of Radiance',\n    author: 'Brandon Sanderson',\n    published: '2014',\n    pages: 1087\n  }\n];"),l.default.createElement("p",null,"The data can be imported in the ",l.default.createElement(u.InlineComponent,null,"Home")," component. We will iterate over the books with a ",l.default.createElement(u.InlineComponent,null,"Link")," to each one."),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- src/components/Home.vue --\x3e\n<template>\n  <div>\n    <ul>\n      <li v-for="b in books" :key="b.id">\n        <curi-link to="Book" :params="{ id: b.id }">\n          {{b.title}} by {{b.author}}\n        </curi-link>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  import books from \'../books\';\n\n  export default {\n    name: \'home\',\n    data() {\n      return { books };\n    }\n  }\n<\/script>'),l.default.createElement("p",null,"Now that we can navigate to the books, we should fill out the UI for the ",l.default.createElement(u.InlineComponent,null,"Book")," component. We will once again import the"," ",l.default.createElement(u.InlineJS,null,"books.js")," data. We can use ",l.default.createElement(u.InlineJS,null,"params.id")," to select the correct book. However, ",l.default.createElement(u.InlineJS,null,"params.id")," is a string, so we will need to parse it into an integer. Sometimes there won't be a valid book for the ",l.default.createElement(u.InlineJS,null,"params.id"),". In that case, we will also want to display a message that the requested book could not be found."),l.default.createElement(u.PrismBlock,{lang:"html"},"\x3c!-- src/components/Book.vue --\x3e\n<template>\n  <div v-if=\"book\">\n    <h1>{{book.title}}</h1>\n    <h2>by {{book.author}}</h2>\n    <p>Published in {{book.published}}</p>\n    <p>{{book.pages}} pages</p>\n  </div>\n  <div v-else>\n    The requested book could not be found\n  </div>\n</template>\n\n<script>\n  import books from '../books';\n\n  export default {\n    name: 'book',\n    computed: {\n      book() {\n        const id = parseInt(this.$curi.response.params.id, 10);\n        return books.find(b => b.id === id);\n      }\n    }\n  }\n<\/script>"))),l.default.createElement(c.Section,{title:"Let's go shopping",id:"shopping"},l.default.createElement("p",null,"We want to be able to add books to our shopping cart. Since this is a play site, we will store the cart data in memory."),l.default.createElement(u.PrismBlock,{lang:"bash"},"touch src/cart.js"),l.default.createElement("p",null,"The shopping cart implementation will be a JavaScript ",l.default.createElement(u.InlineJS,null,"Map"),". We can call its ",l.default.createElement(u.InlineJS,null,"set")," method to add books, its ",l.default.createElement(u.InlineJS,null,"clear")," ","method to reset the cart, and iterate over its ",l.default.createElement(u.InlineJS,null,"entries")," with a"," ",l.default.createElement(u.InlineJS,null,"for...of")," loop."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// src/cart.js\nconst cart = new Map();\n\nexport default {\n  add(book, quantity) {\n    cart.set(book, quantity);\n  },\n  items() {\n    const books = [];\n    for (let [book, quantity] of cart.entries()) {\n      books.push({\n        title: book.title,\n        quantity\n      });\n    }\n    return books;\n  },\n  reset() {\n    cart.clear();\n    return [];\n  }\n};"),l.default.createElement("p",null,"As stated above, we can access our ",l.default.createElement(u.InlineJS,null,"router")," in the"," ",l.default.createElement(u.InlineComponent,null,"Book")," component using ",l.default.createElement(u.InlineJS,null,"this.$router"),"."," ",l.default.createElement(u.InlineJS,null,"router.history")," is our Hickory history object. This object can be used to navigate to a new location. This means that when the user clicks a button to add a book to their shopping cart, we can automatically navigate to the checkout page."),l.default.createElement(c.Subsection,{title:"Navigation Methods",id:"nav-methods",type:"aside"},l.default.createElement("p",null,"The ",l.default.createElement(u.InlineJS,null,"history")," object provides three methods to navigate to new locations."),l.default.createElement("p",null,l.default.createElement(u.InlineJS,null,"push()")," pushes a new location after the current index, removing any locations after the current location."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nhistory.push({ pathname: '/new' })\n// session = ['/one', '/two', '/new'], index = 2"),l.default.createElement("p",null,l.default.createElement(u.InlineJS,null,"replace()")," replaces the location at the current index."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nhistory.replace({ pathname: '/new' })\n// session = ['/one', '/new', '/three'], index = 1"),l.default.createElement("p",null,l.default.createElement(u.InlineJS,null,"navigate()")," is a mix between ",l.default.createElement(u.InlineJS,null,"push()")," and"," ",l.default.createElement(u.InlineJS,null,"replace()"),". It mimics the behavior of clicking on links, so if you navigate to the same location as the current one, and if you navigate to a new location, it will push."),l.default.createElement(u.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nhistory.navigate({ pathname: '/two' })\n// session = ['/one', '/two', '/three'], index = 1\nhistory.navigate({ pathname: '/new' })\n// session = ['/one', '/two', '/new'], index = 2","`}")),l.default.createElement("p",null,"Curi uses add-ons to add functionality to routes. Most of the time, you have to include these while creating the router, but Curi has one built-in add-on: ",l.default.createElement(u.InlineJS,null,"pathname"),". The ",l.default.createElement(u.InlineComponent,null,"curi-link")," ","automatically generates the correct pathname string using the"," ",l.default.createElement(u.InlineJS,null,"pathname")," add-on, the ",l.default.createElement(u.InlineJS,null,"to")," prop (and sometimes the"," ",l.default.createElement(u.InlineJS,null,"params")," prop). We can access this add-on as"," ",l.default.createElement(u.InlineJS,null,"router.addons.pathname()")," to generate pathnames ourselves."),l.default.createElement("p",null,"We also want to import our shopping cart API so that we can add a book to the cart."),l.default.createElement(u.PrismBlock,{lang:"html","data-line":"8-10,19,29-35"},"\x3c!-- src/components/Book.vue --\x3e\n<template>\n  <div v-if=\"book\">\n    <h1>{{book.title}}</h1>\n    <h2>by {{book.author}}</h2>\n    <p>Published in {{book.published}}</p>\n    <p>{{book.pages}} pages</p>\n    <button type=\"button\" v-on:click=\"onClick\">\n      Add to Cart\n    </button>\n  </div>\n  <div v-else>\n    The requested book could not be found\n  </div>\n</template>\n\n<script>\n  import books from '../books';\n  import cart from '../cart';\n\n  export default {\n    name: 'book',\n    computed: {\n      book() {\n        const id = parseInt(this.$curi.response.params.id, 10);\n        return books.find(b => b.id === id);\n      }\n    },\n    methods: {\n      onClick: function() {\n        cart.add(this.book, 1);\n        const pathname = this.$router.addons.pathname('Checkout');\n        this.$router.history.push({ pathname });\n      }\n    }\n  }\n<\/script>"),l.default.createElement("p",null,"Finally, we can update our ",l.default.createElement(u.InlineComponent,null,"Checkout")," component to display the books in the shopping cart. To do this, we will import our cart and books. Our cart only stores book ",l.default.createElement(u.InlineJS,null,"id"),"s, so we will need to merge the book data with the cart data."),l.default.createElement("p",null,'When a user "buys" the books in their shopping cart, we need to clear out the cart. We will also replace the current location with one whose'," ",l.default.createElement(u.InlineJS,null,"location.hash"),' is the string "thanks". When that is present in the URI, we can render a "Thanks for your purchase" message to "confirm" the purchase.'),l.default.createElement(u.PrismBlock,{lang:"html"},'\x3c!-- src/components/Checkout.vue --\x3e\n<template>\n  <div v-if="books.length">\n    <h1>Checkout</h1>\n    <table>\n      <thead>\n        <tr>\n          <th>Title</th>\n          <th>Quantity</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for="book in books" :key="book.title">\n          <td>{{book.title}}</td>\n          <td>{{book.quantity}}</td>\n        </tr>\n      </tbody>\n    </table>\n    <button type="button" v-on:click="onClick">\n      Buy\n    </button>\n  </div>\n  <div v-else-if="$curi.response.location.hash === \'thanks\'">\n    Thanks for your purchase!\n  </div>\n  <div v-else>\n    The cart is currently empty\n  </div>\n</template>\n\n<script>\n  import cart from \'../cart\';\n\n  export default {\n    name: \'checkout\',\n    data() {\n      return {\n        books: cart.items()\n      };\n    },\n    methods: {\n      onClick: function() {\n        this.books = cart.reset();\n        const pathname = this.$router.addons.pathname(\'Checkout\');\n        this.$router.history.replace({ pathname, hash: \'thanks\' });\n      }\n    }\n  }\n<\/script>')),l.default.createElement(c.Section,{title:"What's next?",id:"next"},l.default.createElement("p",null,"We now have a functional website built with Vue and Curi. What should you do next? Build another site! You can also check out the"," ",l.default.createElement(o.Link,{to:"Guides"},"guides")," for information on advanced techniques.")))});t.default=d}});