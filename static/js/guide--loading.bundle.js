(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{115:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return l.default.createElement(l.default.Fragment,null,l.default.createElement(u.Explanation,null,l.default.createElement("p",null,"In the code splitting guide, we added a function that calls"," ",l.default.createElement(r.InlineJS,null,"import()")," to a route's ",l.default.createElement(r.InlineJS,null,"resolve")," object in order to dynamically load modules. We can do the same thing for other data.")),l.default.createElement(o.Section,{title:"resolve",id:"resolve"},l.default.createElement(u.Explanation,null,l.default.createElement("p",null,"An async function (with any name you want it to have) can be added to the ",l.default.createElement(r.InlineJS,null,"resolve")," object and the value it resolves will be available in the route's ",l.default.createElement(r.InlineJS,null,"response()")," function (as a property of the ",l.default.createElement(r.InlineJS,null,"resolved")," object)."),l.default.createElement("p",null,"When the ",l.default.createElement(r.InlineJS,null,"Recipe")," route matches, we want to fetch data for that specific recipe (using the ",l.default.createElement(r.InlineJS,null,"id")," param from the path).")),l.default.createElement(u.CodeBlock,null,"const routes = [\n  {\n    name: 'Recipe',\n    path: 'recipe/:id'\n  }\n];"),l.default.createElement(u.Explanation,null,l.default.createElement("p",null,"Here, we will name the ",l.default.createElement(r.InlineJS,null,"resolve")," function for fetching data"," ",l.default.createElement(r.InlineJS,null,'"data"'),"."),l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"resolve.data()")," function will be passed an object that contains the matched route response properties, including the route"," ",l.default.createElement(r.InlineJS,null,"params"),"."),l.default.createElement("p",null,"All ",l.default.createElement(r.InlineJS,null,"resolve")," functions are expected to return a Promise."),l.default.createElement("p",null,"Now, when we navigate to ",l.default.createElement(r.InlineJS,null,"/recipe/chocolate-chip-cookies"),", the ",l.default.createElement(r.InlineJS,null,"resolve.data()")," function will call the fake API function to load the ",l.default.createElement(r.InlineJS,null,'"chocolate-chip-cookies"')," recipe. The function will resolve with the loaded data.")),l.default.createElement(u.CodeBlock,null,"{\n  name: 'Recipe',\n  path: 'recipe/:id',\n  resolve: {\n    data: ({ params }) => fakeAPI.getRecipe(params.id)\n  }\n}")),l.default.createElement(o.Section,{title:"response",id:"response"},l.default.createElement(u.Explanation,null,l.default.createElement("p",null,"While ",l.default.createElement(r.InlineJS,null,"resolve.data()")," starts our data loading, it doesn't actually do anything. Instead, we should handle any loaded data with the ",l.default.createElement(r.InlineJS,null,"response()")," function."),l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"response()")," and ",l.default.createElement(r.InlineJS,null,"resolve.data()")," are separate because while a route is resolving, the user may navigate again, which overrides the current navigation. We cannot cancel the"," ",l.default.createElement(r.InlineJS,null,"resolve.data()")," function for the current navigation, so if it performs any side effects, our application is stuck with them. To avoid this, the ",l.default.createElement(r.InlineJS,null,"response()")," function is not called until we know that the current navigation will complete."),l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"response()")," function will receive an object with a number of properties. These are covered in in the"," ",l.default.createElement(a.Link,{to:"Guide",params:{slug:"routes-and-responses"},hash:"route-response"},"Routes and Responses")," ","guide, but the only one we care about right now is"," ",l.default.createElement(r.InlineJS,null,"resolved"),".")),l.default.createElement(u.CodeBlock,null,"{\n  name: 'Recipe',\n  path: 'recipe/:id',\n  resolve: {\n    data: ({ params }) => fakeAPI.getRecipe(params.id),\n  },\n  response({ resolved }) {\n    return {\n      body: Recipe,\n      data: resolved.data\n    }\n  }\n}"),l.default.createElement(u.Explanation,null,l.default.createElement("p",null,"If at some point in time we decide that we want to change our URI pathname structure, we can also use the ",l.default.createElement(r.InlineJS,null,"response()")," ","function to redirect."),l.default.createElement("p",null,"You can specify the route to redirect to with ",l.default.createElement(r.InlineJS,null,"redirectTo"),". This takes the ",l.default.createElement(r.InlineJS,null,"name")," of the route to redirect to,"," ",l.default.createElement(r.InlineJS,null,"params")," if the route (or ancestor routes) have route params. ",l.default.createElement(r.InlineJS,null,"hash"),", ",l.default.createElement(r.InlineJS,null,"query"),", and ",l.default.createElement(r.InlineJS,null,"state")," can also be provided."),l.default.createElement("p",null,"After Curi emits the response, it will also automatically redirect to the new location!")),l.default.createElement(u.CodeBlock,null,"{\n  name: 'Old Recipe',\n  path: 'r/:id',\n  response: ({ params }) => {\n    // destructure the current location to preserve\n    // query/hash values\n    return {\n      redirectTo: {\n        name: 'Recipe',\n        params: params,\n        hash: location.hash\n      }\n    };\n  }\n}")),l.default.createElement("p",null,"A route's ",l.default.createElement(r.InlineJS,null,"resolve")," object and ",l.default.createElement(r.InlineJS,null,"response()")," functions offer a convenient way to do data loading prior to actually rendering the route, but please remember that your application will not be re-rendering until ",l.default.createElement("em",null,"after")," the fetching has resolved. If you have a long running load function, you may wish to implement some sort of loading display. The"," ",l.default.createElement(a.Link,{to:"Example",params:{category:"react",slug:"data-loading"}},"data loading example")," ","shows one approach to how to do this."))};var l=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(1),r=n(6),o=(n(11),n(10)),u=n(7)}}]);