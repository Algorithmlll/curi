(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{105:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return l.default.createElement(l.default.Fragment,null,l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Routes describe the valid locations within an application. Responses provide data about the route that matches the current location.")),l.default.createElement(u.Section,{title:"Responses",id:"responses"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"When Curi receives a location, it compares the location's"," ",l.default.createElement(r.InlineJS,null,"pathname")," to each route's ",l.default.createElement(r.InlineJS,null,"path")," to find which one matches best and uses that route to create a response object.")),l.default.createElement(u.Subsection,{title:"The Properties of a Response Object",id:"response-properties"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"There are two types of response properties.")),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,'The "match" properties are set based on the route that matches a location. A response always has these properties.')),l.default.createElement(i.CodeBlock,null,"// match properties\n{\n  // The location object used to generate the response.\n  location: { pathname: '/photos/6789/12345', ... },\n\n  // The name of the best matching route\n  name: 'Photo',\n\n  // The name of ancestor routes that matched\n  // part of the location's pathname\n  partials: ['Album'],\n\n  // An object containing the values parsed\n  // from the pathname by path-to-regexp.\n  // This includes params from ancestor routes.\n  params: { photoID: 12345, albumID: 6789 },\n}"),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,'The "settable" properties are ones that are added by a matched route\'s ',l.default.createElement(r.InlineJS,null,"response()")," function. These only exist on the response when they are returned by a route's ",l.default.createElement(r.InlineJS,null,"response()")," ","function."),l.default.createElement("p",null,'The "settable" properties are:'),l.default.createElement("table",null,l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"property"),l.default.createElement("th",null,"description"))),l.default.createElement("tbody",null,l.default.createElement("tr",null,l.default.createElement("td",null,"body"),l.default.createElement("td",null,"The component(s) that should be rendered for a route.")),l.default.createElement("tr",null,l.default.createElement("td",null,"status"),l.default.createElement("td",null,"An http status, mostly useful for server side rendering.")),l.default.createElement("tr",null,l.default.createElement("td",null,"data"),l.default.createElement("td",null,"A place to attach any data you want to the response, such as data loaded in the route's ",l.default.createElement(r.InlineJS,null,"resolve")," functions.")),l.default.createElement("tr",null,l.default.createElement("td",null,"title"),l.default.createElement("td",null,"The response's title, which can be used with"," ",l.default.createElement(a.Link,{to:"Package",params:{package:"side-effect-title"}},l.default.createElement(r.InlineJS,null,"@curi/side-effect-title"))," ","to set the browsers tab's title.")),l.default.createElement("tr",null,l.default.createElement("td",null,"error"),l.default.createElement("td",null,"A convenient place to attach any errors to the response.")),l.default.createElement("tr",null,l.default.createElement("td",null,"redirectTo"),l.default.createElement("td",null,"An object describing a route that Curi should automatically redirect to."))))),l.default.createElement(i.CodeBlock,null,"// settable properties (optional)\n{\n  body: Photo,\n  // or maybe\n  body: {\n    menu: PhotoMenu,\n    main: Photo\n  },\n  // Please see below for more information\n  // about this property\n\n  status: 200,\n\n  data: {...},\n\n  title: 'Photo 12345',\n\n  error: undefined,\n\n  redirectTo: {...}\n}")),l.default.createElement(u.Subsection,{title:"Response Body",id:"response-body"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Curi isn't strict about how you use responses, but you will most likely always want to use a route's ",l.default.createElement(r.InlineJS,null,"response()")," function to attach a ",l.default.createElement(r.InlineJS,null,"body")," property to a response. The usual pattern is to use a route's ",l.default.createElement(r.InlineJS,null,"body")," property to describe which component(s) to render when a route matches. This can either be a single component for basic layouts or an object with a number of components for"," ",l.default.createElement(a.Link,{to:"Example",params:{category:"react",slug:"multi-body"}},"advanced layouts"),"."),l.default.createElement(o.Note,null,"Each route should use the same ",l.default.createElement(r.InlineJS,null,"body"),' "shape". If one route returns a single component while another route return an object, you will be making rendering more complicated for yourself.')),l.default.createElement(i.CodeBlock,null,"// do NOT do this\n// mixing body shapes complicates rendering\nconst routes = [\n  {\n    response() {\n      return { body: One }\n    }\n  },\n  {\n    response() {\n      return {\n        body: {\n          main: Main,\n          menu: Menu\n        }\n      }\n    }\n  }\n];")),l.default.createElement(u.Subsection,{title:"Redirect Response",id:"redirect-properties"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"When a route's ",l.default.createElement(r.InlineJS,null,"response()")," function returns an object with a"," ",l.default.createElement(a.Link,{to:"Package",params:{package:"router"},hash:"response"},l.default.createElement(r.InlineJS,null,"redirectTo")," property"),", the router will use it to generate a location object that Curi will automatically redirect to.")),l.default.createElement(i.CodeBlock,null,"{\n  // The redirectTo property provides information on\n  // where you should redirect to\n  redirectTo: { pathname: '/login' }\n}"),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"You can choose whether or not you want responses with a"," ",l.default.createElement(r.InlineJS,null,"redirectTo")," property to be emitted. If they are not emitted, then the router will redirect without the application's observers knowing about the redirect. The default behavior is to emit redirects, but this also means that you have to render using the redirect response. The ",l.default.createElement(r.InlineJS,null,"{ emitRedirects: false }")," ","option prevents this.")),l.default.createElement(i.CodeBlock,null,"const router = curi(history, routes, {\n  emitRedirects: false\n});"))),l.default.createElement(u.Section,{title:"Routes",id:"routes"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Routes are JavaScript objects with two required properties—",l.default.createElement(r.InlineJS,null,"name")," ","and ",l.default.createElement(r.InlineJS,null,"path"),"—and a number of optional properties."),l.default.createElement("p",null,"A route's ",l.default.createElement(r.InlineJS,null,"path")," is used to determine if a route matches a location. Path strings use"," ",l.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp"},l.default.createElement(r.InlineJS,null,"path-to-regexp"))," ","formatting, which allows you to define dynamic path parameters that a route should match."),l.default.createElement("p",null,"A route's ",l.default.createElement(r.InlineJS,null,"name")," is a unique identifier for a route. The"," ",l.default.createElement(r.InlineJS,null,"name")," is used to"," ",l.default.createElement(a.Link,{to:"Guide",params:{slug:"route-interactions"}},"interact")," ","with a specific route.")),l.default.createElement(i.CodeBlock,null,'const routes = [\n  {\n    name: "Home",\n    path: ""\n  },\n  {\n    name: "Album",\n    // the "id" segment can be any value\n    path: "a/:id"\n  }\n];'),l.default.createElement(u.Subsection,{title:"Resolve",id:"resolve"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"When a route matches, you might want to perform some actions before the application re-renders. This can include validating that a user is authorized to navigate to a route and loading data based on the path parameters parsed from the location."),l.default.createElement("p",null,"A route's ",l.default.createElement(r.InlineJS,null,"resolve")," property is an optional object for attaching functions to a route. A response will not be emitted until after all of a route's ",l.default.createElement(r.InlineJS,null,"resolve")," functions have finished."),l.default.createElement("p",null,"A route with ",l.default.createElement(r.InlineJS,null,"resolve")," properties is asynchronous, which has effects to be aware of. You can read about these in the"," ",l.default.createElement(a.Link,{to:"Guide",params:{slug:"sync-or-async"}},"Sync or Async")," ","guide."),l.default.createElement("p",null,"Curi uses Promises to manage a route's ",l.default.createElement(r.InlineJS,null,"resolve")," ","functions. Each function should return a Promise. This makes it easy to wait for all of the ",l.default.createElement(r.InlineJS,null,"resolve")," functions to complete before emitting the response for a matched route."),l.default.createElement(o.Note,null,l.default.createElement(r.InlineJS,null,"Promise.resolve()")," can be used to return a Promise."),l.default.createElement("p",null,"When ",l.default.createElement(r.InlineJS,null,"resolve"),' functions are called, they will be passed an object with the "match" properties of a response. These are the matched route\'s ',l.default.createElement(r.InlineJS,null,"name"),", the ",l.default.createElement(r.InlineJS,null,"location"),", an object of parsed ",l.default.createElement(r.InlineJS,null,"params"),", and an array of the names of"," ",l.default.createElement(r.InlineJS,null,"partial")," route matches.")),l.default.createElement(i.CodeBlock,null,'{\n  name: "User",\n  path: "u/:id",\n  resolve: {\n    authorized: () => {\n      // run code to verify the user can view the page\n      return Promise.resolve(true);\n    },\n    body: () => {\n      // import the User component using the import() API\n      return import("./components/User");\n    },\n    data: ({ name, location, params, partials }) => {\n      // get specific data using the route\'s params\n      return UserAPI.get(params.id);\n    }\n  }\n}')),l.default.createElement(u.Subsection,{title:"The Response Function",id:"route-response"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Each route can have a ",l.default.createElement(r.InlineJS,null,"response()")," function. The role of the ",l.default.createElement(r.InlineJS,null,"response()")," function is to return an object of properties to merge onto the response object that will be emitted for the new location."),l.default.createElement("p",null,"Only valid response properties will be merged onto the response. These are the optional response properties listed above (",l.default.createElement(r.InlineJS,null,"body"),", ",l.default.createElement(r.InlineJS,null,"title"),", ",l.default.createElement(r.InlineJS,null,"status"),", ",l.default.createElement(r.InlineJS,null,"data"),","," ",l.default.createElement(r.InlineJS,null,"redirectTo"),", and ",l.default.createElement(r.InlineJS,null,"error"),")."),l.default.createElement("p",null,"The function receives an object with a number of properties you might find useful."),l.default.createElement("p",null,"The first is an object of ",l.default.createElement(r.InlineJS,null,"resolve")," properties (the base response properties)."),l.default.createElement("p",null,"The second is a ",l.default.createElement(r.InlineJS,null,"resolved")," object, which contains the resolved values from the route's ",l.default.createElement(r.InlineJS,null,"resolve")," functions."),l.default.createElement("p",null,"The third property is an ",l.default.createElement(r.InlineJS,null,"error"),", which is only defined if one of the ",l.default.createElement(r.InlineJS,null,"resolve")," functions throws an error and you don't catch it.")),l.default.createElement(i.CodeBlock,null,'import User from "./components/User";\n\nconst routes = [\n  {\n    name: "User",\n    path: "u/:id",\n    resolve: {\n      data: ({ params }) => UserAPI.get(params.id)\n    },\n    response({ match, resolved, error }) {\n      if (error) {\n        // ...\n      }\n      return {\n        body: User,\n        data: resolved.data,\n        title: `User ${match.params.id}`\n      };\n    }\n  }\n];')),l.default.createElement(u.Section,{title:"Matching Routes",id:"matching-routes"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Whenever Curi receives a new location, it will determine which route has a ",l.default.createElement(r.InlineJS,null,"path")," that matches the new location's"," ",l.default.createElement(r.InlineJS,null,"pathname")," by walking over the route objects in the order that they are defined in the array. If a route has"," ",l.default.createElement(r.InlineJS,null,"children"),", those will be checked before moving to the route's nest sibling."),l.default.createElement("p",null,"We'll use this simple route setup to demonstrate how this works.")),l.default.createElement(i.CodeBlock,null,"const routes = [\n  {\n    name: 'Home',\n    path: '',\n  },\n  {\n    name: 'Album',\n    path: 'a/:album'\n  },\n  {\n    name: 'Not Found',\n    path: '(.*)' // this matches EVERY pathname\n  }\n];"),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Curi's default matching behavior looks for exact matches. This means that when the route only matches part of the pathname, it does not count as a match. If the user navigates to a location with the pathname ",l.default.createElement(r.InlineJS,null,'"/a/red/yellow"'),", the ",l.default.createElement(r.InlineJS,null,"Album")," ","route will only partially match, so Curi will move on to the next route, ",l.default.createElement(r.InlineJS,null,"Not Found"),", which has a catch all ",l.default.createElement(r.InlineJS,null,"path")," ","that matches every pathname. Routes can be configured to allow partial matching, but exact matching is usually preferable."),l.default.createElement("p",null,"If a route has children, Curi will check if any of those routes form a complete match before moving on to the next route in the routes array.")),l.default.createElement(i.CodeBlock,null,"// when the pathname is '/a/Coloring+Book/All+Night',\n// the Album route will partially match the pathname.\n// Then, its child route Song will be tested and fully\n// match the pathname.\n{\n  name: 'Album',\n  path: 'a/:album',\n  children: [\n    {\n      name: 'Song',\n      path: ':title'\n    }\n  ]\n}"),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"You can control whether a route does exact or partial matching with"," ",l.default.createElement(a.Link,{hash:"pathOptions"},l.default.createElement(r.InlineJS,null,"pathOptions"))," ","property. If you set ",l.default.createElement(r.InlineJS,null,"{ end: false }"),", a route that partially matches will consider itself matched.")),l.default.createElement(i.CodeBlock,null,"// when the pathname is\n// '/a/Good+Kid,+M.A.A.D+City/Poetic+Justice',\n// the Album route will partially match, but because\n// it sets \"end\" to false, the partial match will still be used.\n{\n  name: 'Album',\n  path: 'a/:albumID',\n  pathOptions: {\n    end: false\n  }\n}"),l.default.createElement(u.Subsection,{title:"No Matching Route",id:"catch-all"},l.default.createElement(o.Warning,null,l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"If none of your routes match a location, Curi will do nothing! You need to set a catch-all route to match these locations yourself. The best way to do this is to add a route to the end of your routes array with a ",l.default.createElement(r.InlineJS,null,"path")," of"," ",l.default.createElement(r.InlineJS,null,'"(.*)"'),", which will match every pathname.")),l.default.createElement(i.CodeBlock,null,"{\n  name: 'Not Found',\n  path: '(.*)',\n}"))))))};var l=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(1),r=n(6),o=n(11),u=n(10),i=n(7)}}]);