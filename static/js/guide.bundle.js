webpackJsonp([2],{56:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(65),i=a(l);t.default=function(e){var t=e.params,n=e.data;if(!n)return r.default.createElement("div",null,"The requested gudie could not be found.");var a=i.default[t.slug];return r.default.createElement(a,{name:n.name})}},59:function(e,t,n){"use strict";function a(e,t){var n={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}Object.defineProperty(t,"__esModule",{value:!0}),t.Subsection=t.Section=void 0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=n(0),l=function(e){return e&&e.__esModule?e:{default:e}}(r),i=n(1),s=function(e){var t=e.title,n=e.id,a=e.children,o=e.tag,r=e.type,s=void 0===r?"section":r;return l.default.createElement("div",{className:s},l.default.createElement(o,{id:n},t,l.default.createElement(i.Link,{className:"header-link",details:{hash:n}},"#")),a)},u=function(e){var t=e.tag,n=void 0===t?"h2":t,r=a(e,["tag"]);return l.default.createElement(s,o({type:"section",tag:n},r))};t.Section=u;var c=function(e){var t=e.tag,n=void 0===t?"h3":t,r=a(e,["tag"]);return l.default.createElement(s,o({type:"subsection",tag:n},r))};t.Subsection=c},63:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(67),i=a(l);t.default=function(e){var t=e.children;return r.default.createElement("div",{className:"guide"},r.default.createElement("div",{className:"content"},t||null),r.default.createElement("div",{className:"sidebar"},r.default.createElement("h2",null,"Guides"),r.default.createElement(i.default,null)))}},65:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(66),r=a(o),l=n(68),i=a(l),s=n(69),u=a(s),c=n(70),d=a(c),h=n(71),p=a(h),m=n(72),f=a(m),y=n(73),g=a(y),b=n(74),w=a(b),E=n(75),v=a(E),k=n(76),j=a(k);t.default={installation:r.default,"getting-started":i.default,routes:u.default,responses:d.default,addons:p.default,"side-effects":f.default,"response-caching":g.default,"code-splitting":w.default,load:v.default,react:j.default}},66:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(1),c=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"You can install the latest version of Curi from NPM. Curi has a peer dependency on the Hickory package, so you should go ahead and install that as well."),r.default.createElement(s.PrismBlock,{lang:"bash"},"npm install hickory curi"),r.default.createElement("p",null,"If you prefer to use script tags, you can use ",r.default.createElement("a",{href:"https://unpkg.com"},"Unpkg")," ","to load Curi and Hickory."),r.default.createElement(s.PrismBlock,{lang:"markup"},'<script src="https://unpkg.com/hickory/dist/hickory.js" />\n<script src="https://unpkg.com/curi/dist/curi.js" />'),r.default.createElement(c.Section,{title:"Promises",id:"promises"},r.default.createElement("p",null,"Curi uses Promises, so you may need to include a polyfill to add Promise support for older browsers (including IE 11)."),r.default.createElement("p",null,"If you need a general ES2015 polyfill, you can check out the one provided by Babel's"," ",r.default.createElement("a",{href:"https://babeljs.io/docs/usage/polyfill/#usage-in-browser"},"babel-polyfill")," package. If you only need a Promise polyfill, then you should check out the"," ",r.default.createElement("a",{href:"https://github.com/stefanpenner/es6-promise"},"es6-promise")," package.")),r.default.createElement("h2",null,"Next"),r.default.createElement("p",null,r.default.createElement(u.Link,{to:"Guide",params:{slug:"getting-started"}},"Get started")," with Curi."))}},67:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(1),i=n(15),s=n(7),u=a(s),c=function(e){var t=e.guides,n=e.withDescription;return r.default.createElement("ul",{className:"link-list"},t.map(function(e){return r.default.createElement("li",{key:e.name,className:n?"with":"solo"},r.default.createElement(l.Link,{to:"Guide",params:{slug:e.slug},active:{merge:u.default}},e.name))}))};t.default=function(e){var t=e.withDescription,n=void 0!==t&&t;return r.default.createElement("ul",null,Object.keys(i.groupedGuides).map(function(e){return r.default.createElement("li",{className:"link-group",key:e},r.default.createElement("h3",null,e),r.default.createElement(c,{guides:i.groupedGuides[e],withDescription:n}))}))}},68:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(1),c=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"Curi aims to be easy to setup. To get started, you just need to create a Hickory history object and an array of route objects. Pass those as arguments to the"," ",r.default.createElement(s.InlineJS,null,"createConfig")," function to create your configuration object. Then, use the Promise returned by ",r.default.createElement(s.InlineJS,null,"config.ready()")," to wait for your first response to be generated and you're ready to render."),r.default.createElement(c.Section,{title:"The History Object",id:"history-object"},r.default.createElement("p",null,"Curi's navigation is powered by the ",r.default.createElement("a",{href:"https://github.com/pshrmn/hickory"},"Hickory")," ","package. You just need to pick which type of Hickory history object is right for your application."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"import Browser from '@hickory/browser';\nimport Hash from '@hickory/hash';\nimport InMemory from '@hickory/in-memory';\n\n// Use Browser when your website has a dynamic server\nconst browserHistory = Browser();\n\n// Use Hash when your website uses a static file server\nconst hashHistory = Hash();\n\n// Use InMemory when your application doesn't run in a browser\nconst memoryHistory = InMemory();"),r.default.createElement("p",null,"Each history object has essentially the same API (InMemory has a few extra properties). The most important properties to know are the location object as well as the update, push, and replace methods."),r.default.createElement("p",null),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// the location property is the current location object\nbrowserHistory.location === {\n  pathname: '/guides/getting-started',\n  ...\n};\n\n// the push method will navigate to a new location\nbrowserHistory.push({ pathname: '/guides/installation' });\n\n// the replace method will replace the current location\n// with the provided one\nbrowserHistory.push({ pathname: '/guides/confirming-navigation' });\n\n// the update method will choose whether to push or replace for you\nbrowserHistory.update({ pathname: '/guides/getting-started' });\n")),r.default.createElement(c.Section,{title:"The Routes Array",id:"routes-array"},r.default.createElement("p",null,"Routes are objects with two required properties: name and path."),r.default.createElement("p",null,"Paths can be any valid ",r.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp"},"path-to-regexp")," ","string. It is just important that you do not begin the string with a forward slash (/). Forward slashes are fine anywhere else in the path. (",r.default.createElement(s.InlineJS,null,"this/is/fine"),", but "," ",r.default.createElement(s.InlineJS,null,"/this/is/not"),")."),r.default.createElement("p",null,"The names are used to generate URIs for you. With Curi, you never have to write a URI's pathname string yourself. It is required that all of your routes have unique names. This is because Curi generates location pathnames using route names (and params for non-static paths)."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const routes = [\n  {\n    name: 'Home',\n    path: '', // matches the pathname /\n    ...\n  },\n  ...\n]"),r.default.createElement("p",null,"How route matching works and the other route properties are explained more in-depth in the ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"routes"}},"All About Routes")," guide.")),r.default.createElement(c.Section,{title:"The Configuration Object",id:"configuration-object"},r.default.createElement("p",null,"Once you have your Hickory history object and your routes array, you just need to pass them to the default export from the Curi package (which we will name"," ",r.default.createElement(s.InlineJS,null,"createConfig")," here)."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"import createConfig from 'curi';\nimport Browser from '@hickory/browser';\nimport routes from './routes';\n\nconst history = Browser();\nconst config = createConfig(history, routes);\n"),r.default.createElement(c.Subsection,{title:"Other configuration options",id:"other-configuration-options"},r.default.createElement("p",null,"The ",r.default.createElement(s.InlineJS,null,"createConfig")," function can also take an optional third argument, which is an options object. You can use this to pass ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"addons"}},"addons"),","," ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"side-effects"}},"side effects"),", and a"," ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"response-caching"}},"cache")," to your configuration object."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const config = createConfig(history, routes, {\n  addons: [...],\n  sideEffects: [...],\n  cache: cacheObject\n});"))),r.default.createElement(c.Section,{title:"Responses"},r.default.createElement("p",null,"Whenever navigation happens, a new location object is created by Hickory. Curi uses that location object's pathname property to match against all of your routes. When it finds one that matches, it uses that route object to create a response object. You can subscribe to a Curi configuration object, and when a new response is created, your subscriber function will be called with the response."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const config = createConfig(history, routes);\nconfig.subscribe(response => {\n  // whenever the location changes, this function is called\n  // you can use this function to re-render your application\n  // using the new response object\n});\n"),r.default.createElement("p",null,"Responses are generated asynchronously. A Curi configuration object has a"," ",r.default.createElement(s.InlineJS,null,"ready")," function that returns a Promise and will resolve once the initial response has been generated. You do not have to use this, but it allows you to delay rendering until after the first response has been generated. If you want to render immediately, then you will need to handle how to render when there is no response."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const config = createConfig(history, routes);\n// wait to render until the first response is generated\nconfig.ready().then(response => {\n  // now we can render using the first response.\n});"),r.default.createElement("p",null,"Your location-based rendering will be centered around these response objects, so you should be familiar with the different properties that will be available to you. We will get into more details about responses in the"," ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"responses"}},"Rendering with Responses")," guide, but for now we will just go over how a route maps to a response."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// if you have the following routes\nconst routes = [\n  ...,\n  {\n    name: 'Album',\n    path: 'photos/:albumID',\n    ...,\n    children: [\n      {\n        name: 'Photo',\n        path: ':photoID',\n        body: () => Photo\n      }\n    ]\n  }\n];\n// when the user visits the URI /photos/6789/12345\n// the following response object would be created:\n\n{\n  // The location key\n  key: '1.0',\n\n  // The location object used to generate the response.\n  location: { pathname: '/photos/6789/12345', ... },\n\n  // The value returned by the route's body function\n  body: Photo,\n\n  // The name of the best matching route\n  name: 'Photo',\n\n  // The name of ancestor routes that matched\n  // part of the location's pathname\n  partials: ['Album'],\n\n  // An object containing the values parsed\n  // from the pathname by path-to-regexp.\n  params: { photoID: 12345, albumID: 6789 },\n\n  // There are a few more properties as well. Please read\n  // the Rendering with Responses guide to see those\n}")),r.default.createElement("h2",null,"Next"),r.default.createElement("p",null,"Now that you know the core of how Curi works, let's take a closer look at routes with the ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"routes"}},"All About Routes")," guide."))}},69:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(14),c=n(1),d=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"Routes are simply JavaScript objects with two required props: name and path. There are also a number of other props that you can use to enhance the routes. We will cover these below."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  name: 'Home',\n  path: ''\n};"),r.default.createElement(d.Section,{title:"Matching Routes",id:"matching-routes"},r.default.createElement("p",null,"First, we should cover how route matching works. Curi takes an array of route objects. Whenever Curi receives a new location, it will walk over the route objects in the order that they are defined in the array."),r.default.createElement("p",null,"Sometimes a route's path with only partially match the location's pathname. When this happens, the matching behavior will vary based on the route's props. By default, routes perform exact matching. This means that when the route only matches part of the pathname, it does not count as a match."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// when the pathname is '/a/Run+The+Jewels+3/Hey+Kids',\n// the Album route will partially match the pathname. However,\n// Curi looks for complete matches, so it will move on to the\n// next route\n{\n  name: 'Album',\n  path: 'a/:album'\n}"),r.default.createElement("p",null,"However, if the route has children, then Curi will check if any of those routes form a complete match before moving on to the next route in the routes array."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// when the pathname is '/a/Coloring+Book/All+Night',\n// the Album route will partially match the pathname. Then,\n// its child route Song will be tested and fully match the pathname.\n{\n  name: 'Album',\n  path: 'a/:album',\n  children: [\n    {\n      name: 'Song',\n      path: ':title'\n    }\n  ]\n}"),r.default.createElement("p",null,"Another possibility happens when you use the ",r.default.createElement(s.InlineJS,null,"pathOptions")," object to set"," ",r.default.createElement(s.InlineJS,null,"end: false"),". When you do that, then a route the partially matches will consider itself matched."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// when the pathname is '/a/Good+Kid,+M.A.A.D+City/Poetic+Justice',\n// the Album route will partially match. However, because it sets\n// end to false, the partial match will be used.\n{\n  name: 'Album',\n  path: 'a/:albumID',\n  pathOptions: {\n    end: false\n  }\n}"),r.default.createElement("p",null,'If none of your routes match a pathname, then Curi will set a "404" status on the response object. The body property of the response will also be ',r.default.createElement(s.InlineJS,null,"undefined"),", so it is important that your application checks the response's status when it goes to render a response. You can also add a wildcard route (",r.default.createElement(s.InlineJS,null,"path: '*'"),') to the end of your routes array, and that route will always match. You may want to still manually set the status to "404" for the wildcard route, but it is not required.')),r.default.createElement(d.Section,{title:"Route properties",id:"route-properties"},r.default.createElement(d.Subsection,{title:"name",id:"name"},r.default.createElement("p",null,"A unique identifier. This should be a string or a symbol.")),r.default.createElement(d.Subsection,{title:"path",id:"path"},r.default.createElement("p",null,"A path-to-regexp style string. This should ",r.default.createElement("strong",null,"not")," have a leading slash. The string will be passed to path-to-regexp to generate a regular expression. Any"," ",r.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp#parameters"},"parameters")," will be identified so that they can be parsed out when matching against a location's pathname."),r.default.createElement(u.Note,null,"While path-to-regexp supports arrays and RegExps, only string paths are supported here. This is because the path must also be reversible to create a pathname given params.")),r.default.createElement(d.Subsection,{title:"pathOptions",id:"pathOptions"},r.default.createElement("p",null,"If you need to provide different path options than"," ",r.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp#usage"},"the defaults")," used by path-to-regexp, you should specify them with a ",r.default.createElement(s.InlineJS,null,"pathOptions")," object."),r.default.createElement(u.Note,null,"If a route has a children array property, it will ",r.default.createElement("strong",null,"always")," have the ",r.default.createElement(s.InlineJS,null,"end")," "," path option set to false.")),r.default.createElement(d.Subsection,{title:"body",id:"body"},r.default.createElement("p",null,"The body property gives you the opportunity to set the body property of a response for a given route. This must be a function and its return value will be what is set as the response object's body property."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// when the user visits /contact, the response object's body\n// property will be the Contact value\nconst contact = {\n  name: 'Contact',\n  path: 'contact',\n  body: () => Contact\n};")),r.default.createElement(d.Subsection,{title:"title",id:"title"},r.default.createElement("p",null,"You can use the title property of a route to specify a title string that should be set on the response when that route matches. This can either be a string or a function. If it is a string, then",r.default.createElement(s.InlineJS,null,"response.title")," will be set to the value of ",r.default.createElement(s.InlineJS,null,"route.title"),". If it is a function, it will be called (and passed the ",r.default.createElement(s.InlineJS,null,"response.params")," and"," ",r.default.createElement(s.InlineJS,null,"response.data")," values) to generate the title string."),r.default.createElement("p",null,"If a route does not have a title property, when it matches, the response's title property will be an empty string."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// as a string\n{\n  name: 'Contact',\n  path: 'contact',\n  title: 'How to contact us'\n}\n\n// as a function\n{\n  name: 'Contact Method',\n  path: ':method',\n  title: (params, data) => `Contact via ${params.method}`\n}")),r.default.createElement(d.Subsection,{title:"children",id:"children"},r.default.createElement("p",null,"An optional array of route objects. Any child routes will be matched relative to their parent route's path. This means that if a parent route's path string is 'one' and a child route's path string is 'two', the child will match when the pathname is 'one/two'.")),r.default.createElement(d.Subsection,{title:"preload",id:"preload"},r.default.createElement("p",null,"A function that will only be called the first time that a route matches. This should only be used for loading resources that are required for the route to display properly. For example, if you are doing code splitting with Webpack using ",r.default.createElement(s.InlineJS,null,"import()"),", you would load the modules in preload."),r.default.createElement("p",null,"The preload function must return a Promise."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const about = {\n  name: 'About',\n  path: 'about',\n  preload: () => {\n    return import('./components/About')\n      .then(module => AsyncStore.register(module.default));\n  }\n};")),r.default.createElement(d.Subsection,{title:"load",id:"load"},r.default.createElement("p",null,"A function that can be used for data fetching as well as for triggering redirects. The load function will be passed the params object that is parsed from the location's pathname (using the route and its ancestor's paths) and the modifiers object that can be used to modify the response object that will be created."),r.default.createElement("p",null,"Like preload, load must return a Promise."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const user = {\n  name: 'User',\n  path: ':id',\n  load: (params, mod) => {\n    return fetch(`/api/users/${params.id}`)\n      .then(resp => JSON.parse(resp))\n      .then(data => mod.setData(data);)\n      .catch(err => {\n        mod.fail(err);\n        mod.setStatus(404);\n      });\n  }\n}"),r.default.createElement("p",null,"What is that modifiers object that gets passed to the load function? It contains a number of functions that you can use to modify the response. These functions are ",r.default.createElement(s.InlineJS,null,"redirect"),", ",r.default.createElement(s.InlineJS,null,"fail"),","," ",r.default.createElement(s.InlineJS,null,"setStatus"),", and ",r.default.createElement(s.InlineJS,null,"setData"),"."),r.default.createElement("ul",null,r.default.createElement("li",null,r.default.createElement(s.InlineJS,null,"redirect(to, code)")," - This allows you to turn the response into a redirect response. When you application receives a redirect response, it should redirect to the new location (using your history object) instead of re-rendering. If you do not provide a code, then 301 will be used. The ",r.default.createElement(s.InlineJS,null,"to")," argument can be whatever you want it to be, you will just need to know how to deal with it in your render function."),r.default.createElement("li",null,r.default.createElement(s.InlineJS,null,"fail(error)")," - A method to call when something goes wrong. This will add an error property to the response."),r.default.createElement("li",null,r.default.createElement(s.InlineJS,null,"setStatus(code)")," - This method will set a new status for the response (the default status is 200 when a route matches and 404 when no routes match)."),r.default.createElement("li",null,r.default.createElement(s.InlineJS,null,"setData(data)")," - The value passed to this method will be set as the response's data property.")))),r.default.createElement("div",null,r.default.createElement("h2",null,"Next"),r.default.createElement("p",null,"Now that you know how to setup your routes, we can get to the good part: actually rendering your application using response objects. Check out the"," ",r.default.createElement(c.Link,{to:"Guide",params:{slug:"responses"}},"Rendering with Responses")," guide to learn how.")))}},70:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(14),c=n(1),d=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,'Response objects are what you use to help render your application. They are essentially just a collection of properties related to which route matched the current location. You can pick and choose which ones you need to use when you are rendering. There is no one "correct" way render with a response, but in this guide we will use the response\'s body property and a render function.'),r.default.createElement(d.Section,{title:"The Properties of a Response Object",id:"properties"},r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  // The location key\n  key: '1.0',\n\n  // The location object used to generate the response.\n  location: { pathname: '/photos/6789/12345', ... },\n\n  // The status code for the response.\n  // This defaults to 200, but can be changed\n  // if no routes match or a route issues a redirect.\n  status: 200,\n\n  // If the route had a load function and called\n  // setData, that value will be set here. If not,\n  // this will be undefined.\n  data: {...},\n\n  // The title string generated by the route\n  // or an empty string if the route has no title property\n  title: 'Photo 12345',\n\n  // The value returned by the route's body function\n  body: Photo,\n\n  // The name of the best matching route\n  name: 'Photo',\n\n  // The name of ancestor routes that matched\n  // part of the location's pathname\n  partials: ['Album'],\n\n  // An object containing the values parsed\n  // from the pathname by path-to-regexp.\n  params: { photoID: 12345, albumID: 6789 },\n\n  // If an error occurs while generating the\n  // response, it will be set here\n  error: undefined\n}"),r.default.createElement(d.Subsection,{title:"Redirect Response",id:"redirect-properties"},r.default.createElement("p",null,"When you redirect, a slightly different response object will be created. You are in charge of actually redirecting, Curi just generates a response that lets you know that you should redirect. You can redirect by using your history object's replace (or push) methods, or if you are using one of the library specific Curi packages, there might be a built-in way for you to redirect (e.g. curi-react provides the"," ",r.default.createElement(s.InlineJS,null,"<Redirect>")," component)."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  // These properties also exist on the redirect response\n  key: '1.0',\n  location: { pathname: '/photos/6789/12345', ... },\n  status: 301,\n  data: {...},\n  title: 'Photo 12345',\n\n  // The redirectTo property provides information on\n  // where you should redirect to\n  redirectTo: { pathname: '/login' }\n}"))),r.default.createElement(d.Section,{title:"The Body Property",id:"body-property"},r.default.createElement("p",null,"The body property of a response is the value returned by the matched route's body property. This value can be anything you want it to be, but it should usually be a function/component. Here, we will assume that each of your routes have body properties that return a function."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// we are assuming all routes are setup like this\n{\n  ...,\n  body: () => function() {...}\n}"),r.default.createElement("p",null,"The response's body function should take other response properties as its arguments. Which ones will vary based on your application, but if you are using path parameters, then the params object should be one of these. If you are doing data loading in your routes (using the load property), then you will probably also want to pass the data property to your body function."),r.default.createElement(u.Note,null,"It is important that each body function has the same argument signature. If you want to play it safe, you can just have each function expect to receive the full response object as an argument."),r.default.createElement("p",null,"As stated above, the body property does not have to be a function. You may want to pass extra data for each route, in which case it might be convenient for the route's body function to return an object. This can be useful if you want to have multiple render functions (where each one would manipulate a different part of your application)."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  name: 'User',\n  body: () => ({\n    main: function User() {...},\n    menu: function UserMenu() {...}\n  })\n}")),r.default.createElement(d.Section,{title:"The Render Function",id:"render-function"},r.default.createElement("p",null,"A render function is simply a function that receives a response object as its argument and manipulates the DOM (or its equivalent for non-browser environments) using the response. In React or Vue, a render function would trigger a re-rendering of your application. In vanilla JavaScript, a render function would manually update the DOM."),r.default.createElement(d.Subsection,{title:"Rendering Redirects",id:"rendering-redirects"},r.default.createElement("p",null,"The first thing you should do in your render function is to check if the response has a"," ",r.default.createElement(s.InlineJS,null,"redirectTo")," property. If it does, then you should redirect to the new location instead of rendering."),r.default.createElement("p",null,"curi-react and curi-vue both provide components that will do this for you, but you can also just use your history object to redirect. You will want to use your history's replace function to redirect."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function render(response) {\n  // assuming that your history object is in scope\n  if (response.redirectTo) {\n    history.replace(response.redirectTo)\n  }\n}")),r.default.createElement(d.Subsection,{title:"Rendering HTML",id:"rendering-HTML"},r.default.createElement("p",null,"Once we have verified that we don't have to redirect, we are ready to render the content using the response. There is still one thing to verify: that our response actually has a body property. If none of your routes match, then the response will not have a body property. You can rememdy this by adding a wildcard route to the end of your routes array, but this is not necessary. You can also just have a default function that will be used when there is no body property."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// use a wildcard route\nconst routes = [\n  // ...,\n  {\n    name: 'Not Found',\n    path: '*'\n  }\n];\n\n// or have a default body function\nfunction render(response) {\n  //...\n  const body = response.body || function defaultBody() {...}\n  body(response.params);\n}"),r.default.createElement("p",null,"Now that we have our body function, we just need to call it. The exact behavior will vary based on how you are rendering your application. For a React application, we would just pass the body function to React's ",r.default.createElement(s.InlineJS,null,"createElement")," function (or use JSX). For vanilla JavaScript, our body function probably returns an HTML string, so we would assign the returned value to the DOM node that holds our application."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// vanilla JavaScript\nconst root = document.getElementById('root');\n\nfunction render(response) {\n  // call the body function to return content\n  root.innerHTML = response.body(response.params, response.data);\n}\n\n// react\nfunction render(response) {\n  // This function should be a property of the <Navigator> and\n  // it should return a React element\n  const Body = response.body || defaultBody;\n  return React.createElement(Body, { params: response.params });\n}"))),r.default.createElement("div",null,r.default.createElement("h2",null,"Next"),r.default.createElement("p",null,"Let's take a moment to go back to our configuration object and look at what Curi's addons are for in the"," ",r.default.createElement(c.Link,{to:"Guide",params:{slug:"addons"}},"Using Addons")," guide.")))}},71:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(1),c=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"Addons in Curi allow you to interact with a registered route using its name. A registered route is generally any route that is in the array of routes that you used to create your configuration object. However, some addons only register routes that meet some criteria."),r.default.createElement("p",null,"Addons are objects with three properties: name, register, and get."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  // the string you will use to call the addon\n  name: 'MyAddon',\n\n  // a function used internally to register routes\n  // with the addon. You only need to use this when\n  // writing your own addons\n  register: function(route, parentData) {...},\n\n  // this is the function that will be added to your\n  // config object's addons property. For example, with\n  // this addon, the get function will be called when\n  // you call config.addons.MyAddon('...')\n  get: function(route) {...}\n}"),r.default.createElement("p",null,"However, when you import them, you are actually importing an addon factory. Curi will create the actual addon while creating your configuration object."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function myAddonFactory() {\n  return { name: ..., register: ..., get: ..., };\n}"),r.default.createElement(c.Section,{title:"Adding addons",id:"adding"},r.default.createElement("p",null,"As stated above, whenever you include addons in your configuration object, you do not pass the actual addon object. Instead, you pass a factory function that will return the addon object. This allows addons to be instanced (multiple configuration objects would each have their own instance of the addon), which can be useful for server-side rendering."),r.default.createElement("p",null,"Addons are provided to the ",r.default.createElement(s.InlineJS,null,"createConfig")," call as an array using the addons property of the options object (the third argument to ",r.default.createElement(s.InlineJS,null,"createConfig"),")."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const config = createConfig(history, routes, {\n  addons: [createMyAddon]\n});"),r.default.createElement("p",null,"The addon will be added to the configuration object's addons property. To call an addon, you simply use its name."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const myValue = config.addons.myAddon('Some Route', ...);")),r.default.createElement(c.Section,{title:"Creating Addons",id:"creating"},r.default.createElement("p",null,"You may find yourself wanting to add a custom addon to your application. There are just a few steps that you should follow in order to write your own addon."),r.default.createElement("p",null,"Remember that you need to export a function that will create the addon object, not the actual addon object."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"export default function myAddonFactory() {\n  ...\n}"),r.default.createElement("p",null,"The function should return an object with three properties: name, register, and get. name is a unique identifier for the addon, register is a function that will be used for your addon to store information about each route, and get is a function that will receive a route's name and perform some task using the related route."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"export default function myAddonFactory() {\n  const knownRoutes = {};\n  return {\n    name: 'MyFirstAddon',\n    register: route => {\n      knownRoutes[route.name] = true;\n    },\n    get: (name) => {\n      return knownRoutes[name] != null\n    }\n  };\n}"),r.default.createElement("p",null,"That is all there is to creating a basic addon. Now, you just need to make sure to pass it to your configuration object and you will be able to call your addon's get function from your configuration object."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"import createConfig from 'curi';\nimport myAddonFactory from './myAddon'\n\nconst routes = [{ name: 'Home', path: '' }];\n\nconst config = createConfig(history, routes, {\n  addons: [myAddonFactory]\n});\n\nconfig.addons.MyFirstAddon('Home'); // true\nconfig.addons.MyFirstAddon('Elsewhere'); // false"),r.default.createElement(c.Subsection,{title:"Slightly more advanced",id:"Slightly-more-advanced"},r.default.createElement("p",null,"You might want to write an addon that uses data from parent routes when registering a route. For example, the built-in pathname addon joins a route's path with it parent path(s)."),r.default.createElement("p",null,"If you want your addon to provide similar functionality, all you have to do is have the register function return the data that should be passed to its child routes. Then, when any children of that route are registered, they will be passed the return value from their parent as the second argument of the register function."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function ParentFactory() {\n  const routeTree = {};\n  return {\n    name: 'routeParent',\n    register: (route, parent) => {\n      // parent is the value returned by the route's parent route\n      // and will be undefined when a route does not have a parent\n      routeTree[route.name] = parent;\n      return route.name;\n    },\n    get: (name) => {\n      return routeTree[name];\n    }\n  }\n}"))),r.default.createElement("div",null,r.default.createElement("h2",null,"Next"),r.default.createElement("p",null,"Next on the list are side effects, which you can learn more about in the"," ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"side-effects"}},"Using Side Effects")," guide.")))}},72:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(1),c=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"Curi side effects are essentially permament subscribers to your configuration object. They can be considered slightly more convenient than subscribers since you don't have to subscribe to your configuration object to set them up. However, you also cannot unsubscribe them."),r.default.createElement("p",null,"Whenever a new response is generated, all of the side effect functions will be called. They will be given two arguments: the new response object and the action that was used to trigger the navigation (POP, PUSH, or REPLACE)."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function logResponse(response) {\n  // call your logging API to record the response\n}"),r.default.createElement(c.Section,{title:"Adding Side Effects",id:"adding"},r.default.createElement("p",null,"You add side effect functions to your configuration object by adding a"," ",r.default.createElement(s.InlineJS,null,"sideEffects")," array to the options object (the third agument) of ",r.default.createElement(s.InlineJS,null,"createConfig"),"."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const config = createConfig(history, routes, {\n  sideEffects: [logResponse]\n});"),r.default.createElement(c.Subsection,{title:"Official Side Effects",id:"official"},r.default.createElement("p",null,'Curi has two "official" side effect packages:'),r.default.createElement("ul",null,r.default.createElement("li",null,r.default.createElement(u.Link,{to:"Package",params:{package:"curi-side-effect-title"}},"curi-side-effect-title")),r.default.createElement("li",null,r.default.createElement(u.Link,{to:"Package",params:{package:"curi-side-effect-scroll"}},"curi-side-effect-scroll"))))),r.default.createElement(c.Section,{title:"Creating Side Effects",id:"creating"},r.default.createElement("p",null,"Side effects are just simple functions that receive a response object and an action string and do something with them. One thing that they should not do, however, is to modify the response."),r.default.createElement("p",null,"Below is a side effect function that sets a modified property on the object."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function mySideEffect(response, action) {\n  console.log('Navigating to', response.location);\n}\n\nconst config = createConfig(history, routes, {\n  sideEffects: [mySideEffect]\n});"),r.default.createElement("p",null,"You can write a side effect factory if you need to create a more customizable side effect."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function AnalyticsLogger(options) {\n  // do some setup with the provided options\n  const logger = setupMyLogger(options);\n\n  // and return the actual side effect function\n  return sideEffect(response, action) {\n    logger(response);\n  }\n}"),r.default.createElement("p",null,"That really is all there is required to know in order to write your own side effects. You may want to review the ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"responses"}},"response")," properties to know which properties you should expect a response to have, but other than that they are pretty simple.")),r.default.createElement("div",null,r.default.createElement("h2",null,"Next"),r.default.createElement("p",null,r.default.createElement(s.InlineJS,null,"createConfig"),"'s options object has three arguments. We have covered the first two, so finally we will cover the cache option in the"," ",r.default.createElement(u.Link,{to:"Guide",params:{slug:"response-caching"}},"response caching")," guide.")))}},73:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13);n(1),n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"The cache option passed to ",r.default.createElement(s.InlineJS,null,"createConfig")," allows you to save response objects. The actual caching mechanism is left up to you. It only has two requirements:"),r.default.createElement("ul",null,r.default.createElement("li",null,"It provides a set function which receives a response object as its argument."),r.default.createElement("li",null,"It provides a get function which receives a location object as its argument and returns a response object associated with the location (if one exists)")),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const createSimpleCache = () => {\n  const cache = {};\n\n  return {\n    get: location => {\n      const { key } = location;\n      return cache[key];\n    },\n    set: response => {\n      const { key } = response.location;\n      cache[key] = response;\n    }\n  };\n}\n\nconst myCache = createSimpleCache();\n\nconst config = createConfig(history, routes, {\n  cache: myCache\n});"),r.default.createElement("p",null,"The above cache uses a location's key property to store values."),r.default.createElement("p",null,"So why would you want to use a cache? When the user uses the browser's forward/back buttons, Curi will generate a new response. This means that if the route has a load function, it will be re-called. You can mitigate this by adding a cache to your load function, but you may also find it preferable to just re-use the existing response."),r.default.createElement("p",null,"This isn't built-in because it is possible that you don't actually want responses to be re-used. If you are caching responses, you will need to be aware of what to do when an authenticated user logs out. You will probably want to clear the cache so that they aren't still seeing content as if they were logged in."))}},74:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(14),c=n(1),d=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"If you are bundling an application with a lot of routes, users of your application may be downloading a lot of unnecessary content just to render the initial page. Using code splitting, you can reduce the initial download size for your application by splitting code that is conditionally loaded into a separate bundle that is only downloaded when it is needed."),r.default.createElement(u.Note,null,"This guide assumes that you are using Webpack 2+ to bundle your application."),r.default.createElement(d.Section,{title:"An app without code splitting",id:"no-split"},r.default.createElement("p",null,"Let's start out by describing our application's routes without code splitting. We will import each route's component from the files where they are defined."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"import Home from './components/Home';\nimport Contact from './components/Contact';\nimport ContactMethod from './components/ContactMethod';\n\nconst routes = [\n  {\n    name: 'Home',\n    path: '',\n    body: () => Home\n  },\n  {\n    name: 'Contact',\n    path: 'contact',\n    body: () => Contact,\n    children: [\n      {\n        name: 'Contact Method',\n        path: ':method',\n        body: () => ContactMethod\n      }\n    ]\n  }\n];")),r.default.createElement(d.Section,{title:"Removing static imports",id:"no-static-imports"},r.default.createElement("p",null,"With code splitting, we don't want to have access to the component values when creating our routes because that means we have to download all of them before our application can render. We should remove our import calls so that that doesn't happen."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const routes = [\n  {\n    name: 'Home',\n    path: '',\n    body: () => Home\n  },\n  {\n    name: 'Contact',\n    path: 'contact',\n    body: () => Contact,\n    children: [\n      {\n        name: 'Contact Method',\n        path: ':method',\n        body: () => ContactMethod\n      }\n    ]\n  }\n];")),r.default.createElement(d.Section,{title:"Importing in preload",id:"preload"},r.default.createElement("p",null,"Now, ",r.default.createElement(s.InlineJS,null,"Home"),", ",r.default.createElement(s.InlineJS,null,"Contact"),", and"," ",r.default.createElement(s.InlineJS,null,"ContactMethod")," are all undefined, so if we tried to render our application we would get errors. We need to actually import our components so that our body functions actually have something to return."),r.default.createElement("p",null,"We will import our components using the preload property of routes. This function will only be called the first time that its route matches, so we don't have to worry about making extra requests to our server."),r.default.createElement("p",null,r.default.createElement(s.InlineJS,null,"preload")," should be a function that returns a Promise. Here, we will call",r.default.createElement(s.InlineJS,null,"import()"),", which conveniently returns a Promise."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const routes = [\n  {\n    name: 'Home',\n    path: '',\n    preload: () => import('./components/Home'),\n    body: () => Home\n  },\n  {\n    name: 'Contact',\n    path: 'contact',\n    preload: () => import('./components/Contact'),\n    body: () => Contact,\n    children: [\n      {\n        name: 'Contact Method',\n        path: ':method',\n        preload: () => import('./components/ContactMethod'),\n        body: () => ContactMethod\n      }\n    ]\n  }\n];")),r.default.createElement(d.Section,{title:"Saving our imports",id:"saving"},r.default.createElement("p",null,"That will load our components when their route matches, but we still don't have access to the component functions that we need in order to render. We will need to use a"," ",r.default.createElement(s.InlineJS,null,"then")," call to our ",r.default.createElement(s.InlineJS,null,"import()")," Promises in order to access the component functions."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"let Home;\nlet Contact;\nlet ContactMethod;\n\nconst routes = [\n  {\n    name: 'Home',\n    path: '',\n    preload: () => (\n      import('./components/Home').then(module => {\n        Home = module.default;\n      })\n    ),\n    body: () => Home\n  },\n  {\n    name: 'Contact',\n    path: 'contact',\n    preload: () => (\n      import('./components/Contact').then(module => {\n        Contact = module.default;\n      })\n    ),\n    body: () => Contact,\n    children: [\n      {\n        name: 'Contact Method',\n        path: ':method',\n        preload: () => (\n          import('./components/ContactMethod').then(module => {\n            ContactMethod = module.default;\n          })\n        ),\n        body: () => ContactMethod\n      }\n    ]\n  }\n];")),r.default.createElement(d.Section,{title:"Storing our imports",id:"storing"},r.default.createElement("p",null,'Our application will now only load components when they are needed and will correctly render. However, it is a bit ugly and error prone to define variables for all of our routes. Instead we can create a "store" where we can store references to each route\'s component. The simplest store is an object, so we will start with that.'),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const store = {}\n\nconst routes = [\n  {\n    name: 'Home',\n    path: '',\n    preload: () => (\n      import('./components/Home').then(module => {\n        store['Home'] = module.default;\n      })\n    ),\n    body: () => store['Home']\n  },\n  {\n    name: 'Contact',\n    path: 'contact',\n    preload: () => (\n      import('./components/Contact').then(module => {\n        store['Contact'] = module.default;\n      })\n    ),\n    body: () => store['Contact'],\n    children: [\n      {\n        name: 'Contact Method',\n        path: ':method',\n        preload: () => (\n          import('./components/ContactMethod').then(module => {\n            store['ContactMethod'] = module.default;\n          })\n        ),\n        body: () => store['ContactMethod']\n      }\n    ]\n  }\n];"),r.default.createElement(d.Subsection,{title:"A better store",id:"better-store"},r.default.createElement("p",null,"That should be sufficient, although it is not an error proof approach. Our preload functions currently do nothing when there are errors in importing the components. What you do when that happens is up to you, but you would most likely want to have a default component that you display when the error occurs."),r.default.createElement(s.PrismBlock,{lang:"jsx"},"const defaultComponent = () => <div>Uh oh, something must have gone wrong</div>;\nconst store = {\n  stored: {},\n  set: function(name, value) {\n    this.stored[name] = value;\n  },\n  get: function(name) {\n    return this.stored[name] || defaultComponent;\n  }\n}\n\n// usage\n{\n  ...,\n  preload: () => (\n    import('./components/Something')\n      .then(module => {\n        store.set('Something', module.default);\n      })\n      .catch(err => {\n        console.error(err);\n        store.set('Something', defaultComponent);\n      })\n  ),\n  body: () => store.get('Something')\n}"))),r.default.createElement(d.Section,{title:"Next",id:"next"},r.default.createElement("p",null,"The approaches taken here are not the only way to do code splitting. You may choose to skip the preload method and do code splitting at other points in your application. You may also create a more full-fledged solution for storing loaded imports. Whatever path you decide to go, hopefully this has shown you that setting up code splitting with the preload property is fairly simple to do. If you are using Webpack and want to reduce your initial bundle size, preload is a great way to accomplish this."),r.default.createElement("p",null,"Next, we will take a look at a related route property:"," ",r.default.createElement(c.Link,{to:"Guide",params:{slug:"load"}},"load"),".")))}},75:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(14),c=n(1);n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement("p",null,"In the code splitting guide, we used the preload property of routes. Routes also have a load property. The biggest difference between the two is that load is called every time a route matches, whereas preload is only called the first time a route matches."),r.default.createElement("p",null,"load is where you should perform any data loading for the route. We'll start a new application here, which is a basic recipe site. We want to have a route for a recipe list page as well as a route for specific recipes."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const routes = [\n  {\n    name: 'Recipe List',\n    path: 'recipes',\n    body: () => RecipeList\n  },\n  {\n    name: 'Recipe',\n    path: 'recipe/:id',\n    body: () => Recipe\n  }\n];"),r.default.createElement("p",null,"Whenever the Recipe List route matches, we want to fetch a list of recipes from the server. When the Recipe route matches, we just want one specific recipe (using the id param from the path)."),r.default.createElement("p",null,"The load function will be passed two arguments: the params object that contains variables parsed from the location's pathname and a modifiers object. The modifiers object has a few methods that you can call in order to modify the response object that will be generated. They are fail, setStatus, setData and redirect. They are explained in more detail in the"," ",r.default.createElement(c.Link,{to:"Guide",params:{slug:"routes"},details:{hash:"load"}},"all about routes")," ","guide. Here, we will use the last two: setData and redirect."),r.default.createElement("p",null,"First we will add a load function to our Recipe route. This function will make a request to our (fake) API. Then, we will call response.setData to attach our loaded data to the response."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  name: 'Recipe',\n  path: 'recipe/:id',\n  body: () => Recipe,\n  load: (params, modifiers) => {\n    return fakeAPI.getRecipe(params.id)\n      .then(data => {\n        modifiers.setData(data);\n      });\n  }\n}"),r.default.createElement("p",null,"Now, when we navigate to /recipe/chocolate-chip-cookies, our load function will call the fake API function to load the recipe and set the loaded data for the response. That means that the data we load will be available on the generated response object as response.data."),r.default.createElement("p",null,"One possible downside to the implementation of load above is that we will be making requests to our API every time the route loads. To prevent this, you might want to add a data cache to your application. Using this, you can store the results of previous requests and use that for subsequent requests instead of having to request the data from the server again."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  name: 'Recipe List',\n  path: 'recipes',\n  body: () => RecipeList,\n  load: () => {\n    if (cache.has('recipes')) {\n      return Promise.resolve(cache.get('recipes'));\n    }\n\n    return fakeAPI.getRecipes()\n      .then(data => {\n        cache.set('recipes', data);\n        return data;\n      });\n  }\n}"),r.default.createElement("p",null,"If at some point in time we decide that we want to change our URI pathname structure, we can also use the load function to redirect."),r.default.createElement("p",null,"By calling the modifier's redirect method, you can specify the URI that we should redirect to."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  name: 'Old Recipe',\n  path: 'r/:id',\n  load: (params, modifiers) => {\n    modifiers.redirectTo(`/recipe/${params.id}`);\n  }\n}"),r.default.createElement(u.Note,null,'This does not actually perform a redirect. Instead, it will make it so that the emitted response is a "redirect" response, with a redirectTo property you can use to redirect manually. Below is an example of a render function (passed to a'," ",r.default.createElement(s.InlineJS,null,"<Navigator>"),") that renders a ",r.default.createElement(s.InlineJS,null,"<Redirect>")," ","when the response contains a redirectTo value."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function renderFunction(response) {\n  if (response.redirectTo) {\n    return <Redirect to={response.redirectTo} />\n  }\n  // ...\n}"),r.default.createElement("p",null,"load is a great place to do any route setup prior to actually rendering the route. Please remember, however, that your application will not be re-rendering until after the load function has resolved. If you have a long running load function, you may wish to implement some sort of loading display. The prefetching data example shows one approach to how to do this."))}},76:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),l=n(63),i=a(l),s=n(13),u=n(14),c=n(1),d=n(59);t.default=function(e){var t=e.name;return r.default.createElement(i.default,null,r.default.createElement("h1",null,t),r.default.createElement(u.Note,null,"This guide assumes that you are already familiar with React."),r.default.createElement("p",null,"Curi provides a number of React components. Each one is individually packaged, but they are all also grouped in the"," ",r.default.createElement(s.InlineJS,null,"@curi/react")," package."),r.default.createElement(u.Note,null,"Should you choose to install the individual packages or just @curi/react? The react package is convenient, but the unfortunate side-effect of using"," ",r.default.createElement(s.InlineJS,null,"React.Component")," is that components cannot be tree-shaken. If you are looking to minimize your bundle size, you should import directly from the relevant package instead of from @curi/react (",r.default.createElement(s.InlineJS,null,"import Link from '@curi/react-link';")," instead of"," ",r.default.createElement(s.InlineJS,null,"import ",c.Link," from '@curi/react';"),")."),r.default.createElement("p",null,"To get started, there are only two components that you need to be aware of: ",r.default.createElement(s.InlineJS,null,"<Navigator>")," and ",r.default.createElement(s.InlineJS,null,"<Link>"),"."),r.default.createElement(d.Section,{title:"The Navigator",id:"navigator"},r.default.createElement(s.PrismBlock,{lang:"bash"},"npm install @curi/react-navigator"),r.default.createElement("p",null,"The ",r.default.createElement(c.Link,{to:"Package",params:{package:"react-navigator"}},"Navigator")," ","component is responsible for re-rendering your application whenever the location changes. To do this, you pass it a Curi configuration object. When the Navigator is mounted, it will subscribe to your configuration object with a function that will trigger the Navigator to re-render whenever the location changes."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"import Navigator from '@curi/react-navigator';\n\nconst config = createConfig(history, routes);\nReactDOM.render((\n  <Navigator config={config} ... />\n), holder);"),r.default.createElement("p",null,"In addition to the configuration object, the Navigator also takes a"," ",r.default.createElement(s.InlineJS,null,"render")," prop. That is a function that returns the React elements that make up your application. The render function will receive two arguments:"," ",r.default.createElement(s.InlineJS,null,"response")," and ",r.default.createElement(s.InlineJS,null,"config"),". Response is a response object and config is your configuration object (which can be useful to have access to, but you may also never have a reason to use it)."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"const config = createConfig(history, routes);\n\nfunction render(response, config) {\n  // return a React element (or null)\n}\n\nReactDOM.render((\n  <Navigator config={config} render={render} />\n), holder);"),r.default.createElement("p",null,"You ",r.default.createElement("em",null,"can")," define your render function inline, but typically it is easier to define the function in its own module and import it wherever you are rendering your Navigator. Inlining would also mean that the function gets recreated every time that the Navigator is re-rendered by its parent, which is not ideal."),r.default.createElement("p",null,"The primary property of the response object that you will find useful is"," ",r.default.createElement(s.InlineJS,null,"body"),". The body property is the value returned by the matched route's body function. Since this is a React guide, this value should be a React component that will render the contents of the page for a specific route. For example, a Home component might render the contents of your homepage while an About component might render a page describing your application."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"import Home from './components/Home';\nimport About from './components/About';\n\nconst routes = [\n  {\n    name: 'Home',\n    path: '',\n    body: () => Home\n  },\n  {\n    name: 'About',\n    path: 'about',\n    body: () => About\n  }\n]"),r.default.createElement("p",null,"When the body property of a response is ",r.default.createElement(s.InlineJS,null,"undefined"),", that means that none of your routes matched the new location and you should render some sort of 404/page not found component. You may also want to add a catch all route (one whose path is ",r.default.createElement(s.InlineJS,null,"*"),") so that you can expect to always have a body property on the response."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function render(response) {\n  const { body:Body } = response;\n  return <Body />;\n}"),r.default.createElement(u.Note,null,'We rename "body" to "Body" so that the JSX is'," ",r.default.createElement("a",{href:"https://facebook.github.io/react/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized"},"transformed properly"),"."),r.default.createElement("p",null,"You can review all of the response properties in the"," ",r.default.createElement(c.Link,{to:"Guide",params:{slug:"responses"},details:{hash:"properties"}},"Rendering with Responses")," guide. The other ones that you will most likely be interested in are",r.default.createElement(s.InlineJS,null,"params")," and ",r.default.createElement(s.InlineJS,null,"data"),"."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"function render(response) {\n  const { body:Body, params, data } = response;\n  return <Body params={params} data={data} />;\n}"),r.default.createElement(u.Note,null,"This does not cover all of the Link props. Please check out the"," ",r.default.createElement(c.Link,{to:"Package",params:{package:"react-navigator"}},"Navigator")," API docs to learn more about the other props.")),r.default.createElement(d.Section,{title:"The Link",id:"link"},r.default.createElement(s.PrismBlock,{lang:"bash"},"npm install @curi/react-link"),r.default.createElement("p",null,"A single page application isn't very useful if you cannot navigate between locations. The ",r.default.createElement(c.Link,{to:"Package",params:{package:"react-link"}},"Link")," component provides you with an easy way to do this by rendering anchor (",r.default.createElement(s.InlineJS,null,"<a>"),") elements."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"import Link from '@curi/react-link'\n<Link to='Home'>Home</Link>"),r.default.createElement("p",null,"The most important prop of the Link is ",r.default.createElement(s.InlineJS,null,"to"),". This value should be the name of the route that you want to navigate to. For instance, take about following route:"),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  name: 'About',\n  path: 'about',\n  ...\n}\n"),r.default.createElement("p",null,'If you were to render a Link whose to property is "About", then it would render an anchor whose ',r.default.createElement(s.InlineJS,null,"href")," attribute is ",r.default.createElement(s.InlineJS,null,"/about"),". The great thing about this is that you don't have to know the URI of the route that you want to navigate to, only its name. Curi (using the built-in ",r.default.createElement(s.InlineJS,null,"pathname")," addon), handles creating URI pathnames for you."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"<Link to='About'>About</Link>\n// <a href=\"/about\">About</a>"),r.default.createElement("p",null,"That works well enough for simple paths, but what about paths that include params? For that, you need to pass an object using the ",r.default.createElement(s.InlineJS,null,"params")," property. This object's keys should be the same as the route's expected params. The params object should also include the params for any parent routes."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"{\n  name: 'Album',\n  path: 'a/:albumID',\n  ...,\n  children: [\n    {\n      name: 'Song',\n      path: ':songID',\n      ...\n    }\n  ]\n}\n\n<Link to='Song' params={{ albumID: 2390, songID: 7 }}>Some Song on Some Album</Link>\n// <a href=\"/a/2390/7>Some Song on Some Album</a>"),r.default.createElement("p",null,"If you want to attach additional location information to a Link, you can do so using the ",r.default.createElement(s.InlineJS,null,"details")," prop. This is an object that has any other location properties that you want to link to. These would be ",r.default.createElement(s.InlineJS,null,"query"),", ",r.default.createElement(s.InlineJS,null,"hash"),", and ",r.default.createElement(s.InlineJS,null,"state"),"."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"<Link\n  to='Song'\n  params={{ albumID: 2390, songID: 8 }}\n  details={{ query: { time: 17 } }}\n>\n  Some Song on Some Album\n</Link>\n// <a href=\"/a/2390/8?time=17>Some Song on Some Album</a>"),r.default.createElement("p",null,"The ",r.default.createElement(s.InlineJS,null,"children")," prop has been used, but not mentioned. The contents of the children prop will simply be passed as the children of the anchor, the same as if you were to use a regular anchor. Using a regular anchor would not work here, though. You could hand code the URI to link to, which is half of what the Link does, but clicking the anchor would cause a full page reload. The Link uses calls the ",r.default.createElement(s.InlineJS,null,"update")," method from your Hickory history object to allow for in-app navigation without reloading the page."),r.default.createElement(s.PrismBlock,{lang:"javascript"},"// if you render this, clicking it will reload the page\n<a href=\"/about\">About</a>\n\n// while rendering this will not cause a reload\n<Link to='About'>About</Link>\n"),r.default.createElement("p",null,'Both of the above elements render the same thing to the page, an anchor element, but the "magic" is the Link\'s usage of your history object.'),r.default.createElement(u.Note,null,"This does not cover all of the Link props. Please check out the"," ",r.default.createElement(c.Link,{to:"Package",params:{package:"react-link"}},"Link")," API docs to learn more about the other props.")))}}});