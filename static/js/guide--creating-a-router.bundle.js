(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{104:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return l.default.createElement(l.default.Fragment,null,l.default.createElement(o.Section,{title:"The Router",id:"router-object"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The router is the controller of the single-page application. A router is created using a ",l.default.createElement(r.InlineJS,null,"history")," object and a"," ",l.default.createElement(r.InlineJS,null,"routes")," array.")),l.default.createElement(i.CodeBlock,null,"import { curi } from '@curi/router';\n\nconst history = Browser();\nconst routes = [...];\nconst router = curi(history, routes);")),l.default.createElement(o.Section,{title:"History",id:"history-object"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"history")," object manages navigation between locations within an application."),l.default.createElement("p",null,"There are three types of ",l.default.createElement(r.InlineJS,null,"history")," to choose from; which one you use depends on where your application is running.")),l.default.createElement("ol",null,l.default.createElement("li",null,l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"browser")," history is used for applications running in a browser."),l.default.createElement("p",null,"If you use the ",l.default.createElement(r.InlineJS,null,"browser")," history, your application should be hosted on a server that can handle dynamic requests. This either means a server with real time route matching (like an Express server) or through configuration where a fallback page is served when the request doesn't map to a real file on the server."),l.default.createElement("p",null,"You can use"," ",l.default.createElement(a.Link,{to:"Package",params:{package:"static"}},l.default.createElement(r.InlineJS,null,"@curi/static"))," ","to generate static HTML pages for a ",l.default.createElement(r.InlineJS,null,"browser")," history powered application.")),l.default.createElement(i.CodeBlock,null,'import Browser from "@hickory/browser";\nconst browserHistory = Browser();')),l.default.createElement("li",null,l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"hash")," history is a fallback history for applications running in a browser."),l.default.createElement("p",null,"A ",l.default.createElement(r.InlineJS,null,"hash")," history should only be used if you cannot configure the server to respond to requests that don't match files on the server. Most static file hosts are configurable, so you probably don't need to use this.")),l.default.createElement(i.CodeBlock,null,'import Hash from "@hickory/hash";\nconst hashHistory = Hash();')),l.default.createElement("li",null,l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"in-memory")," history is used for applications not running in a browser. For example, the ",l.default.createElement(r.InlineJS,null,"in-memory")," ","history is used on the server, in a React Native app, and during testing.")),l.default.createElement(i.CodeBlock,null,'import InMemory from "@hickory/in-memory";\nconst inMemoryHistory = InMemory();'))),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"If you are not familiar with how single-page applications interact with a server, this article should help:"," ",l.default.createElement("a",{href:"https://medium.com/@pshrmn/single-page-applications-and-the-server-32a23d67936"},"Single-Page Applications and the Server"),".")),l.default.createElement(o.Subsection,{title:"Locations",id:"locations"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"history")," object will map URLs into location objects. Only the ",l.default.createElement(r.InlineJS,null,"pathname"),", ",l.default.createElement(r.InlineJS,null,"query")," (search), and"," ",l.default.createElement(r.InlineJS,null,"hash")," segments are used; locations ignore the domain and protocol segments of a URL."),l.default.createElement("p",null,"When matching loactions to routes, only the ",l.default.createElement(r.InlineJS,null,"pathname")," is used.")),l.default.createElement(i.CodeBlock,null,'// https://www.example.com/page?key=value#trending\nlocation = {\n  pathname: "/page",\n  query: "key=value"\n  hash: "trending"\n}'),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"query")," value of a location is a string by default, but the history object can be configured to automatically parse it into an object."),l.default.createElement("p",null,"You can choose whichever query parsing/stringifying package you prefer. Some of the most popular are"," ",l.default.createElement("a",{href:"http://npmjs.com/package/qs"},l.default.createElement(r.InlineJS,null,"qs")),","," ",l.default.createElement("a",{href:"http://npmjs.com/package/query-string"},l.default.createElement(r.InlineJS,null,"query-string")),", and"," ",l.default.createElement("a",{href:"https://www.npmjs.com/package/querystring"},l.default.createElement(r.InlineJS,null,"querystring")),".")),l.default.createElement(i.CodeBlock,null,'import { parse, stringify } from "qs";\nimport Browser from "@hickory/browser";\n\nconst history = Browser({\n  query: { parse, stringify }\n});\n  \n// https://www.example.com/page?key=value#trending\nlocation = {\n  pathname: "/page",\n  query: { key: "value" }\n  hash: "trending"\n}')),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"For more details on the history objects and their APIs, please check out the"," ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory/tree/master/docs"},"Hickory documentation"),"."))),l.default.createElement(o.Section,{title:"Routes",id:"routes-array"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(r.InlineJS,null,"routes")," array defines the valid locations within an application. When the router receives a new location, it matches it against the routes to generate a response."),l.default.createElement("p",null,"Each route is an object that has a unique ",l.default.createElement(r.InlineJS,null,"name")," and a"," ",l.default.createElement(r.InlineJS,null,"path")," string, which defines what locations the route matches."),l.default.createElement(u.Note,null,l.default.createElement(r.InlineJS,null,"path")," strings do not start with a slash."),l.default.createElement("p",null,"Routes can be nested. A child route's ",l.default.createElement(r.InlineJS,null,"path")," will build on the paths from any ancestor routes."),l.default.createElement("p",null,'You will almost always want to include a "catch all" route to match any "invalid" locations and render a 404 page. The path'," ",l.default.createElement(r.InlineJS,null,'"(.*)"')," matches every location. During development, Curi will log a warning in the console to let you know if you forgot to include a catch all route.")),l.default.createElement(i.CodeBlock,null,'const routes = [\n  {\n    name: "Home",\n    path: ""\n  },\n  {\n    name: "Album",\n    path: "photos/:albumID",\n    children: [\n      {\n        name: "Photo",\n        // matches /photos/6789/12345 with params\n        // { albumID: "6789", photoID: "12345" }\n        path: ":photoID"\n      }\n    ]\n  },\n  {\n    name: "Not Found",\n    path: "(.*)"\n  }\n];'),l.default.createElement(o.Subsection,{title:"Route names",id:"route-names"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Why do routes have names? Curi lets you interact with routes using their names."),l.default.createElement("p",null,"For example, Curi provides a ",l.default.createElement(r.InlineJS,null,"pathname")," route interaction to generate the ",l.default.createElement(r.InlineJS,null,"pathname")," of a location to navigate to. Instead of manually writing ",l.default.createElement(r.InlineJS,null,"pathname")," strings, you tell Curi the name of the route that you want to navigate to (and also any required params) and Curi will create the ",l.default.createElement(r.InlineJS,null,"pathname")," ","for you.")),l.default.createElement(i.CodeBlock,null,'const pathname = router.route.pathname(\n  "Photo",\n  {\n    albumID: "abcd",\n    photoId: "98765"\n  }\n);\n// pathname = "/photos/abcd/98765"'))),l.default.createElement(o.Section,{title:"Navigation",id:"navigation"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"When navigation occurs, the router receives the new location from its ",l.default.createElement(r.InlineJS,null,"history")," object. This either happens from in-app navigation (e.g. clicking a link) or platform navigation (e.g. clicking the back button or typing URL in the address bar and hitting enter)."),l.default.createElement("p",null,"The router has a ",l.default.createElement(r.InlineJS,null,"navigate()")," method to let you navigate with code. The function takes the ",l.default.createElement(r.InlineJS,null,"name")," of the route you want to navigate to and any route ",l.default.createElement(r.InlineJS,null,"params"),". The navigation"," ",l.default.createElement(r.InlineJS,null,"method")," controls how the history changes locations, with the default behavior acting like clicking a link.")),l.default.createElement(i.CodeBlock,null,'router.navigate({\n  name: "Photo",\n  params: { albumID: 1357, photoID: 02468 },\n  hash: "comments"\n});\n// /photos/1357/02468#comments\n\nrouter.navigate({\n  name: "Login",\n  state: { next: location.pathname },\n  // replace the current location with the Login location\n  // "REPLACE" is ideal for redirects\n  method: "REPLACE"\n});')),l.default.createElement(o.Section,{title:"Response Handlers",id:"response-handlers"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"When the router has created a response, it emits it to any response handlers. There are three types of response handlers: observers, one time functions, and side effects."),l.default.createElement("p",null,"Side effects are passed to the router when you are creating it. You can read more about them in the"," ",l.default.createElement(a.Link,{to:"Guide",params:{slug:"side-effects"}},"side effects guide"),"."),l.default.createElement("p",null,"One time functions are passed to the router using"," ",l.default.createElement(r.InlineJS,null,"router.once()"),". These are response handlers that will only be called one time. If a response already exists, then the response handler will be called immediately (unless configured not to). Otherwise, the one time response handler will be called after the next response is emitted."),l.default.createElement("p",null,"Observers are passed to the router using ",l.default.createElement(r.InlineJS,null,"router.observe()"),". Unlike one time functions, these will be called for every response emitted by the router (until you tell the router to stop calling it). You most likely will not need to call this yourself. The different framework implementations (",l.default.createElement(r.InlineJS,null,"@curi/react-dom"),","," ",l.default.createElement(r.InlineJS,null,"@curi/react-native"),", ",l.default.createElement(r.InlineJS,null,"@curi/vue"),", and"," ",l.default.createElement(r.InlineJS,null,"@curi/svelte"),") setup observers for you.")),l.default.createElement(i.CodeBlock,null,"const router = curi(history, routes);\n\nconst stop = router.observe(({ response }) => {\n  console.log('new response!', response);\n});\n// ...\nstop();\n// no longer observing"),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"If you have any asynchronous routes (routes with ",l.default.createElement(r.InlineJS,null,"resolve")," ","functions), ",l.default.createElement(r.InlineJS,null,"router.once()")," should be used to delay the initial render until after the initial response is ready.")),l.default.createElement(i.CodeBlock,null,"// wait for initial response to be ready\nrouter.once(() => {\n  // safe to render async routes now\n});")),l.default.createElement(o.Section,{title:"Rendering",id:"rendering"},l.default.createElement(i.Explanation,null,l.default.createElement("p",null,"Rendering is left to whatever rendering library you are using. The way that Curi interfaces with each of them varies, but they all use observers to be notified when there is a new response.")),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,l.default.createElement(r.InlineJS,null,"@curi/react-dom")," uses a ",l.default.createElement(r.InlineComponent,null,"Router")," with a render-invoked ",l.default.createElement(r.InlineJS,null,"children")," function that will be called whenever there is a new response."),l.default.createElement("p",null,"In React applications, ",l.default.createElement(r.InlineJS,null,"response.body")," should be a React component, so rendering the application means creating an element from ",l.default.createElement(r.InlineJS,null,"response.body"),"."),l.default.createElement("p",null,"The"," ",l.default.createElement(a.Link,{to:"Tutorial",params:{slug:"react-basics"}},"React Basics Tutorial")," ","gets into more detail about how this works.")),l.default.createElement(i.CodeBlock,null,"// React\nconst Router = curiProvider(router);\n\nReactDOM.render((\n  <Router>\n    {({ response }) => {\n      const { body:Body } = response;\n      return <Body />;\n    }}\n  </Router>\n), document.getElementById('root'));"),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,l.default.createElement(r.InlineJS,null,"@curi/vue")," sets up reactive objects that update when there is a new response. ",l.default.createElement(r.InlineComponent,null,"component :is")," can be used to render the ",l.default.createElement(r.InlineJS,null,"body")," component."),l.default.createElement("p",null,"The"," ",l.default.createElement(a.Link,{to:"Tutorial",params:{slug:"react-basics"}},"Vue Basics Tutorial")," ","details how to use Vue and Curi.")),l.default.createElement(i.CodeBlock,null,"// Vue\nVue.use(CuriPlugin, { router });\nnew Vue({\n  el: '#app',\n  template: '<app />',\n  components: { app }\n});"),l.default.createElement(i.Explanation,null,l.default.createElement("p",null,l.default.createElement(r.InlineJS,null,"@curi/svelte")," uses the Svelte store and"," ",l.default.createElement(r.InlineComponent,null,"svelte:component")," to render.")),l.default.createElement(i.CodeBlock,null,"// Svelte\nconst store = curiStore(router);\nnew app({ target, store });")))};var l=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(1),r=n(6),o=n(10),u=n(11),i=n(7)}}]);