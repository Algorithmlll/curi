(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{107:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return a.default.createElement(a.default.Fragment,null,a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Navigation and observation are closely linked. Navigation is used to change locations, while observation is used to detect navigation changes and react (e.g. re-render the application).")),a.default.createElement(i.Section,{title:"Navigation",id:"navigation"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"When you create a router, you pass it a history object. That history object is responsible for tracking all navigation within your application. Navigation can be triggered a variety of ways."),a.default.createElement("p",null,'The first type is "external" navigation, meaning it comes from outside of the application. For a website, this would be navigating by entering a URL in the address bar or by pressing the browser\'s forward/back buttons.'),a.default.createElement("p",null,'The second type of navigation is "internal", where you use code to navigate to a new location. This is predominantly done by clicking links.'),a.default.createElement("p",null,"This guide is only going to discuss how to perform internal navigation, since that is the only type that you need to perform with code.")),a.default.createElement(s.CodeBlock,null,'import Browser from "@hickory/browser";\nimport { curi } from "@curi/router";\n\nimport routes from "./routes";\n\n// this history object is responsible for\n// tracking navigation\nconst history = Browser();\n\nconst router = curi(history, routes);'),a.default.createElement(i.Subsection,{title:"Navigation With History",id:"with-history"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Locations are stored in what is essentially an array (this varies by history type). An index is used to keep track of which location in the array is the current location."),a.default.createElement(r.Note,null,"With the browser and hash histories, you cannot actually access the array of locations/index. Browsers do not expose this because accessing this data could cause security issues.")),a.default.createElement(s.CodeBlock,null,'// array of locations\n[\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" }\n]\n// index = 2, current location = { pathname: "/three" }'),a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"There are three ways to change locations: popping, pushing, and replacing and two methods for making these changes:"," ",a.default.createElement(o.InlineJS,null,"history.go()")," and ",a.default.createElement(o.InlineJS,null,"history.navigate()"),".")),a.default.createElement(i.Subsection,{tag:"h4",title:"Pop",id:"navigation-pop"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Popping means that you change the index to another (valid) index in the array. Popping is performed by specifying how many locations forward (positive numbers) or backward (negative numbers) you want to go. When you click a browser's back button, that is essentially popping by negative one."),a.default.createElement("p",null,"The history object's ",a.default.createElement(o.InlineJS,null,"go()")," function is used for popping between locations.")),a.default.createElement(s.CodeBlock,{"data-line":"9,16"},'locations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" }\n]\nindex = 2\n// current location = { pathname: "/three" }\n\nhistory.go(-2)\n\nlocations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" }\n]\nindex = 0\n// current location = { pathname: "/one" }')),a.default.createElement(i.Subsection,{tag:"h4",title:"Push",id:"navigation-push"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Pushing adds a new location after the current location in the array. Pushing is destructive because if there were any locations after the current location, they are lost when you push a new location."),a.default.createElement("p",null,"The history object's ",a.default.createElement(o.InlineJS,null,"navigate()")," method is used for pushing new locations. In order to ensure that a location is pushed, the ",a.default.createElement(o.InlineJS,null,'"PUSH"')," argument should be passed to the method call.")),a.default.createElement(s.CodeBlock,{"data-line":"9,13,15"},'locations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" }\n]\nindex = 0\n// current location = { pathname: "/one" }\n\nhistory.navigate("/four", "PUSH")\n\nlocations = [\n  { pathname: "/one" },\n  { pathname: "/four" }\n]\nindex = 1\n// current location = { pathname: "/four" }')),a.default.createElement(i.Subsection,{tag:"h4",title:"Replace",id:"navigation-replace"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Replacing replaces the location at the current index with a new location. When you replace the current location, it has no effect on locations after the current one."),a.default.createElement("p",null,"The history object's ",a.default.createElement(o.InlineJS,null,"navigate()")," method is used for replacing locations. In order to ensure that a location is replaced, the ",a.default.createElement(o.InlineJS,null,'"REPLACE"')," argument should be passed to the method call.")),a.default.createElement(s.CodeBlock,{"data-line":"9,14"},'locations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" }\n]\nindex = 2\n// current location = { pathname: "/three" }\n\nhistory.navigate("/four", "REPLACE")\n\nlocations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/four" }\n]\nindex = 2\n// current location = { pathname: "/four" }')),a.default.createElement(i.Subsection,{tag:"h4",title:"Anchor",id:"navigation-anchor"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"The ",a.default.createElement(o.InlineJS,null,"history.navigate()")," method has one other way of navigating, which is also its default method. This method is called ",a.default.createElement(o.InlineJS,null,'"ANCHOR"')," because it simulates how clicking an anchor in a non-single-page application works."),a.default.createElement("p",null,"Anchor navigation is a hybrid of pushing and replacing. If you attempt to navigate to the same location as the current location (same ",a.default.createElement(o.InlineJS,null,"pathname"),", ",a.default.createElement(o.InlineJS,null,"query"),", and ",a.default.createElement(o.InlineJS,null,"hash"),"), then the current location will be replaced. If you attempt to navigate to a new location, it will be pushed."),a.default.createElement("p",null,"Unless you have a reason to explicitly push/replace, anchor navigation is what you should use for navigation.")),a.default.createElement(s.CodeBlock,{"data-line":"8,18,25,27"},'locations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" }\n]\nindex = 2\n\nhistory.navigate("/three")\n\n// same location, so nothing changes\nlocations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" }\n]\nindex = 2\n\nhistory.navigate("/four")\n\n// new location is pushed\nlocations = [\n  { pathname: "/one" },\n  { pathname: "/two" },\n  { pathname: "/three" },\n  { pathname: "/four" }\n]\nindex = 3'))),a.default.createElement(i.Subsection,{title:"Navigation with the Router",id:"with-router"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"In the above examples, navigation is done using URL pathnames, but one of the principles of Curi is that you shouldn't have to write URLs yourself. To help with this, the router has its own"," ",a.default.createElement(o.InlineJS,null,"navigate()")," method."),a.default.createElement("p",null,a.default.createElement(o.InlineJS,null,"router.navigate()")," takes an object with the"," ",a.default.createElement(o.InlineJS,null,"name")," of the route to navigate to. If the route (or any of its ancestors) requires ",a.default.createElement(o.InlineJS,null,"params"),", they should also be provided through the object."),a.default.createElement("p",null,a.default.createElement(o.InlineJS,null,"query"),", ",a.default.createElement(o.InlineJS,null,"hash"),", and ",a.default.createElement(o.InlineJS,null,"state")," properties can also be provided to pass any of those location details."),a.default.createElement("p",null,a.default.createElement(o.InlineJS,null,"router.navigate()")," does anchor style (",a.default.createElement(o.InlineJS,null,'"ANCHOR"'),") navigation by default, but if you want to do"," ",a.default.createElement(o.InlineJS,null,'"PUSH"'),"/",a.default.createElement(o.InlineJS,null,'"REPLACE"')," navigation, you can provide the type with the ",a.default.createElement(o.InlineJS,null,"method")," property.")),a.default.createElement(s.CodeBlock,null,'router.navigate({\n  name: "User",\n  params: { id: 1423 }\n});\n\n// replace the current location with the Login route\nrouter.navigte({\n  name: "Login",\n  state: { next: "/profile" }\n  method: "REPLACE"\n});'))),a.default.createElement(i.Section,{title:"Detecting Navigation",id:"detecting-navigation"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"The Curi router uses an observer pattern to call registered functions (called response handlers) when there is a new response. The main function for response handlers is to use the new response to render the application, but any other functionality (like logging) can also be performed.")),a.default.createElement(i.Subsection,{title:"Response Handlers",id:"response-handlers"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"When response handlers are called, they are passed an object with three properties:"," ",a.default.createElement(l.Link,{to:"Package",params:{package:"router"},hash:"properties"},a.default.createElement(o.InlineJS,null,"router")),","," ",a.default.createElement(l.Link,{to:"Guide",params:{slug:"routes-and-responses"},hash:"responses"},a.default.createElement(o.InlineJS,null,"response")),", and"," ",a.default.createElement(l.Link,{to:"Guide",params:{slug:"navigation-objects"}},a.default.createElement(o.InlineJS,null,"navigation")),". Which objects/properties you use depends on what the response handler is doing.")),a.default.createElement(s.CodeBlock,null,"function responseHandler({\n  router,\n  response,\n  navigation\n}) {\n  // ...\n}")),a.default.createElement(i.Subsection,{title:"Registering Response Handlers",id:"registering"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"There are two ways to attach response handlers to the router:"," ",a.default.createElement(o.InlineJS,null,"router.once()")," and ",a.default.createElement(o.InlineJS,null,"router.observe()"),". Response handlers registered with ",a.default.createElement(o.InlineJS,null,"router.once()")," will only be called one time, while those registered with"," ",a.default.createElement(o.InlineJS,null,"router.observe()")," will be called for every new response."),a.default.createElement("p",null,"When you register a response handler using"," ",a.default.createElement(o.InlineJS,null,"router.observer()"),", it will return a function that you can use to stop calling the response handler for new responses. You should rarely need to do this, but it can be useful for memory management if you are adding and removing lots of observers.")),a.default.createElement(s.CodeBlock,null,"// fn will only be called one time\nrouter.once(fn);\n\n// obs will be called for every new response\nconst stop = router.observer(fn);")),a.default.createElement(i.Subsection,{title:"Use Cases",id:"use-cases"},a.default.createElement("p",null,"What should you use response handlers for?"),a.default.createElement(i.Subsection,{title:"Setup",id:"setup"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"If any of the routes in an application have ",a.default.createElement(o.InlineJS,null,"resolve")," ","functions, when they match their responses are created asynchronously. When the application first renders, if the router matches an async route, the response isn't immediately ready to use. To deal with this, you can use an observer to render once the initial response is ready."),a.default.createElement("p",null,"A setup function only needs to be called one time, so you can register it with ",a.default.createElement(o.InlineJS,null,"router.once()"),"."),a.default.createElement(r.Note,null,"In most applications, waiting for the initial response is the only time you may need to write response handlers yourself.")),a.default.createElement(s.CodeBlock,{lang:"jsx"},"const Router = curiProvider(router);\n              \nfunction setup() {\n  ReactDOM.render((\n    <Router>\n      {({ response }) => <response.body />}\n    </Router>\n  ), document.getElementById('root'));\n}\n\nrouter.once(setup);")),a.default.createElement(i.Subsection,{title:"Rendering",id:"rendering"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Rendering libraries need to know when there is a new response so that they can re-render the application."),a.default.createElement("p",null,"The Curi rendering packages (",a.default.createElement(l.Link,{to:"Package",params:{package:"react-dom"}},a.default.createElement(o.InlineJS,null,"@curi/react-dom")),","," ",a.default.createElement(l.Link,{to:"Package",params:{package:"react-native"}},a.default.createElement(o.InlineJS,null,"@curi/react-native")),","," ",a.default.createElement(l.Link,{to:"Package",params:{package:"vue"}},a.default.createElement(o.InlineJS,null,"@curi/vue")),", and"," ",a.default.createElement(l.Link,{to:"Package",params:{package:"svelte"}},a.default.createElement(o.InlineJS,null,"@curi/svelte")),") setup an observer internally so that they can automatically re-render."),a.default.createElement("p",null,"If you are using vanilla JavaScript to render your application or you are writing your own framework implementation, you would use ",a.default.createElement(o.InlineJS,null,"router.observer()")," to re-render new responses.")),a.default.createElement(s.CodeBlock,null,"function observer({ response }) {\n  // let the app know there is a new response\n}\n\nrouter.observer(observer);")),a.default.createElement(i.Subsection,{title:"Side Effects",id:"side-effects"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Side effects are observers that are provided to the router at creation instead of by calling ",a.default.createElement(o.InlineJS,null,"router.observe()"),". These can be useful for tasks that are not rendering related as well as for tasks that need to be performed after a render has completed."),a.default.createElement("p",null,"The"," ",a.default.createElement(l.Link,{to:"Package",params:{package:"side-effect-title"}},a.default.createElement(o.InlineJS,null,"@curi/side-effect-title"))," ","package provides a side effect that will use"," ",a.default.createElement(o.InlineJS,null,"response.title")," to set the page's"," ",a.default.createElement(o.InlineJS,null,"document.title"),"."),a.default.createElement("p",null,"With single-page applications, clicking on links wish hashes won't always scroll to the matching element in the page. The"," ",a.default.createElement(l.Link,{to:"Package",params:{package:"side-effect-scroll"}},a.default.createElement(o.InlineJS,null,"@curi/side-effect-scroll"))," ","package adds this behavior by scrolling the page to the element that matches the new response's hash (",a.default.createElement(o.InlineJS,null,"response.location.hash"),") after the new response has rendered."),a.default.createElement("p",null,"If you need to add logging to your application, you could write your own observer to do this. Your observer can either be added as a side effect when the router is constructed or later using"," ",a.default.createElement(o.InlineJS,null,"router.observe()"),".")),a.default.createElement(s.CodeBlock,null,"function logger({ response }) {\n  loggingAPI.add(response.location);\n}\n\n// as a side-effect\nconst router = curi(history, routes, {\n  sideEffects: [{ fn: logger }]\n});\n\n// as an observer\nrouter.observe(logger);")))))};var a=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),l=n(1),o=n(6),r=n(11),i=n(10),s=n(7)}}]);