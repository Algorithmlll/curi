(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{150:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=c(n(0)),a=n(1),o=c(n(78)),r=n(77),i=n(2),u=n(9),s=n(67);c(n(68));function c(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return l.default.createElement(o.default,null,l.default.createElement("h1",null,"Vue Basics Tutorial"),l.default.createElement("p",null,"In this tutorial, we will be building a website for a bookstore. This will focus on the front-end part of the application."),l.default.createElement(r.Outline,null,l.default.createElement("ul",null,l.default.createElement("li",null,"Learn how to define routes and setup the Curi router."),l.default.createElement("li",null,"Learn how to render Vue components based on the current location."),l.default.createElement("li",null,"Learn how to navigate within the application."))),l.default.createElement(s.Section,{title:"Setup",id:"setup"},l.default.createElement("p",null,"We will be using"," ",l.default.createElement("a",{href:"https://github.com/vuejs/vue-cli"},l.default.createElement(i.InlineJS,null,"@vue/cli"))," ","to develop this website."),l.default.createElement(u.Note,null,"The instructions here assume that you have NodeJS and NPM > 5.2 installed on your computer. If you do not, cannot, or prefer to avoid setup altogether, you can follow along using"," ",l.default.createElement("a",{href:"https://codesandbox.io/"},"CodeSandbox"),". Some of the boilerplate will be different, but the differences are minor."),l.default.createElement("p",null,"Begin by opening a terminal and navigating to the directory where you want to save your code. Then, we will use ",l.default.createElement(i.InlineJS,null,"@vue/cli")," to create the application. We"),l.default.createElement(i.PrismBlock,{lang:"bash"},"# install vue-cli if it isn't already\nnpm install --global @vue/cli\n# create the application\nvue create curi-bookstore\n# select the default option\n\n# enter the new app directory\ncd curi-bookstore\n# start the dev server\nyarn serve"),l.default.createElement("p",null,"The dev server will automatically update when we change files, so we can leave that running. We will still be working in the terminal, so you will want to open up a new terminal window/tab and navigate to the application's directory. Once you have done that, there are a few packages that need to be installed."),l.default.createElement(i.PrismBlock,{lang:"bash"},"yarn add @hickory/browser @curi/router @curi/vue"),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"@hickory/browser")," package will be used to create an object that interacts with the browser to power navigation (e.g. updates the URI in the address bar when you click a link). ",l.default.createElement(i.InlineJS,null,"@curi/router")," ","provides the function to actually create the router."," ",l.default.createElement(i.InlineJS,null,"@curi/vue")," gives us a plugin for Vue and some Vue components that interact with the router.")),l.default.createElement(s.Section,{title:"History and Locations",id:"history"},l.default.createElement("p",null,"URIs can be broken into parts to identify a location. With a single-page application, we don't care about the URI's protocol (http, https) or its hostname (www.example.com). The properties we care about are the"," ",l.default.createElement(i.InlineJS,null,"pathname"),", ",l.default.createElement(i.InlineJS,null,"hash"),", and ",l.default.createElement(i.InlineJS,null,"query"),"."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'// uri = "https://example.com/one?key=value#id\n{\n  pathname: "/one",\n  query: "key=value",\n  hash: "id"\n}'),l.default.createElement("p",null,"The router will match its routes against a location's"," ",l.default.createElement(i.InlineJS,null,"pathname")," to figure out which route matches. The"," ",l.default.createElement(i.InlineJS,null,"query")," and ",l.default.createElement(i.InlineJS,null,"hash")," values are not used for matching routes."),l.default.createElement("p",null,"Curi uses the ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory"},"Hickory")," ","library to create a history object that will enable us to navigate within our application. Hickory provides a few different packages to create history objects for different environments, but the only one we care about right now is the browser history, which comes from the"," ",l.default.createElement(i.InlineJS,null,"@hickory/browser")," package. A browser history object will interact with the browser's native"," ",l.default.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API"},"History API")," ","so that our application can change locations (and the URI in the address bar) without making a request to a server and reloading the page."),l.default.createElement("p",null,"We can import the ",l.default.createElement(i.InlineJS,null,"Browser")," function from"," ",l.default.createElement(i.InlineJS,null,"@hickory/browser")," in our main file (",l.default.createElement(i.InlineJS,null,"src/main.js"),", which ",l.default.createElement(i.InlineJS,null,"@vue/cli")," created for us). To create a history object, we call that function."),l.default.createElement(u.Note,null,"The history object can be configured with"," ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory/blob/master/docs/api/Browser.md#options"},"an options object"),", but we will stick with the defaults."),l.default.createElement(i.PrismBlock,{lang:"javascript","data-line":"3,9"},"// src/main.js\nimport Vue from 'vue'\nimport Browser from '@hickory/browser'\n\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nconst history = Browser()\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')"),l.default.createElement(u.Note,null,"Eslint will complain here because we haven't actually used the new"," ",l.default.createElement(i.InlineJS,null,"history")," object. We can ignore that warning for now because we'll get rid of it soon enough.")),l.default.createElement(s.Section,{title:"Defining the Routes",id:"defining-routes"},l.default.createElement("p",null,"Routes are JavaScript objects that define the valid locations for a router. They have a ",l.default.createElement(i.InlineJS,null,"name")," and a ",l.default.createElement(i.InlineJS,null,"path"),"."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'// this is a route\n{ name: "Home", path: "" }'),l.default.createElement("p",null,"A route's ",l.default.createElement(i.InlineJS,null,"name")," needs to be unique. We will use route names when we navigate within the application. A route's ",l.default.createElement(i.InlineJS,null,"path")," ","describes the location pathname that it should match."),l.default.createElement(s.Subsection,{title:"Path basics",id:"path-basics",type:"aside"},l.default.createElement("p",null,"Route paths are strings describing the pathname segments they should match."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"{ path: '' } // matches \"/\"\n{ path: 'about/stuff' } // matches \"/about/stuff\""),l.default.createElement("p",null,"Paths never begin with a slash."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// yes\n{ path: '' }\n// no\n{ path: '/' }"),l.default.createElement("p",null,"Paths can include dynamic parameters. These are specified with a string that starts with a colon (",l.default.createElement(i.InlineJS,null,":"),") followed by the name of the params."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// a param named \"id\"\n{ path: ':id' }"),l.default.createElement("p",null,"Routes can be nested using the ",l.default.createElement(i.InlineJS,null,"children")," property of a route. A nested route inherits the path from its ancestor route(s), so its ",l.default.createElement(i.InlineJS,null,"path")," is only the additional part of the pathname that should be matched."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'{\n  name: "Parent",\n  path: "parent", // matches /parent\n  children: [\n    // matches /parent/daughter\n    { name: "Daughter", path: "daughter" },\n    // matches /parent/son\n    { name: "Son", path: "son" }\n  ]\n}')),l.default.createElement("p",null,"The website will start with four routes."),l.default.createElement("table",null,l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"name"),l.default.createElement("th",null,"path"),l.default.createElement("th",null,"Description"))),l.default.createElement("tbody",null,l.default.createElement("tr",null,l.default.createElement("td",null,"Home"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'""')),l.default.createElement("td",null,"Lists books available for purchase")),l.default.createElement("tr",null,l.default.createElement("td",null,"Book"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'"book/:id"')),l.default.createElement("td",null,"Details about an individual book")),l.default.createElement("tr",null,l.default.createElement("td",null,"Checkout"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'"checkout"')),l.default.createElement("td",null,'"Buy" the books in the shopping cart')),l.default.createElement("tr",null,l.default.createElement("td",null,"Catch All"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'"(.*)"')),l.default.createElement("td",null,"Display a not found page for all other locations")))),l.default.createElement(u.Note,null,"The catch all route uses a regular expression syntax to indicate that it should match everything. Curi uses the"," ",l.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp"},l.default.createElement(i.InlineJS,null,"path-to-regexp"))," ","package for route matching. We will only be using some of its basic syntax, but you can read its documentation to learn about more advanced path syntax."),l.default.createElement("p",null,"Inside of the ",l.default.createElement(i.InlineJS,null,"src")," directory, we will create a"," ",l.default.createElement(i.InlineJS,null,"routes.js")," file where we can define the application's routes."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/routes.js"),l.default.createElement(i.PrismBlock,{lang:"javascript"},'// src/routes.js\nexport default [\n  {\n    name: "Home",\n    path: ""\n  },\n  {\n    name: "Book",\n    path: "book/:id"\n  },\n  {\n    name: "Checkout",\n    path: "checkout"\n  },\n  {\n    name: "Catch All",\n    path: "(.*)"\n  }\n];')),l.default.createElement(s.Section,{title:"The Router",id:"router"},l.default.createElement("p",null,"With the history object created and the routes defined, we are ready to create the router. Back in the ",l.default.createElement(i.InlineJS,null,"src/index.js")," file, we should import the ",l.default.createElement(i.InlineJS,null,"curi")," function from ",l.default.createElement(i.InlineJS,null,"@curi/router")," as well as our routes from ",l.default.createElement(i.InlineJS,null,"src/routes.js"),". Creating the router is done by calling the ",l.default.createElement(i.InlineJS,null,"curi()")," function and passing it the"," ",l.default.createElement(i.InlineJS,null,"history")," object and the ",l.default.createElement(i.InlineJS,null,"routes")," array."),l.default.createElement(i.PrismBlock,{lang:"javascript","data-line":"3,6,12"},"// src/main.js\nimport Vue from 'vue'\nimport { curi } from '@curi/router';\nimport Browser from '@hickory/browser'\n\nimport routes from './routes';\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nconst history = Browser()\nconst router = curi(history, routes)\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')"),l.default.createElement(u.Note,null,"The Eslint warning has now moved to the ",l.default.createElement(i.InlineJS,null,"router"),", but this is still nothing to worry about."),l.default.createElement("p",null,"We will add router support to the Vue application using a plugin. This plugin does a couple of things. First, it makes some Curi components available within the application. The only one of these components that we will be using is the ",l.default.createElement(i.InlineComponent,null,"curi-link"),". Second, it makes router related values accessible to the components in the application. The router is available as ",l.default.createElement(i.InlineJS,null,"this.$router")," and the"," ",l.default.createElement(i.InlineJS,null,"response")," and ",l.default.createElement(i.InlineJS,null,"navigation")," (we will cover these next) are grouped under ",l.default.createElement(i.InlineJS,null,"this.$curi"),". When the ",l.default.createElement(i.InlineJS,null,"CuriPlugin")," ","is installed, the ",l.default.createElement(i.InlineJS,null,"router")," as passed in the options object."),l.default.createElement(i.PrismBlock,{lang:"javascript","data-line":"5,14"},"// src/main.js\nimport Vue from 'vue'\nimport { curi } from '@curi/router';\nimport Browser from '@hickory/browser'\nimport { CuriPlugin } from '@curi/vue'\n\nimport routes from './routes';\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nconst history = Browser()\nconst router = curi(history, routes)\nVue.use(CuriPlugin, { router })\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')")),l.default.createElement(s.Section,{title:"Rendering with Vue",id:"rendering"},l.default.createElement("p",null,"We can now render our application. We will re-use the provide"," ",l.default.createElement(i.InlineJS,null,"App.vue")," file."),l.default.createElement(s.Subsection,{title:"Responses and Navigation",id:"responses",type:"aside"},l.default.createElement("p",null,"Whenever Curi receives a location, it matches its routes against it and generates a response. This is an object with data related to the route that matched the location. Later on we will modify this data ourselves, but for now the important thing to know is that the response lets us know about the current route."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// a sample response object\n{\n  body: undefined,\n  data: undefined,\n  error: undefined,\n  location: { pathname: '/', ... },\n  name: 'Home',\n  params: {},\n  partials: [],\n  status: 200\n}"),l.default.createElement("p",null,"The router uses an observer model to let functions subscribe to be called when a new response is generated. The ",l.default.createElement(i.InlineJS,null,"CuriPlugin")," ","sets up an observer so that it can trigger a re-render whenever there is a new one."),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"navigation")," object contains additional information about a navigation that doesn't make sense to include in the response object. This includes the navigation's \"action\" (",l.default.createElement(i.InlineJS,null,"PUSH"),","," ",l.default.createElement(i.InlineJS,null,"POP"),", or ",l.default.createElement(i.InlineJS,null,"REPLACE"),") and the previous response object. This can be useful for animation and modals.")),l.default.createElement("p",null,"Most of the time, the response is the only property you will need to use to render, but the other two may occasionally be useful."),l.default.createElement("p",null,"How do we use the response to render? Any way you want. Based on the sample response above, the ",l.default.createElement(i.InlineJS,null,"name")," stands out as the best way to identify which route matched. We can make this even easier by adding another property to the response: ",l.default.createElement(i.InlineJS,null,"body"),"."),l.default.createElement("p",null,"Earlier it was mentioned that response objects can be modified. This is done by returning an object from a route's ",l.default.createElement(i.InlineJS,null,"response()")," ","function. ",l.default.createElement(i.InlineJS,null,"response()")," receives an object with a whole bunch of properties that we can use to help determine how to modify the response, but for the time being, we don't care about any of those. All we need to know is that if we return an object with a ",l.default.createElement(i.InlineJS,null,"body")," property, that value will be set on our response object."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'{\n  name: "Home",\n  path: "",\n  response() {\n    return {\n      body: "Home, sweet home."\n    };\n    /*\n      * response = {\n      *   body: "Home, sweet home.",\n      *   // ...\n      * }\n      */\n  }\n}'),l.default.createElement("p",null,"If the return object's ",l.default.createElement(i.InlineJS,null,"body")," property is a Vue component, we can render it using ",l.default.createElement(i.InlineComponent,null,"Component :is"),"."),l.default.createElement("p",null,"We haven't actually defined components for our routes yet, so we should throw together some placeholders."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/components/Home.vue src/components/Book.vue \\\n  src/components/Checkout.vue src/components/NotFound.vue"),l.default.createElement(i.PrismBlock,{lang:"html"},"\x3c!-- src/components/Home.vue --\x3e\n<template>\n  <div>Home</div>\n</template>"),l.default.createElement(i.PrismBlock,{lang:"html"},"\x3c!-- src/components/Book.vue --\x3e\n<template>\n  <div>Book</div>\n</template>"),l.default.createElement(i.PrismBlock,{lang:"html"},"\x3c!-- src/components/Checkout.vue --\x3e\n<template>\n  <div>Checkout</div>\n</template>"),l.default.createElement(i.PrismBlock,{lang:"html"},"\x3c!-- src/components/NotFound.vue --\x3e\n<template>\n  <div>Not Found</div>\n</template>"),l.default.createElement("p",null,"These components can be imported in ",l.default.createElement(i.InlineJS,null,"src/routes.js")," and attached to their respective routes."),l.default.createElement(i.PrismBlock,{lang:"javascript","data-line":"2-5,11-15,20-24,29-33,38-42"},'// src/routes.js\nimport Home from \'./components/Home\';\nimport Book from \'./components/Book\';\nimport Checkout from \'./components/Checkout\';\nimport NotFound from \'./components/NotFound\';\n\nexport default [\n  {\n    name: "Home",\n    path: "",\n    response() {\n      return {\n        body: Home\n      };\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    response() {\n      return {\n        body: Book\n      };\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    response() {\n      return {\n        body: Checkout\n      };\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    response() {\n      return {\n        body: NotFound\n      };\n    }\n  }\n];'),l.default.createElement("p",null,"We can now update ",l.default.createElement(i.InlineJS,null,"App.vue")," to render ",l.default.createElement(i.InlineJS,null,"response.body")," ","as a component, which as mentioned above is available through"," ",l.default.createElement(i.InlineJS,null,"this.$curi"),"."),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- src/App.vue --\x3e\n<template>\n  <component :is="$curi.response.body" />\n</template>\n'),l.default.createElement("p",null,"We can also remove the ",l.default.createElement(i.InlineComponent,null,"HelloWorld")," component."),l.default.createElement(i.PrismBlock,{lang:"bash"},"rm src/components/HelloWorld.vue"),l.default.createElement("p",null,"At this point in time our app is rendering, but is isn't very interesting because we cannot navigate between locations.")),l.default.createElement(s.Section,{title:"Navigating between locations",id:"navigating"},l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"CuriPlugin")," makes a ",l.default.createElement(i.InlineComponent,null,"curi-link")," component available with the appliaction. We can use that to navigate between locations within our application."),l.default.createElement(s.Subsection,{title:l.default.createElement("span",null,"The ",l.default.createElement(i.InlineComponent,null,"curi-link")," Component"),id:"link-component",type:"aside"},l.default.createElement("p",null,"Navigation isn't done by manually typing the pathname of the location the link should navigate to. Instead, we specify the name of the route using the ",l.default.createElement(i.InlineJS,null,"to")," prop."),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- { name: "Home", path: "" } --\x3e\n<curi-link to="Home">Home</curi-link>\n\x3c!-- <a href="/">Home</a> --\x3e'),l.default.createElement("p",null,"If a route has params, we provide these to the ",l.default.createElement(i.InlineComponent,null,"curi-link")," as a ",l.default.createElement(i.InlineJS,null,"params")," object. For a nested route, we would also need to provide params for any ancestor routes."),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- { name: "Book", path: "book/:id" } --\x3e\n<curi-link to="Book" :params="{ id: 7 }">The Dark Forest</curi-link>\n\x3c!-- <a href="/book/7">The Dark Forest</a> --\x3e'),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineComponent,null,"curi-link")," is only for in-app navigation. If you want to link to pages outside of the application, use an anchor."),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- in-app --\x3e\n<curi-link to="Some Route">Some Route</curi-link>\n\n\x3c!-- out of app --\x3e\n<a href="https://github.com">GitHub</a>'),l.default.createElement("p",null,"If you need to attach query or hash data to a ",l.default.createElement(i.InlineComponent,null,"curi-link"),", use the ",l.default.createElement(i.InlineJS,null,"query")," and ",l.default.createElement(i.InlineJS,null,"hash")," props."),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- { name: "Checkout", path: "checkout" } --\x3e\n<curi-link to="Checkout" :query="a=123">Checkout</curi-link>\n\x3c!-- <a href="/checkout?a=123">Checkout</a> --\x3e')),l.default.createElement(s.Subsection,{title:"A Navigation Menu",id:"nav-menu"},l.default.createElement("p",null,"We will start with creating a navigation menu component with links to our home page and checkout page."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/components/NavMenu.vue"),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- src/components/NavMenu.vue --\x3e\n<template>\n  <nav>\n    <ul>\n      <li>\n        <curi-link to="Home">Home</curi-link>\n      </li>\n      <li>\n        <curi-link to="Checkout">Checkout</curi-link>\n      </li>\n    </ul>\n  </nav>\n</template>'),l.default.createElement("p",null,"We can import that in our ",l.default.createElement(i.InlineJS,null,"App.vue")," file and add it to our template. This is a good opportunity to also add some structure to the elements in the template."),l.default.createElement(i.PrismBlock,{lang:"html"},"\x3c!-- src/App.vue --\x3e\n<template>\n  <div>\n    <header>\n      <nav-menu />\n    </header>\n    <main>\n      <component :is=\"$curi.response.body\" />\n    </main>\n  </div>\n</template>\n\n<script type=\"src/javascript\">\n  import NavMenu from './components/NavMenu';\n\n  export default {\n    name: 'app',\n    components: {\n      'nav-menu': NavMenu\n    }\n  };\n<\/script>")),l.default.createElement(s.Subsection,{title:"Linking to Books",id:"book-links"},l.default.createElement("p",null,"We want to be able to link to individual books from the home page. First, we need data about the books. For now, we're going to hard-code the books in the ",l.default.createElement(i.InlineJS,null,"src/books.js")," module."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/books.js"),l.default.createElement("p",null,"You can copy+paste or modify the data, but the structure of the provided data should stay the same."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// src/books.js\nexport default [\n  {\n    id: 0,\n    title: 'The Name of the Wind',\n    author: 'Patrick Rothfuss',\n    published: '2007',\n    pages: 662\n  },\n  {\n    id: 1,\n    title: \"The Wise Man's Fear\",\n    author: 'Patrick Rothfuss',\n    published: '2011',\n    pages: 994\n  },\n  {\n    id: 2,\n    title: 'The Way of Kings',\n    author: 'Brandon Sanderson',\n    published: '2010',\n    pages: 1007\n  },\n  {\n    id: 3,\n    title: 'A Storm of Swords',\n    author: 'George R.R. Martin',\n    published: '2003',\n    pages: 1177\n  },\n  {\n    id: 78,\n    title: 'Words of Radiance',\n    author: 'Brandon Sanderson',\n    published: '2014',\n    pages: 1087\n  }\n];"),l.default.createElement("p",null,"The data can be imported in the ",l.default.createElement(i.InlineComponent,null,"Home")," component. We will iterate over the books with a ",l.default.createElement(i.InlineComponent,null,"Link")," to each one."),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- src/components/Home.vue --\x3e\n<template>\n  <div>\n    <ul>\n      <li v-for="b in books" :key="b.id">\n        <curi-link to="Book" :params="{ id: b.id }">\n          {{b.title}} by {{b.author}}\n        </curi-link>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  import books from \'../books\';\n\n  export default {\n    name: \'home\',\n    data() {\n      return { books };\n    }\n  }\n<\/script>'),l.default.createElement("p",null,"Now that we can navigate to the books, we should fill out the UI for the ",l.default.createElement(i.InlineComponent,null,"Book")," component. We will once again import the"," ",l.default.createElement(i.InlineJS,null,"books.js")," data. We can use ",l.default.createElement(i.InlineJS,null,"params.id")," to select the correct book. ",l.default.createElement(i.InlineJS,null,"params.id")," is a string, so we will need to parse it into an integer. Sometimes there won't be a valid book for the ",l.default.createElement(i.InlineJS,null,"params.id"),". In that case, we will also want to display a message that the requested book could not be found."),l.default.createElement(i.PrismBlock,{lang:"html"},"\x3c!-- src/components/Book.vue --\x3e\n<template>\n  <div v-if=\"book\">\n    <h1>{{book.title}}</h1>\n    <h2>by {{book.author}}</h2>\n    <p>Published in {{book.published}}</p>\n    <p>{{book.pages}} pages</p>\n  </div>\n  <div v-else>\n    The requested book could not be found\n  </div>\n</template>\n\n<script>\n  import books from '../books';\n\n  export default {\n    name: 'book',\n    computed: {\n      book() {\n        const id = parseInt(this.$curi.response.params.id, 10);\n        return books.find(b => b.id === id);\n      }\n    }\n  }\n<\/script>"))),l.default.createElement(s.Section,{title:"Let's go shopping",id:"shopping"},l.default.createElement("p",null,"We want to be able to add books to our shopping cart. Since this is a play site, we will store the cart data in memory."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/cart.js"),l.default.createElement("p",null,"The shopping cart implementation will be a JavaScript ",l.default.createElement(i.InlineJS,null,"Map"),". We can call its ",l.default.createElement(i.InlineJS,null,"set")," method to add books, its ",l.default.createElement(i.InlineJS,null,"clear")," ","method to reset the cart, and iterate over its ",l.default.createElement(i.InlineJS,null,"entries")," with a"," ",l.default.createElement(i.InlineJS,null,"for...of")," loop."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// src/cart.js\nconst cart = new Map();\n\nexport default {\n  add(book, quantity) {\n    cart.set(book, quantity);\n  },\n  items() {\n    const books = [];\n    for (let [book, quantity] of cart.entries()) {\n      books.push({\n        title: book.title,\n        quantity\n      });\n    }\n    return books;\n  },\n  reset() {\n    cart.clear();\n    return [];\n  }\n};"),l.default.createElement("p",null,"As stated above, we can access our ",l.default.createElement(i.InlineJS,null,"router")," in the"," ",l.default.createElement(i.InlineComponent,null,"Book")," component using ",l.default.createElement(i.InlineJS,null,"this.$router"),". The router's"," ",l.default.createElement(i.InlineJS,null,"navigate()")," function can be used to navigate to a new location. This means that when the user clicks a button to add a book to their shopping cart, we can automatically navigate to the checkout page."),l.default.createElement(s.Subsection,{title:"Navigate Method",id:"nav-method",type:"aside"},l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"router.navigate()")," is used to navigate to new locations. There are three methods of navigation: ",l.default.createElement(i.InlineJS,null,"PUSH"),","," ",l.default.createElement(i.InlineJS,null,"REPLACE"),", and ",l.default.createElement(i.InlineJS,null,"ANCHOR"),"."),l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"PUSH")," pushes a new location after the current index, removing any locations after the current location."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"New\", method: \"PUSH\" });\n// session = ['/one', '/two', '/new'], index = 2"),l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"REPLACE")," replaces the location at the current index."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"Replace\", method: \"REPLACE\" });\n// session = ['/one', '/replacement', '/three'], index = 1"),l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"ANCHOR")," is a mix between ",l.default.createElement(i.InlineJS,null,"PUSH")," and"," ",l.default.createElement(i.InlineJS,null,"REPLACE"),". It mimics the behavior of clicking on links, so if you navigate to the same location as the current one it will replace, and if you navigate to a new location it will push."),l.default.createElement("p",null,"If ",l.default.createElement(i.InlineJS,null,"method.navigate()")," is called without a navigation"," ",l.default.createElement(i.InlineJS,null,"method"),", it will default to ",l.default.createElement(i.InlineJS,null,"ANCHOR"),"."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"Two\", method: \"ANCHOR\" });\n// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"New\", method: \"ANCHOR\" });\n// session = ['/one', '/two', '/new'], index = 2","`}")),l.default.createElement("p",null,"We also want to import our shopping cart API so that we can add a book to the cart."),l.default.createElement(i.PrismBlock,{lang:"html","data-line":"8-10,19,29-35"},'\x3c!-- src/components/Book.vue --\x3e\n<template>\n  <div v-if="book">\n    <h1>{{book.title}}</h1>\n    <h2>by {{book.author}}</h2>\n    <p>Published in {{book.published}}</p>\n    <p>{{book.pages}} pages</p>\n    <button type="button" v-on:click="onClick">\n      Add to Cart\n    </button>\n  </div>\n  <div v-else>\n    The requested book could not be found\n  </div>\n</template>\n\n<script>\n  import books from \'../books\';\n  import cart from \'../cart\';\n\n  export default {\n    name: \'book\',\n    computed: {\n      book() {\n        const id = parseInt(this.$curi.response.params.id, 10);\n        return books.find(b => b.id === id);\n      }\n    },\n    methods: {\n      onClick: function() {\n        cart.add(this.book, 1);\n        this.$router.navigate({ name: "Checkout" });\n      }\n    }\n  }\n<\/script>'),l.default.createElement("p",null,"Finally, we can update our ",l.default.createElement(i.InlineComponent,null,"Checkout")," component to display the books in the shopping cart. To do this, we will import our cart and books. Our cart only stores book ",l.default.createElement(i.InlineJS,null,"id"),"s, so we will need to merge the book data with the cart data."),l.default.createElement("p",null,'When a user "buys" the books in their shopping cart, we need to clear out the cart. We will also replace the current location with one whose'," ",l.default.createElement(i.InlineJS,null,"location.hash"),' is the string "thanks". When that is present in the URI, we can render a "Thanks for your purchase" message to "confirm" the purchase.'),l.default.createElement(i.PrismBlock,{lang:"html"},'\x3c!-- src/components/Checkout.vue --\x3e\n<template>\n  <div v-if="books.length">\n    <h1>Checkout</h1>\n    <table>\n      <thead>\n        <tr>\n          <th>Title</th>\n          <th>Quantity</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for="book in books" :key="book.title">\n          <td>{{book.title}}</td>\n          <td>{{book.quantity}}</td>\n        </tr>\n      </tbody>\n    </table>\n    <button type="button" v-on:click="onClick">\n      Buy\n    </button>\n  </div>\n  <div v-else-if="$curi.response.location.hash === \'thanks\'">\n    Thanks for your purchase!\n  </div>\n  <div v-else>\n    The cart is currently empty\n  </div>\n</template>\n\n<script>\n  import cart from \'../cart\';\n\n  export default {\n    name: \'checkout\',\n    data() {\n      return {\n        books: cart.items()\n      };\n    },\n    methods: {\n      onClick: function() {\n        this.books = cart.reset();\n        this.$router.navigate(\n          { name: "Checkout",\n          hash: "thanks",\n          method: "REPLACE"\n        });\n      }\n    }\n  }\n<\/script>')),l.default.createElement(s.Section,{title:"What's next?",id:"next"},l.default.createElement("p",null,"We now have a functional website built with Vue and Curi. What should you do next? Build another site! You can also check out the"," ",l.default.createElement(a.Link,{to:"Guides"},"guides")," for information on advanced techniques.")))}},151:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=m(n(0)),a=n(1),o=m(n(78)),r=n(77),i=n(2),u=n(67),s=n(5),c=n(9),d=m(n(68));function m(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return l.default.createElement(o.default,null,l.default.createElement("h1",null,"React Advanced Tutorial"),l.default.createElement("p",null,"In this tutorial, we will be expanding on the website built in the"," ",l.default.createElement(a.Link,{to:"Tutorial",params:{slug:"react-basics"}},"React basics tutorial"),". We will take advantage of Curi's async features to add code splitting and data preloading to the application."),l.default.createElement(r.Outline,null,l.default.createElement("ul",null,l.default.createElement("li",null,"Learn how to code split routes."),l.default.createElement("li",null,"Learn how to preload data for routes."))),l.default.createElement(u.Section,{title:"Demo",id:"demo"},l.default.createElement("p",null,"You can run a demo of the site we are building with CodeSandbox."),l.default.createElement(d.default,{id:"github/curijs/react-advanced-tutorial/tree/master/"})),l.default.createElement(u.Section,{title:"Setup",id:"setup"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"If you did not complete the React basics tutorial, you should either clone its"," ",l.default.createElement("a",{href:"https://github.com/curijs/react-basic-tutorial/"},"repo")," ","or fork its"," ",l.default.createElement("a",{href:"https://codesandbox.io/s/github/curijs/react-basic-tutorial/tree/master/"},"sandbox"),"."),l.default.createElement("p",null,"If you are cloning the repo, you should also install its dependencies and then start the development server. The repo was made using ",l.default.createElement(i.InlineJS,null,"yarn"),", but if you only have NPM installed, you can use the analagous commands.")),l.default.createElement(s.CodeBlock,{lang:"bash"},"git clone https://github.com/curijs/react-basic-tutorial react-advanced-tutorial\ncd react-advanced-tutorial\n\nyarn\nyarn start\n# or\nnpm install\nnpm run start"))),l.default.createElement(u.Section,{title:"Async Routes",id:"async"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"Curi lets you attach async functions to a route, and when that route matches, a response will not be emitted until the async functions have completed. The results of the async functions will be available in a route's ",l.default.createElement(i.InlineJS,null,"response()")," function under the"," ",l.default.createElement(i.InlineJS,null,"resolved")," object."),l.default.createElement(c.Note,null,"These async functions are called every time a route matches. If you have functions that should re-use the results from previous calls, you will probably want to implement some caching into your async functions. Curi provides a"," ",l.default.createElement(a.Link,{to:"Package",params:{package:"router"},hash:"once"},l.default.createElement(i.InlineJS,null,"once()"))," ","function for simple caching, but leaves more advanced caching solutions to the user."),l.default.createElement("p",null,"The async functions for a route are grouped under the route's"," ",l.default.createElement(i.InlineJS,null,"resolve")," object. The name of each function is the name that the function's result will be available as on the"," ",l.default.createElement(i.InlineJS,null,"resolved")," object. If any of the async functions throws an error, that error will be available in the ",l.default.createElement(i.InlineJS,null,"response()")," ","function through the ",l.default.createElement(i.InlineJS,null,"error")," property."),l.default.createElement("p",null,"Async functions will be passed an object of the matched route properties, which you may use to specify what data to load."),l.default.createElement("p",null,"Curi uses Promises to manage async code, so async functions should return Promises. If you want to return a value, you can use"," ",l.default.createElement(i.InlineJS,null,"Promise.resolve()")," to return it using a Promise.")),l.default.createElement(s.CodeBlock,null,'const routes = [\n  {\n    name: "A Route",\n    path: "route/:id",\n    resolve: {\n      component: () => import("./components/SomeComponent")\n        .then(module => module.default),\n      data: ({ params }) => fetch(`/api/data/${params.id}`)\n    },\n    response({ resolved, error }) {\n      if (error) {\n        // ...\n      }\n      return {\n        body: resolved.component,\n        data: resolved.data\n      }\n    }\n  }\n];')),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"There is one caveat to async routes: we cannot safely render the application immediately on load because the initial response might not be ready yet. When a user loads your application and the first route that matches has asynchronous functions, there is no response to render until the async code finishes. This means that if you attempt to render immediately after creating a router, the"," ",l.default.createElement(i.InlineJS,null,"response")," that will be passed to the ",l.default.createElement(i.InlineComponent,null,"Router"),"'s"," ",l.default.createElement(i.InlineJS,null,"children()")," will be ",l.default.createElement(i.InlineJS,null,"null"),"."),l.default.createElement("p",null,"There are a few possible ways to handle this situation. The first is to delay rendering by placing your ",l.default.createElement(i.InlineJS,null,"ReactDOM.render()")," call inside of a ",l.default.createElement(i.InlineJS,null,"router.once()")," callback. This will guarantee that the render isn't called until the first response is ready. Alternatively, you can update the render-invoked"," ",l.default.createElement(i.InlineJS,null,"children()")," function to know what to do when"," ",l.default.createElement(i.InlineJS,null,"response")," is ",l.default.createElement(i.InlineJS,null,"null"),"."),l.default.createElement("p",null,"Which approach is best will depend on the specifics of an application. If there are routes that will take a long time for the initial load, you will probably want to render something while they load. For async code with short loading times, a blank screen might be more acceptable.")),l.default.createElement(s.CodeBlock,null,"// delay rendering\nconst router = curi(...);\nconst Router = curiProvider(router);\n\nrouter.once(() => {\n  ReactDOM.render((\n    <Router>\n      {...}\n    </Router>\n  ), holder);\n});\n\n// render using null response\nReactDOM.render((\n  <Router>\n    {({ response }) => {\n      if (response == null) {\n        return <div>Loading...</div>;\n      }\n      const { body:Body } = response;\n      return <Body response={response} />;\n    }}\n  </Router>\n), holder);")),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"For more information on async route properties, please refer to the"," ",l.default.createElement(a.Link,{to:"Guide",params:{slug:"routes"}},"routes guide"),".")))),l.default.createElement(u.Section,{title:"Code Splitting",id:"code-splitting"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,'Code splitting works by "dynamically" importing modules using the'," ",l.default.createElement(i.InlineJS,null,"import()")," function. When bundlers like Webpack see"," ",l.default.createElement(i.InlineJS,null,"import()")," functions, they know to create a separate bundle for that module (and that module's imports, etc.)."),l.default.createElement("p",null,"You can add a ",l.default.createElement(i.InlineJS,null,'/* webpackChunkName: "chunkName" */')," comment to an ",l.default.createElement(i.InlineJS,null,"import()")," call to let Webpack know what to name a code split bundle."),l.default.createElement("p",null,"Create React App's default configuration is already setup to support code splitting, but if you were creating your own Webpack configuration, you would need to use"," ",l.default.createElement("a",{href:"https://webpack.js.org/configuration/output/#output-chunkfilename"},l.default.createElement(i.InlineJS,null,"output.chunkFilename"))," ","to support code splitting.")),l.default.createElement(s.CodeBlock,null,'// this creates a "Test" bundle\nimport(/* webpackChunkName: "Test" */ "./components/Test.js")')),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"Currently, the ",l.default.createElement(i.InlineJS,null,"routes.js")," module imports all of the route modules at the top of the file. In order to add code splitting, we need to switch to using ",l.default.createElement(i.InlineJS,null,"import()"),"."),l.default.createElement("p",null,"Currently ",l.default.createElement(i.InlineJS,null,"response()")," returns an object whose"," ",l.default.createElement(i.InlineJS,null,"body")," property is a module imported at the top of the file. Now we want to change this to have ",l.default.createElement(i.InlineJS,null,"body")," be the imported module.")),l.default.createElement(s.CodeBlock,null,'const routes = [\n  {\n    name: "Test",\n    path: "test",\n    resolve: {\n      body: () => import(/* webpackChunkName: "Test" */ "./components/Test.js")\n    }\n  }\n];')),l.default.createElement(c.Note,null,l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"import()")," resolves a module object, not a component. Our components are exported using default exports, so they will be available as the module object's ",l.default.createElement(i.InlineJS,null,"default")," property."),l.default.createElement("p",null,"There are a couple different approaches that you can take to accessing the component from the module object."),l.default.createElement("p",null,"The first is to use ",l.default.createElement(i.InlineJS,null,"import().then()")," to resolve the module object's ",l.default.createElement(i.InlineJS,null,"default")," property."),l.default.createElement("p",null,"The second is to reference ",l.default.createElement(i.InlineJS,null,"resolved.body.default")," (or whatever you name the function) in the ",l.default.createElement(i.InlineJS,null,"response()")," ","functions."),l.default.createElement("p",null,"Which you choose is mostly a matter of personal preference.")),l.default.createElement(s.CodeBlock,null,'const routes = [\n  {\n    name: "One",\n    path: "one",\n    resolve: {\n      body: () => import("./components/One.js")\n        .then(module => module.default)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  },\n  {\n    name: "Two",\n    path: "two",\n    resolve: {\n      body: () => import("./components/Two.js")\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body.default\n      };\n    }\n  }\n];'))),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"When a module fails to load, the error will be passed to the"," ",l.default.createElement(i.InlineJS,null,"response()")," function through the ",l.default.createElement(i.InlineJS,null,"error")," ","property. We won't be incorporating this into the application here, but in a real application you probably want to have a fallback component to display an error message (especially if you have an offline mode with service workers).")),l.default.createElement(s.CodeBlock,null,'import displayLoadError from "./components/LoadError";\n        \nconst routes = [\n  {\n    name: "One",\n    path: "one",\n    resolve: {\n      body: () => import("./components/One.js")\n        .then(module => module.default)\n        .catch(err => displayLoadError(err))\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  }\n];')),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"We can now update the ",l.default.createElement(i.InlineJS,null,"routes.js")," module to remove the imports at the top of the file and use ",l.default.createElement(i.InlineJS,null,"import()")," to import the route components. We will use ",l.default.createElement(i.InlineJS,null,"then()")," to only resolve the component instead of the entire module object."),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"response()")," functions should also be updated to set the return object's ",l.default.createElement(i.InlineJS,null,"body")," property to"," ",l.default.createElement(i.InlineJS,null,"resolved.body"))),l.default.createElement(s.CodeBlock,{"data-line":"6-14,19-27,32-40,45-53"},'// src/routes.js\nexport default [\n  {\n    name: "Home",\n    path: "",\n    resolve: {\n      body: () => import("./components/Home")\n        .then(module => module.default)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    resolve: {\n      body: () => import("./components/Book")\n        .then(module => module.default)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    resolve: {\n      body: () => import("./components/Checkout")\n        .then(module => module.default)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    resolve: {\n      body: () => import("./components/NotFound")\n        .then(module => module.default)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  }\n];')),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"We will also update the ",l.default.createElement(i.InlineJS,null,"index.js")," module to use"," ",l.default.createElement(i.InlineJS,null,"router.once()")," to delay the initial render.")),l.default.createElement(s.CodeBlock,{"data-line":"16-34"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { curi } from '@curi/router';\nimport Browser from '@hickory/browser';\nimport { curiProvider } from '@curi/react-dom';\n\nimport './index.css';\nimport routes from './routes';\nimport NavMenu from './components/NavMenu';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\nconst Router = curiProvider(router);\n\nrouter.once(() => {\n  ReactDOM.render((\n    <Router>\n      {({ response, router }) => {\n        const { body:Body } = response;\n        return (\n          <div>\n            <header>\n              <NavMenu />\n            </header>\n            <main>\n              <Body response={response} router={router} />\n            </main>\n          </div>\n        );\n      }}\n    </Router>\n  ), document.getElementById('root'));\n});\nregisterServiceWorker();")),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"With those changes, Webpack will now split the application into multiple bundles. The initial render will be delayed until after the code split bundle for the first route has been loaded.")))),l.default.createElement(u.Section,{title:"Preloading Data",id:"preloading-data"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"Preloading data lets you delay navigation until after the data for a route has loaded. This can save you from having to render a partial page with spinners if the data takes a while to load."),l.default.createElement("p",null,"While the data is loading, the user will be able to continue interacting with the current page. This means that the user can also start a new navigation while the current navigation is running. When this happens, Curi knows to to cancel the previous navigation and perform the new navigation instead."),l.default.createElement("p",null,"We have two routes that need to load data: ",l.default.createElement(i.InlineJS,null,"Home")," and"," ",l.default.createElement(i.InlineJS,null,"Book"),". The ",l.default.createElement(i.InlineJS,null,"Home")," route will load the known books, while the ",l.default.createElement(i.InlineJS,null,"Book")," route will load data about a specific book."),l.default.createElement("p",null,"Currently the data for both of these routes is imported in their components. In a real site you would most likely make API calls to a REST or GraphQL endpoint, but here we will simulate this with a fake API."))),l.default.createElement(u.Subsection,{title:"The Fake API",id:"fake-api"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"The fake API will simulate asynchronous calls to the server by returning Promises, similarly to the"," ",l.default.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"Fetch API"),"."))),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"First, we will create an ",l.default.createElement(i.InlineJS,null,"api.js")," module that exports the fake API functions.")),l.default.createElement(s.CodeBlock,{lang:"bash"},"touch src/api.js")),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"In the API module, we will import the ",l.default.createElement(i.InlineJS,null,"books.js")," data."),l.default.createElement("p",null,"We need to write two functions. The first returns a list of all books and the second returns the data for a specific book. For both, we can use ",l.default.createElement(i.InlineJS,null,"Promise.resolve()")," to return a Promise, even though we don't really have any asynchronous code being run.")),l.default.createElement(s.CodeBlock,null,'// src/api.js\nimport books from "./books";\n\nexport const BOOKS = () => Promise.resolve(books);\n\nexport const BOOK = id => Promise.resolve(\n  books.find(b => b.id === id)\n);'))),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"The fake API functions should be imported in the"," ",l.default.createElement(i.InlineJS,null,"routes.js")," module so that we can call the functions from the routes' async methods."),l.default.createElement("p",null,"What do we want to do with the data loaded from the API calls? We can attach it to a response through its ",l.default.createElement(i.InlineJS,null,"data")," property. When we render, we will be able to access that data as"," ",l.default.createElement(i.InlineJS,null,"response.data"),". ",l.default.createElement(i.InlineJS,null,"data")," can be anything you want it to be. We will set ",l.default.createElement(i.InlineJS,null,"data")," to be an object with appropriately named properties."),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"Home")," route already has an ",l.default.createElement(i.InlineJS,null,"import()"),", which we name ",l.default.createElement(i.InlineJS,null,"body"),". We will name the async call to load the books data ",l.default.createElement(i.InlineJS,null,'"books"'),"."),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"Book")," route's ",l.default.createElement(i.InlineJS,null,"response()")," also needs to be updated to attach the books data (",l.default.createElement(i.InlineJS,null,"resolved.books"),") to the response."),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"book()")," API call expects to be given the ",l.default.createElement(i.InlineJS,null,"id")," ","number of the book it should return data for. We can grab the correct param (",l.default.createElement(i.InlineJS,null,"id"),") from the ",l.default.createElement(i.InlineJS,null,"params")," property. However, when params are parsed, they are stored as strings. To convert it to a number, we can use the route's ",l.default.createElement(i.InlineJS,null,"params")," ","property to tell Curi how to parse the ",l.default.createElement(i.InlineJS,null,"id"),". By giving it a function that calls ",l.default.createElement(i.InlineJS,null,"parseInt()")," on the provided value,"," ",l.default.createElement(i.InlineJS,null,"params.id")," will be a number instead of a string.")),l.default.createElement(s.CodeBlock,{"data-line":"2,9-13,16-20,26-28,30-32,35-38"},'// src/routes.js\nimport { BOOKS, BOOK } from "./api";\n\nexport default [\n  {\n    name: "Home",\n    path: "",\n    resolve: {\n      body: () => import("./components/Home")\n        .then(module => module.default),\n      books: () => BOOKS()\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body,\n        data: { books: resolved.books }\n      };\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    params: {\n      id: id => parseInt(id, 10)\n    },\n    resolve: {\n      body: () => import("./components/Book")\n        .then(module => module.default),\n      book: ({ params }) => BOOK(params.id)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body,\n        data: { book: resolved.book }\n      };\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    resolve: {\n      body: () => import("./components/Checkout")\n        .then(module => module.default)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    resolve: {\n      body: () => import("./components/NotFound")\n        .then(module => module.default)\n    },\n    response({ resolved }) {\n      return {\n        body: resolved.body\n      };\n    }\n  }\n];')),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"With the data attached to our responses, we can remove the data imports from the components and just read from the response."))),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"In the ",l.default.createElement(i.InlineComponent,null,"Home")," component's module, we can remove the"," ",l.default.createElement(i.InlineJS,null,"books.js")," import and grab the response from the component's props. The books data can be access as"," ",l.default.createElement(i.InlineJS,null,"response.data.books"),".")),l.default.createElement(s.CodeBlock,{lang:"jsx","data-line":"5,8"},"// src/components/Home.js\nimport React from 'react';\nimport { Link } from '@curi/react-dom';\n\nexport default ({ response }) => (\n  <div>\n    <ul>\n      {response.data.books.map(book => (\n        <li key={book.id}>\n          <Link to=\"Book\" params={{ id: book.id }} >\n            {book.title} by {book.author}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </div>\n);")),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"Likewise, we can remove the ",l.default.createElement(i.InlineJS,null,"books.js")," import from the"," ",l.default.createElement(i.InlineComponent,null,"Book")," component's module and grab the book data from"," ",l.default.createElement(i.InlineJS,null,"response.data")," instead of searching for it in the books array.")),l.default.createElement(s.CodeBlock,{lang:"jsx","data-line":"7"},"// src/components/Book.js\nimport React from 'react';\n\nimport cart from '../cart';\n\nexport default ({ response, router }) => {\n  const { book } = response.data;\n  if (!book) {\n    return <div>The requested book could not be found</div>;\n  }\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <h2>by {book.author}</h2>\n      <p>Published in {book.published}</p>\n      <p>{book.pages} pages</p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          cart.add(book, 1);\n          router.navigate({ to: \"Checkout\" });\n        }}\n      >\n        Add to Cart\n      </button>\n    </div>\n  );\n};"))),l.default.createElement(u.Section,{title:"Visualizing Loading",id:"loading"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"At this point, we have the same functionality as the basic tutorial, but we have added async data loading. The bundle importing has real loading times, but the fake API calls resolve immediately, which doesn't necessarily reflect real world performance."),l.default.createElement("p",null,"We can update the fake API to delay resolving so that we can take a look at some of the ",l.default.createElement(i.InlineJS,null,"@curi/react-dom")," components that are navigation-aware. The implementation here isn't important, so you can just copy+paste the code. The only thing to know is that the"," ",l.default.createElement(i.InlineJS,null,"BOOKS()")," function has a one second delay and the"," ",l.default.createElement(i.InlineJS,null,"BOOK()")," function has a 2.5 second delay the first time a book is requested (and responds instantly on subsequent calls).")),l.default.createElement(s.CodeBlock,null,'// src/api.js\nimport books from "./books";\n\nexport const BOOKS = () => new Promise(resolve => {\n  // artificial delay\n  setTimeout(() => {\n    resolve(books);\n  }, 1000);\n});\n\nconst BOOK_CACHE = {};\nexport const BOOK = id => new Promise(resolve => {\n  if (BOOK_CACHE[id]) {\n    resolve(BOOK_CACHE[id]);\n    return;\n  }\n  // artificial delay on first call\n  setTimeout(() => {\n    const book = books.find(b => b.id === id);\n    BOOK_CACHE[id] = book;\n    resolve(book);\n  }, 2500);\n});')),l.default.createElement(u.Subsection,{title:l.default.createElement("span",null,l.default.createElement(i.InlineComponent,null,"Link")," is navigating?"),id:"link-navigating"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"The ",l.default.createElement(i.InlineComponent,null,"Link")," component can be called with a render-invoked"," ",l.default.createElement(i.InlineJS,null,"children()")," function. If you do this, the function will be called with a ",l.default.createElement(i.InlineJS,null,"navigating")," boolean that indicates whether the router is currently navigating to that link. This is useful for when you know that there is a long (multiple seconds) delay between when the user clicks the link and when the navigation will occur."),l.default.createElement("p",null,"We can update the ",l.default.createElement(i.InlineComponent,null,"Link"),"s in the ",l.default.createElement(i.InlineComponent,null,"Home")," ","component to using render-invoked functions and display a loading spinner while we wait for the book data to load.")),l.default.createElement(s.CodeBlock,{lang:"jsx"},'import { Link } from "@curi/react-dom";\n            \n<Link to="Book" params={{ id: 1 }}>\n  {navigating => (\n    <React.Fragment>\n      Book 1\n      {navigating ? <Spinner /> : null}\n    </React.Fragment>\n  )}\n</Link>')),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,l.default.createElement("a",{href:"https://github.com/KyleAMathews/react-spinkit"},l.default.createElement(i.InlineJS,null,"react-spinkit"))," ","provides some pretty loading spinners, so we will use that.")),l.default.createElement(s.CodeBlock,{lang:"bash"},"yarn add react-spinkit")),l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"In the ",l.default.createElement(i.InlineComponent,null,"Home")," component's module, we need to import the"," ",l.default.createElement(i.InlineComponent,null,"Spinner")," component. The ",l.default.createElement(i.InlineComponent,null,"Link")," needs to be swapped from a React element to a render-invoked function. We wrap the contents in a ",l.default.createElement(i.InlineComponent,null,"React.Fragment")," to avoid unnecessary DOM elements. In the function, we render a ",l.default.createElement(i.InlineComponent,null,"Spinner")," when the ",l.default.createElement(i.InlineComponent,null,"Link")," is navigating and ",l.default.createElement(i.InlineJS,null,"null")," when it is not."),l.default.createElement(c.Note,null,l.default.createElement(i.InlineJS,null,"react-spinkit")," is highly customizable, but we are sticking with the defaults here. ",l.default.createElement(i.InlineJS,null,"react-spinkit")," has a default one second render delay, which is why the spinner does not display immediately.")),l.default.createElement(s.CodeBlock,{lang:"jsx","data-line":"4,12-17"},"// src/components/Home.js\nimport React from 'react';\nimport { Link } from '@curi/react-dom';\nimport Spinner from \"react-spinkit\";\n\nexport default ({ response }) => (\n  <div>\n    <ul>\n      {response.data.books.map(book => (\n        <li key={book.id}>\n          <Link to=\"Book\" params={{ id: book.id }} >\n            {navigating => (\n              <React.Fragment>\n                {book.title} by {book.author}\n                {navigating ? <Spinner /> : null}\n              </React.Fragment>\n            )}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </div>\n);")))),l.default.createElement(u.Section,{title:"Async Caveats",id:"caveats"},l.default.createElement(s.SideBySide,null,l.default.createElement(s.Explanation,null,l.default.createElement("p",null,"Adding asynchronous loading to an application can help reduce initial load size and speed up user interactions, however it also has some issues that you will need to consider."),l.default.createElement("p",null,"The biggest consideration is that there is nothing the frontend can do to get the data for the initial render faster. Your application's frontend can only fetch data as it discovers it needs it. If you are performing server-side rendering, you may want to load the initial data on the server and inject it into the page's HTML output. The implementation details for this vary greatly and are more related to how you store data (e.g."," ",l.default.createElement("a",{href:"https://redux.js.org/recipes/server-rendering#the-server-side"},"with redux"),")."),l.default.createElement("p",null,'Another consideration is whether or not you want to "hoist" data requirements. Curi\'s async functionality relies on you knowing all of the data requirements for a route, but you might prefer to keep the data associated with individual components. React Suspense will help with this (and Curi will support it once it releases), but this is still a ways out. At the very least, I would recommend using Curi for code splitting routes. Whether your should hoist other data requirements is something that should be determined on a case-by-case basis.')))))}},153:function(e,t,n){},154:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=d(n(0)),a=n(1),o=d(n(78)),r=n(77),i=n(2),u=n(9),s=n(67),c=d(n(68));function d(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return l.default.createElement(o.default,null,l.default.createElement("h1",null,"React Basics Tutorial"),l.default.createElement("p",null,"In this tutorial, we will be building a website for a bookstore. This will focus on the front-end part of the application."),l.default.createElement(r.Outline,null,l.default.createElement("ul",null,l.default.createElement("li",null,"Learn how to define routes and setup the Curi router."),l.default.createElement("li",null,"Learn how to render React components based on the current location."),l.default.createElement("li",null,"Learn how to navigate within the application."))),l.default.createElement(s.Section,{title:"Demo",id:"demo"},l.default.createElement("p",null,"You can run a demo of the site we are building with CodeSandbox."),l.default.createElement(c.default,{id:"github/curijs/react-basic-tutorial/tree/master/"})),l.default.createElement(s.Section,{title:"Setup",id:"setup"},l.default.createElement("p",null,"We will be using"," ",l.default.createElement("a",{href:"https://github.com/facebook/create-react-app"},l.default.createElement(i.InlineJS,null,"create-react-app"))," ","to develop this website."),l.default.createElement(u.Note,null,"The instructions here assume that you have NodeJS and NPM > 5.2 installed on your computer. If you do not, cannot, or prefer to avoid setup altogether, you can follow along using"," ",l.default.createElement("a",{href:"https://codesandbox.io/"},"CodeSandbox"),". Some of the boilerplate will be different, but the differences are minor."),l.default.createElement("p",null,"Begin by opening a terminal and navigating to the directory where you want to save your code. Then, we will use ",l.default.createElement(i.InlineJS,null,"npx")," to create the application."),l.default.createElement(i.PrismBlock,{lang:"bash"},"npx create-react-app curi-bookstore # create the app\ncd curi-bookstore # enter the new app directory\nyarn start # start the dev server"),l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"create-react-app"),"'s dev server will automatically update when we change files, so we can leave that running. We will still be working in the terminal, so you will want to open up a new terminal window/tab and navigate to the application's directory. Once you have done that, there are a few packages that need to be installed."),l.default.createElement(i.PrismBlock,{lang:"bash"},"yarn add @hickory/browser @curi/router @curi/react-dom"),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"@hickory/browser")," package will be used to create an object that interacts with the browser to power navigation (e.g. updates the URI in the address bar when you click a link). ",l.default.createElement(i.InlineJS,null,"@curi/router")," ","provides the function to actually create the router."," ",l.default.createElement(i.InlineJS,null,"@curi/react-dom")," gives us some React components that interact with the router.")),l.default.createElement(s.Section,{title:"History and Locations",id:"history"},l.default.createElement("p",null,"URIs can be broken into parts to identify a location. With a single-page application, we don't care about the URI's protocol (http, https) or its hostname (www.example.com). The properties we care about are the"," ",l.default.createElement(i.InlineJS,null,"pathname"),", ",l.default.createElement(i.InlineJS,null,"hash"),", and ",l.default.createElement(i.InlineJS,null,"query"),"."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'// uri = "https://example.com/one?key=value#id\n{\n  pathname: "/one",\n  query: "key=value",\n  hash: "id"\n}'),l.default.createElement("p",null,"The router will match its routes against a location's"," ",l.default.createElement(i.InlineJS,null,"pathname")," to figure out which route matches. The"," ",l.default.createElement(i.InlineJS,null,"query")," and ",l.default.createElement(i.InlineJS,null,"hash")," values are not used for matching routes."),l.default.createElement("p",null,"Curi uses the ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory"},"Hickory")," ","library to create a history object that will enable us to navigate within our application. Hickory provides a few different packages to create history objects for different environments, but the only one we care about right now is the browser history, which comes from the"," ",l.default.createElement(i.InlineJS,null,"@hickory/browser")," package. A browser history object will interact with the browser's native"," ",l.default.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/History_API"},"History API")," ","so that our application can change locations (and the URI in the address bar) without making a request to a server and reloading the page."),l.default.createElement("p",null,"We can import the ",l.default.createElement(i.InlineJS,null,"Browser")," function from"," ",l.default.createElement(i.InlineJS,null,"@hickory/browser")," in our index file (",l.default.createElement(i.InlineJS,null,"src/index.js"),", which ",l.default.createElement(i.InlineJS,null,"create-react-app")," created for us). To create a history object, we call that function."),l.default.createElement(u.Note,null,"The history object can be configured with"," ",l.default.createElement("a",{href:"https://github.com/pshrmn/hickory/blob/master/docs/api/Browser.md#options"},"an options object"),", but we will stick with the defaults."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"4,10"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Browser from '@hickory/browser';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();")),l.default.createElement(s.Section,{title:"Defining the Routes",id:"defining-routes"},l.default.createElement("p",null,"Routes are JavaScript objects that define the valid locations for a router. They have a ",l.default.createElement(i.InlineJS,null,"name")," and a ",l.default.createElement(i.InlineJS,null,"path"),"."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'// this is a route\n{ name: "Home", path: "" }'),l.default.createElement("p",null,"A route's ",l.default.createElement(i.InlineJS,null,"name")," needs to be unique. We will use route names when we navigate within the application. A route's ",l.default.createElement(i.InlineJS,null,"path")," ","describes the location pathname that it should match."),l.default.createElement(s.Subsection,{title:"Path basics",id:"path-basics",type:"aside"},l.default.createElement("p",null,"Route paths are strings describing the pathname segments they should match."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"{ path: '' } // matches \"/\"\n{ path: 'about/stuff' } // matches \"/about/stuff\""),l.default.createElement("p",null,"Paths never begin with a slash."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// yes\n{ path: '' }\n// no\n{ path: '/' }"),l.default.createElement("p",null,"Paths can include dynamic parameters. These are specified with a string that starts with a colon (",l.default.createElement(i.InlineJS,null,":"),") followed by the name of the params."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// a param named \"id\"\n{ path: ':id' }"),l.default.createElement("p",null,"Routes can be nested using the ",l.default.createElement(i.InlineJS,null,"children")," property of a route. A nested route inherits the path from its ancestor route(s), so its ",l.default.createElement(i.InlineJS,null,"path")," is only the additional part of the pathname that should be matched."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'{\n  name: "Parent",\n  path: "parent", // matches /parent\n  children: [\n    // matches /parent/daughter\n    { name: "Daughter", path: "daughter" },\n    // matches /parent/son\n    { name: "Son", path: "son" }\n  ]\n}')),l.default.createElement("p",null,"The website will start with four routes."),l.default.createElement("table",null,l.default.createElement("thead",null,l.default.createElement("tr",null,l.default.createElement("th",null,"name"),l.default.createElement("th",null,"path"),l.default.createElement("th",null,"Description"))),l.default.createElement("tbody",null,l.default.createElement("tr",null,l.default.createElement("td",null,"Home"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'""')),l.default.createElement("td",null,"Lists books available for purchase")),l.default.createElement("tr",null,l.default.createElement("td",null,"Book"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'"book/:id"')),l.default.createElement("td",null,"Details about an individual book")),l.default.createElement("tr",null,l.default.createElement("td",null,"Checkout"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'"checkout"')),l.default.createElement("td",null,'"Buy" the books in the shopping cart')),l.default.createElement("tr",null,l.default.createElement("td",null,"Catch All"),l.default.createElement("td",null,l.default.createElement(i.InlineJS,null,'"(.*)"')),l.default.createElement("td",null,"Display a not found page for all other locations")))),l.default.createElement(u.Note,null,"The catch all route uses a regular expression syntax to indicate that it should match everything. Curi uses the"," ",l.default.createElement("a",{href:"https://github.com/pillarjs/path-to-regexp"},l.default.createElement(i.InlineJS,null,"path-to-regexp"))," ","package for route matching. We will only be using some of its basic syntax, but you can read its documentation to learn about more advanced path syntax."),l.default.createElement("p",null,"Inside of the ",l.default.createElement(i.InlineJS,null,"src")," directory, we will create a"," ",l.default.createElement(i.InlineJS,null,"routes.js")," file where we can define the application's routes."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/routes.js"),l.default.createElement(i.PrismBlock,{lang:"javascript"},'// src/routes.js\nexport default [\n  {\n    name: "Home",\n    path: ""\n  },\n  {\n    name: "Book",\n    path: "book/:id"\n  },\n  {\n    name: "Checkout",\n    path: "checkout"\n  },\n  {\n    name: "Catch All",\n    path: "(.*)"\n  }\n];')),l.default.createElement(s.Section,{title:"The Router",id:"router"},l.default.createElement("p",null,"With the history object created and the routes defined, we are ready to create the router. Back in the ",l.default.createElement(i.InlineJS,null,"src/index.js")," file, we should import the ",l.default.createElement(i.InlineJS,null,"curi")," function from ",l.default.createElement(i.InlineJS,null,"@curi/router")," as well as our routes from ",l.default.createElement(i.InlineJS,null,"src/routes.js"),". Creating the router is done by calling the ",l.default.createElement(i.InlineJS,null,"curi()")," function and passing it the"," ",l.default.createElement(i.InlineJS,null,"history")," object and the ",l.default.createElement(i.InlineJS,null,"routes")," array."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"4,8,13"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { curi } from '@curi/router';\nimport Browser from '@hickory/browser';\n\nimport './index.css';\nimport routes from './routes';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();")),l.default.createElement(s.Section,{title:"Rendering with React",id:"rendering"},l.default.createElement("p",null,"We can now render our application. To do this, we will use the"," ",l.default.createElement(i.InlineComponent,null,"curiProvider()")," function from the ",l.default.createElement(i.InlineJS,null,"@curi/react-dom")," ","package. This function takes the Curi router and returns a component that does two things:"),l.default.createElement("ol",null,l.default.createElement("li",null,"It places router-related values on the context for other"," ",l.default.createElement(i.InlineJS,null,"@curi/react-dom")," components"),l.default.createElement("li",null,"It re-renders the application whenever the location changes.")),l.default.createElement("p",null,"The returned component can be called anything you like, but here we will call it ",l.default.createElement(i.InlineComponent,null,"Router"),"."),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineComponent,null,"Router")," takes one prop: a render-invoked function, passed as the ",l.default.createElement(i.InlineJS,null,"children")," prop. This function will receive an object that has three properties: ",l.default.createElement(i.InlineJS,null,"router"),", ",l.default.createElement(i.InlineJS,null,"response"),", and"," ",l.default.createElement(i.InlineJS,null,"navigation"),"."),l.default.createElement(i.PrismBlock,{lang:"jsx"},'import { curiProvider } from "@curi/react-dom";\n        \nconst Router = curiProvider(router);\n        \n<Router>\n  {({ router, response, navigation }) => {\n    return <div>This is the website</div>;\n  }}\n</Router>'),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"router")," is our Curi router, but what are the other two?"),l.default.createElement(s.Subsection,{title:"Responses and Navigation",id:"responses",type:"aside"},l.default.createElement("p",null,"Whenever Curi receives a location, it matches its routes against it and generates a response. This is an object with data related to the route that matched the location. Later on we will modify this data ourselves, but for now the important thing to know is that the response lets us know about the current route."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// a sample response object\n{\n  body: undefined,\n  data: undefined,\n  error: undefined,\n  location: { pathname: '/', ... },\n  name: 'Home',\n  params: {},\n  partials: [],\n  status: 200\n}"),l.default.createElement("p",null,"The router uses an observer model to let functions subscribe to be called when a new response is generated. The ",l.default.createElement(i.InlineComponent,null,"Router")," ","observes the router so that it can re-render the application whenever there is a new one."),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"navigation")," object contains additional information about a navigation that doesn't make sense to include in the response object. This includes the navigation's \"action\" (",l.default.createElement(i.InlineJS,null,"PUSH"),","," ",l.default.createElement(i.InlineJS,null,"POP"),", or ",l.default.createElement(i.InlineJS,null,"REPLACE"),") and the previous response object.")),l.default.createElement("p",null,"Most of the time, the response is the only property you will need to use to render, but the other two may occasionally be useful."),l.default.createElement("p",null,"How do we use the response to render? Any way you want. Based on the sample response above, the ",l.default.createElement(i.InlineJS,null,"name")," stands out as the best way to identify which route matched. We can make this even easier by adding another property to the response: ",l.default.createElement(i.InlineJS,null,"body"),"."),l.default.createElement("p",null,"Earlier it was mentioned that response objects can be modified. This is done by returning an object from a route's ",l.default.createElement(i.InlineJS,null,"response()")," ","function. ",l.default.createElement(i.InlineJS,null,"response()")," receives an object with a whole bunch of properties that we can use to help determine how to modify the response, but for the time being, we don't care about any of those. All we need to know is that if we return an object with a ",l.default.createElement(i.InlineJS,null,"body")," property, that value will be set on our response object."),l.default.createElement(i.PrismBlock,{lang:"javascript"},'{\n  name: "Home",\n  path: "",\n  response() {\n    return {\n      body: "Home, sweet home."\n    };\n    /*\n      * response = {\n      *   body: "Home, sweet home.",\n      *   // ...\n      * }\n      */\n  }\n}'),l.default.createElement("p",null,"If the return object's ",l.default.createElement(i.InlineJS,null,"body")," is a React component, we can render it in the ",l.default.createElement(i.InlineComponent,null,"Router"),"'s children function. We haven't actually defined components for our routes yet, so we should throw together some placeholders."),l.default.createElement(i.PrismBlock,{lang:"bash"},"mkdir -p src/components\ntouch src/components/Home.js src/components/Book.js \\\n  src/components/Checkout.js src/components/NotFound.js"),l.default.createElement(i.PrismBlock,{lang:"jsx"},"// src/components/Home.js\nimport React from 'react';\n\nexport default () => (\n  <div>Home</div>\n);"),l.default.createElement(i.PrismBlock,{lang:"jsx"},"// src/components/Book.js\nimport React from 'react';\n\nexport default () => (\n  <div>Book</div>\n);"),l.default.createElement(i.PrismBlock,{lang:"jsx"},"// src/components/Checkout.js\nimport React from 'react';\n\nexport default () => (\n  <div>Checkout</div>\n);"),l.default.createElement(i.PrismBlock,{lang:"jsx"},"// src/components/NotFound.js\nimport React from 'react';\n\nexport default () => (\n  <div>Not Found</div>\n);"),l.default.createElement("p",null,"These components can be imported in ",l.default.createElement(i.InlineJS,null,"src/routes.js")," and attached to their respective routes."),l.default.createElement(i.PrismBlock,{lang:"javascript","data-line":"2-5,11-15,20-24,29-33,38-42"},'// src/routes.js\nimport Home from \'./components/Home\';\nimport Book from \'./components/Book\';\nimport Checkout from \'./components/Checkout\';\nimport NotFound from \'./components/NotFound\';\n\nexport default [\n  {\n    name: "Home",\n    path: "",\n    response() {\n      return {\n        body: Home\n      };\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    response() {\n      return {\n        body: Book\n      };\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    response() {\n      return {\n        body: Checkout\n      };\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    response() {\n      return {\n        body: NotFound\n      };\n    }\n  }\n];'),l.default.createElement("p",null,"We can now render the ",l.default.createElement(i.InlineComponent,null,"Router")," in our index file. The"," ",l.default.createElement(i.InlineComponent,null,"Router")," gets passed a render-invoked function as the component's ",l.default.createElement(i.InlineJS,null,"children"),". In the render-invoked function, we can use ",l.default.createElement(i.InlineJS,null,"response.body")," to render the component for the matched route. We will also pass the ",l.default.createElement(i.InlineJS,null,"response")," as a prop to the rendered component, which will be useful soon."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"6,14,16-25"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { curi } from '@curi/router';\nimport Browser from '@hickory/browser';\nimport { curiProvider } from '@curi/react-dom';\n\nimport './index.css';\nimport routes from './routes';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\nconst Router = curiProvider(router);\n\nReactDOM.render((\n  <Router>\n    {({ response }) => {\n      const { body:Body } = response;\n      return (\n        <Body response={response} />\n      );\n    }}\n  </Router>\n), document.getElementById('root'));\nregisterServiceWorker();"),l.default.createElement("p",null,"We can also remove the ",l.default.createElement(i.InlineComponent,null,"App")," component import and delete the related files."),l.default.createElement(i.PrismBlock,{lang:"bash"},"rm src/App.js src/App.css src/App.test.js"),l.default.createElement("p",null,"At this point in time our app is rendering, but is isn't very interesting because we cannot navigate between locations.")),l.default.createElement(s.Section,{title:"Navigating between locations",id:"navigating"},l.default.createElement("p",null,"The ",l.default.createElement(i.InlineJS,null,"@curi/react-dom")," package provides a ",l.default.createElement(i.InlineComponent,null,"Link")," ","component that we can use to navigate between locations within our application."),l.default.createElement(s.Subsection,{title:l.default.createElement("span",null,"The ",l.default.createElement(i.InlineComponent,null,"Link")," Component"),id:"link-component",type:"aside"},l.default.createElement("p",null,"Navigation isn't done by manually typing the pathname of the location the link should navigate to. Instead, we specify the name of the route using the ",l.default.createElement(i.InlineJS,null,"to")," prop."),l.default.createElement(i.PrismBlock,{lang:"jsx"},'// { name: "Home", path: "" }\n<Link to="Home">Home</Link>\n// <a href="/">Home</a>'),l.default.createElement("p",null,"If a route has params, we provide these to the ",l.default.createElement(i.InlineComponent,null,"Link")," as a"," ",l.default.createElement(i.InlineJS,null,"params")," object. For a nested route, we would also need to provide params for any ancestor routes."),l.default.createElement(i.PrismBlock,{lang:"jsx"},'// { name: "Book", path: "book/:id" }\n<Link to="Book" params={{ id: 7 }}>The Dark Forest</Link>\n// <a href="/book/7">The Dark Forest</a>'),l.default.createElement("p",null,"The ",l.default.createElement(i.InlineComponent,null,"Link")," is only for in-app navigation. If you want to link to pages outside of the application, use an anchor."),l.default.createElement(i.PrismBlock,{lang:"jsx"},'// in-app\n<Link to="Some Route">Some Route</Link>\n\n// out of app\n<a href="https://github.com">GitHub</a>'),l.default.createElement("p",null,"If you need to attach query or hash data to a ",l.default.createElement(i.InlineComponent,null,"Link"),", use the"," ",l.default.createElement(i.InlineJS,null,"query")," and ",l.default.createElement(i.InlineJS,null,"hash")," props."),l.default.createElement(i.PrismBlock,{lang:"jsx"},'// { name: "Checkout", path: "checkout" }\n<Link to="Checkout" query=\'affiliate=123\'>Checkout</Link>\n// <a href="/checkout?affiliate=123">Checkout</a>')),l.default.createElement(s.Subsection,{title:"A Navigation Menu",id:"nav-menu"},l.default.createElement("p",null,"We will start with creating a navigation menu component with links to our home page and checkout page."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/components/NavMenu.js"),l.default.createElement(i.PrismBlock,{lang:"jsx"},"// src/components/NavMenu.js\nimport React from 'react';\nimport { Link } from '@curi/react-dom';\n\nexport default () => (\n  <nav>\n    <ul>\n      <li>\n        <Link to=\"Home\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"Checkout\">Checkout</Link>\n      </li>\n    </ul>\n  </nav>\n);"),l.default.createElement("p",null,"We can import that in our index file and add it to our"," ",l.default.createElement(i.InlineJS,null,"children")," function. This is a good opportunity to also add some structure to the elements returned by the ",l.default.createElement(i.InlineJS,null,"children")," ","function."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"10,22-29"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { curi } from '@curi/router';\nimport Browser from '@hickory/browser';\nimport { curiProvider } from '@curi/react-dom';\n\nimport './index.css';\nimport routes from './routes';\nimport NavMenu from './components/NavMenu';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\nconst Router = curiProvider(router);\n\nReactDOM.render((\n  <Router>\n    {({ response }) => {\n      const { body:Body } = response;\n      return (\n        <div>\n          <header>\n            <NavMenu />\n          </header>\n          <main>\n            <Body response={response} />\n          </main>\n        </div>\n      );\n    }}\n  </Router>\n), document.getElementById('root'));\nregisterServiceWorker();")),l.default.createElement(s.Subsection,{title:"Linking to Books",id:"book-links"},l.default.createElement("p",null,"We want to be able to link to individual books from the home page. First, we need data about the books. For now, we're going to hard-code the books in the ",l.default.createElement(i.InlineJS,null,"src/books.js")," module."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/books.js"),l.default.createElement("p",null,"You can copy+paste or modify the data, but the structure of the provided data should stay the same."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// src/books.js\nexport default [\n  {\n    id: 0,\n    title: 'The Name of the Wind',\n    author: 'Patrick Rothfuss',\n    published: '2007',\n    pages: 662\n  },\n  {\n    id: 1,\n    title: \"The Wise Man's Fear\",\n    author: 'Patrick Rothfuss',\n    published: '2011',\n    pages: 994\n  },\n  {\n    id: 2,\n    title: 'The Way of Kings',\n    author: 'Brandon Sanderson',\n    published: '2010',\n    pages: 1007\n  },\n  {\n    id: 3,\n    title: 'A Storm of Swords',\n    author: 'George R.R. Martin',\n    published: '2003',\n    pages: 1177\n  },\n  {\n    id: 78,\n    title: 'Words of Radiance',\n    author: 'Brandon Sanderson',\n    published: '2014',\n    pages: 1087\n  }\n];"),l.default.createElement("p",null,"The data can be imported in the ",l.default.createElement(i.InlineComponent,null,"Home")," component. We will iterate over the books with a ",l.default.createElement(i.InlineComponent,null,"Link")," to each one."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"4,7-17"},"// src/components/Home.js\nimport React from 'react';\nimport { Link } from '@curi/react-dom';\n\nimport books from '../books';\n\nexport default () => (\n  <div>\n    <ul>\n      {books.map(book => (\n        <li key={book.id}>\n          <Link to=\"Book\" params={{ id: book.id }} >\n            {book.title} by {book.author}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  </div>\n);"),l.default.createElement("p",null,"Now that we can navigate to the books, we should fill out the UI for the ",l.default.createElement(i.InlineComponent,null,"Book")," component. Up above, we passed the"," ",l.default.createElement(i.InlineJS,null,"response")," object as a prop to the ",l.default.createElement(i.InlineJS,null,"response.body")," ","component. Now, we can use that object in the ",l.default.createElement(i.InlineComponent,null,"Book")," ","component to access the captured route params so that we know which book to show."),l.default.createElement("p",null,"We will once again import the ",l.default.createElement(i.InlineJS,null,"books.js")," data. We can use"," ",l.default.createElement(i.InlineJS,null,"params.id")," to select the correct book. ",l.default.createElement(i.InlineJS,null,"params.id")," ","is a string, so we will need to parse it into an integer. Sometimes there won't be a valid book for the ",l.default.createElement(i.InlineJS,null,"params.id"),". In that case, we will also want to display a message that the requested book could not be found."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"4,6-20"},"// src/components/Book.js\nimport React from 'react';\n\nimport books from '../books';\n\nexport default ({ response }) => {\n  const id = parseInt(response.params.id, 10);\n  const book = books.find(b => b.id === id);\n  if (!book) {\n    return <div>The requested book could not be found</div>;\n  }\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <h2>by {book.author}</h2>\n      <p>Published in {book.published}</p>\n      <p>{book.pages} pages</p>\n    </div>\n  );\n}"))),l.default.createElement(s.Section,{title:"Let's go shopping",id:"shopping"},l.default.createElement("p",null,"We want to be able to add books to our shopping cart. Since this is a play site, we will store the cart data in memory."),l.default.createElement(i.PrismBlock,{lang:"bash"},"touch src/cart.js"),l.default.createElement("p",null,"The shopping cart implementation will be a JavaScript ",l.default.createElement(i.InlineJS,null,"Map"),". We can call its ",l.default.createElement(i.InlineJS,null,"set")," method to add books, its ",l.default.createElement(i.InlineJS,null,"clear")," ","method to reset the cart, and iterate over its ",l.default.createElement(i.InlineJS,null,"entries")," with a"," ",l.default.createElement(i.InlineJS,null,"for...of")," loop."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// src/cart.js\nconst cart = new Map();\n\nexport default {\n  add(book, quantity) {\n    cart.set(book, quantity);\n  },\n  items() {\n    const books = [];\n    for (let [book, quantity] of cart.entries()) {\n      books.push({\n        title: book.title,\n        quantity\n      });\n    }\n    return books;\n  },\n  reset() {\n    cart.clear();\n  }\n};"),l.default.createElement("p",null,"Before we edit the ",l.default.createElement(i.InlineComponent,null,"Book")," component, we should quickly revisit the ",l.default.createElement(i.InlineComponent,null,"Router"),"'s ",l.default.createElement(i.InlineJS,null,"children")," function. In addition to passing the ",l.default.createElement(i.InlineJS,null,"response")," to ",l.default.createElement(i.InlineJS,null,"response.body"),", we should also pass it our router. This will allow us to do programmatic navigation."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"19,27"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { curi } from '@curi/router';\nimport Browser from '@hickory/browser';\nimport { curiProvider } from '@curi/react-dom';\n\nimport './index.css';\nimport routes from './routes';\nimport NavMenu from './components/NavMenu';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst history = Browser();\nconst router = curi(history, routes);\nconst Router = curiProvider(router);\n\nReactDOM.render((\n  <Router>\n    {({ response, router }) => {\n      const { body:Body } = response;\n      return (\n        <div>\n          <header>\n            <NavMenu />\n          </header>\n          <main>\n            <Body response={response} router={router} />\n          </main>\n        </div>\n      );\n    }}\n  </Router>\n), document.getElementById('root'));\nregisterServiceWorker();"),l.default.createElement("p",null,"We can now access our ",l.default.createElement(i.InlineJS,null,"router")," in the ",l.default.createElement(i.InlineComponent,null,"Book")," ","component. The router's ",l.default.createElement(i.InlineJS,null,"navigate()")," function can be used to navigate to a new location. This means that when the user clicks a button to add a book to their shopping cart, we can automatically navigate to the checkout page."),l.default.createElement(s.Subsection,{title:"Navigate Method",id:"nav-method",type:"aside"},l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"router.navigate()")," is used to navigate to new locations. There are three methods of navigation: ",l.default.createElement(i.InlineJS,null,"PUSH"),","," ",l.default.createElement(i.InlineJS,null,"REPLACE"),", and ",l.default.createElement(i.InlineJS,null,"ANCHOR"),"."),l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"PUSH")," pushes a new location after the current index, removing any locations after the current location."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"New\", method: \"PUSH\" });\n// session = ['/one', '/two', '/new'], index = 2"),l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"REPLACE")," replaces the location at the current index."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"Replace\", method: \"REPLACE\" });\n// session = ['/one', '/replacement', '/three'], index = 1"),l.default.createElement("p",null,l.default.createElement(i.InlineJS,null,"ANCHOR")," is a mix between ",l.default.createElement(i.InlineJS,null,"PUSH")," and"," ",l.default.createElement(i.InlineJS,null,"REPLACE"),". It mimics the behavior of clicking on links, so if you navigate to the same location as the current one it will replace, and if you navigate to a new location it will push."),l.default.createElement("p",null,"If ",l.default.createElement(i.InlineJS,null,"method.navigate()")," is called without a navigation"," ",l.default.createElement(i.InlineJS,null,"method"),", it will default to ",l.default.createElement(i.InlineJS,null,"ANCHOR"),"."),l.default.createElement(i.PrismBlock,{lang:"javascript"},"// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"Two\", method: \"ANCHOR\" });\n// session = ['/one', '/two', '/three'], index = 1\nrouter.navigate({ name: \"New\", method: \"ANCHOR\" });\n// session = ['/one', '/two', '/new'], index = 2","`}")),l.default.createElement("p",null,"We also want to import our shopping cart API so that we can add a book to the cart."),l.default.createElement(i.PrismBlock,{lang:"jsx","data-line":"5,19-28"},"// src/components/Book.js\nimport React from 'react';\n\nimport books from '../books';\nimport cart from '../cart';\n\nexport default ({ response, router }) => {\n  const id = parseInt(response.params.id, 10);\n  const book = books.find(b => b.id === id);\n  if (!book) {\n    return <div>The requested book could not be found</div>;\n  }\n  return (\n    <div>\n      <h1>{book.title}</h1>\n      <h2>by {book.author}</h2>\n      <p>Published in {book.published}</p>\n      <p>{book.pages} pages</p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          cart.add(book, 1);\n          router.navigate({ name: \"Checkout\" });\n        }}\n      >\n        Add to Cart\n      </button>\n    </div>\n  );\n}"),l.default.createElement("p",null,"Finally, we can update our ",l.default.createElement(i.InlineComponent,null,"Checkout")," component to display the books in the shopping cart. To do this, we will import our cart and books. Our cart only stores book ",l.default.createElement(i.InlineJS,null,"id"),"s, so we will need to merge the book data with the cart data."),l.default.createElement("p",null,'When a user "buys" the books in their shopping cart, we need to clear out the cart. We will also replace the current location with one whose'," ",l.default.createElement(i.InlineJS,null,"location.hash"),' is the string "thanks". When that is present in the URI, we can render a "Thanks for your purchase" message to "confirm" the purchase.'),l.default.createElement(i.PrismBlock,{lang:"jsx"},"// src/components/Checkout.js\nimport React from 'react';\n\nimport cart from '../cart';\n\nexport default ({ router, response }) => {\n  const books = cart.items();  \n  if (!books.length) {\n    return response.location.hash === 'thanks'\n      ? <div>Thanks for your purchase!</div>\n      : <div>The cart is currently empty</div>;\n  }\n  return (\n    <div>\n      <h1>Checkout</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Quantity</th>\n          </tr>\n        </thead>\n        <tbody>\n          {books.map(book => (\n            <tr key={book.title}>\n              <td>{book.title}</td>\n              <td>{book.quantity}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <button\n        type=\"button\"\n        onClick={() => {\n          cart.reset();\n          const pathname = router.route.pathname('Checkout');\n          router.navigate({\n            name: \"Checkout\",\n            hash: \"thanks\",\n            method: \"REPLACE\"\n          });\n        }}\n      >\n        Buy\n      </button>\n    </div>\n  );\n};")),l.default.createElement(s.Section,{title:"What's next?",id:"next"},l.default.createElement("p",null,"We now have a functional website built with React and Curi. What should you do next? Build another site! You can also check out the"," ",l.default.createElement(a.Link,{to:"Guides"},"guides")," for information on advanced techniques.")))}},155:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=r(n(154)),a=r(n(151)),o=r(n(150));function r(e){return e&&e.__esModule?e:{default:e}}var i={"react-basics":l.default,"react-advanced":a.default,"vue-basics":o.default};t.default=i},66:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=o(n(0)),a=o(n(155));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=e.response,n=a.default[t.params.slug];return n?l.default.createElement(n,null):l.default.createElement("div",null,"The requested tutorial could not be found.")}},67:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Subsection=t.Section=void 0;var l,a=(l=n(0))&&l.__esModule?l:{default:l},o=n(1);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n(74);var u=function(e){var t=e.title,n=e.id,l=e.children,r=e.tag,i=e.type,u=void 0===i?"section":i;return a.default.createElement("div",{className:u,id:n},a.default.createElement(r,null,t,a.default.createElement(o.Link,{className:"header-link",hash:n},"#")),l)};t.Section=function(e){var t=e.tag,n=void 0===t?"h2":t,l=i(e,["tag"]);return a.default.createElement(u,r({type:"section",tag:n},l))};t.Subsection=function(e){var t=e.tag,n=void 0===t?"h3":t,l=i(e,["tag"]);return a.default.createElement(u,r({type:"subsection",tag:n},l))}},68:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l,a=(l=n(0))&&l.__esModule?l:{default:l};n(76);var o=function(e){var t=e.id;return a.default.createElement("div",{className:"demo"},a.default.createElement("iframe",{src:"https://codesandbox.io/embed/".concat(t),width:"100%",height:"600px",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}),a.default.createElement("p",null,"Use the three buttons at the top of the Sandbox to toggle view modes. Clicking the menu button in the top left corner opens a menu to switch between files."))};t.default=o},74:function(e,t,n){},76:function(e,t,n){},77:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Outline=t.CompleteBranch=t.TutorialBranches=t.TutorialBranch=void 0;var l,a=(l=n(0))&&l.__esModule?l:{default:l},o=n(2);t.TutorialBranch=function(e){var t=e.name;return a.default.createElement("div",{className:"tutorial-branch"},a.default.createElement("p",null,"If you are following along using the"," ",a.default.createElement("a",{href:"https://github.com/pshrmn/curi-tutorial"},"tutorial repo"),", please checkout the ",a.default.createElement(o.InlineJS,null,t)," branch."),a.default.createElement(o.PrismBlock,{lang:"bash"},"git checkout ".concat(t)))};t.TutorialBranches=function(e){var t=e.names;return a.default.createElement("div",{className:"tutorial-branch"},a.default.createElement("p",null,"If you are following along using the"," ",a.default.createElement("a",{href:"https://github.com/pshrmn/curi-tutorial"},"tutorial repo"),", please checkout the appropriate branch for your rendering framework."),a.default.createElement(o.PrismBlock,{lang:"bash"},t.map(function(e){return"git checkout ".concat(e)}).join("\n")))};t.CompleteBranch=function(e){var t=e.name;return a.default.createElement("div",{className:"tutorial-branch"},a.default.createElement("p",null,"You can view the completed source code for this tutorial"," ",a.default.createElement("a",{href:"https://github.com/pshrmn/curi-tutorial/tree/".concat(t)},"on GitHub"),"."))};t.Outline=function(e){var t=e.children;return a.default.createElement("div",{className:"tutorial-outline"},a.default.createElement("p",null,"In this tutorial, we will be doing the following:"),t)}},78:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l=u(n(0)),a=u(n(14)),o=u(n(7)),r=u(n(6)),i=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}n(153);t.default=function(e){var t=e.children;return l.default.createElement(o.default,{type:"tutorial"},l.default.createElement(i.default,null,t||null),l.default.createElement(r.default,null,l.default.createElement("h2",null,"Tutorials"),l.default.createElement(a.default,null)))}}}]);