(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{116:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return a.default.createElement(a.default.Fragment,null,a.default.createElement(s.Explanation,null,a.default.createElement("p",null,'It is important to keep in mind that some visitors to your site rely on screen readers, so you should ensure that they have a pleasant experience. One "issue" with single-page applications is that they traditionally are more difficult for screen reader users because they do not have a great way for detecting navigation.'),a.default.createElement("p",null,"Curi provides a couple approaches to help you make your site accessible.")),a.default.createElement(i.Section,{title:"Announcing Navigation",id:"aria-live"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"When the content of"," ",a.default.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions"},"ARIA live regions")," ","change, the new content will be announced to screen reader users. The"," ",a.default.createElement(o.Link,{to:"Package",params:{package:"side-effect-aria-live"}},a.default.createElement(l.InlineJS,null,"@curi/side-effect-aria-live"))," ","package provides a side effect for creating a live region and updating its content to announce navigation."),a.default.createElement("p",null,"The side effect takes a function which returns a string that should be read by screen readers. This can be whatever you want it to be, but screen readers normally read a page's title, so if you are setting ",a.default.createElement(l.InlineJS,null,"title"),"s for your responses, it is probably a good idea to have those announced.")),a.default.createElement(s.CodeBlock,null,'import ariaLive from "@curi/side-effect-aria-live";\n  \nconst announcer = ariaLive(\n  ({ response }) => `Navigated to ${response.title}`\n);\n\nconst routes = [\n  {\n    name: "Home",\n    path: "",\n    response() {\n      return {\n        title: "Home"\n      };\n    }\n  }\n]\n\nconst router = curi(history, routes, {\n  sideEffects: [announcer]\n});\n\n// when the user navigates to "/", the screen reader\n// will read: "Navigated to Home"')),a.default.createElement(i.Section,{title:"Focusing Content",id:"focus"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"Screen readers read the content of elements in the page that are focused. They can move through the page to read different elements. When you navigate, the content of the site will be re-rendered, so it is important for you to focus on the new content so that users using screen readers don't have to tab around looking for the new content. This is focus management and there are a couple things to keep in mind when implementing it.")),a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"When you focus an element, make sure to focus the specific content for a page. If you were to just focus the page's ",a.default.createElement(l.InlineComponent,null,"body")," or a root ",a.default.createElement(l.InlineComponent,null,"div"),", then the user might have to tab through less important content, like the page's menus, while looking for the new content.")),a.default.createElement(s.CodeBlock,{lang:"html"},"\x3c!--\n  it is better to focus the important content (<main>)\n  and not the entire page\n--\x3e\n<div>\n  <header></header>\n  <main></main>\n</div>"),a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"The element that you focus needs to be focusable. Elements can be natively focusable (e.g. ",a.default.createElement(l.InlineComponent,null,"input"),"s and ",a.default.createElement(l.InlineComponent,null,"a"),"s) or you can use the ",a.default.createElement(l.InlineJS,null,"tabIndex")," property. A ",a.default.createElement(l.InlineJS,null,"tabIndex")," of"," ",a.default.createElement(l.InlineJS,null,"-1")," lets you focus an element, but keeps screen readers from accidentally focusing it when a user is tabbing through the page's contents."),a.default.createElement(r.Warning,null,"If you try to focus an element that is not focusable, then the document's ",a.default.createElement(l.InlineComponent,null,"body")," will be focused instead.")),a.default.createElement(s.CodeBlock,{lang:"html"},'\x3c!-- you can focus us --\x3e\n<input />\n<a href="https://example.com">Example</a>\n<div tabIndex="-1"></div>\n\n\x3c!-- but not me --\x3e\n<div></div>'),a.default.createElement(i.Subsection,{title:"Focusing in React Applications",id:"focus-react"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"The ",a.default.createElement(l.InlineJS,null,"@curi/react-dom")," package provides a ",a.default.createElement(l.InlineComponent,null,"Focus")," ","component that gives you a ",a.default.createElement(l.InlineJS,null,"ref")," to attach to the component that should be focused. Whenever the user navigates, it will re-focus so that the screen reader is focused on the correct content.")),a.default.createElement(s.CodeBlock,{lang:"jsx"},'import { curiProvider, Focus } from "@curi/react-dom";\n\nconst Router = curiProvider(router);\n\nReactDOM.render((\n  <Router>\n    {({ response }) => {\n      const { body:Body } = response;\n      return (\n        <Header />\n        <Focus>\n          {ref => (\n            <main ref={ref} tabIndex={-1}>\n            </main>\n          )}\n        </Focus>\n      );\n    }}\n  </Router>\n), holder);')),a.default.createElement(i.Subsection,{title:"Focusing in Vue Applications",id:"focus-vue"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"The ",a.default.createElement(l.InlineJS,null,"@curi/vue")," package provides a directive for focusing an element. The directive needs to be passed something that changes when the user navigates, so you can just pass it the current ",a.default.createElement(l.InlineJS,null,"response"))),a.default.createElement(s.CodeBlock,{lang:"html"},'<template>\n  <header>...</header>\n  <main tabIndex="-1" v-curi-focus="$curi.response">\n    <component :is="$curi.response.body" />\n  </main>\n</template>'))),a.default.createElement(i.Section,{title:"More Resources",id:"more"},a.default.createElement(s.Explanation,null,a.default.createElement("p",null,"The above content is great for making navigation within your application accessible, but those aren't the only steps that you should take to making your site more accessible."),a.default.createElement("p",null,"If you are interested in other resources for improving the accessibility of your website, I would recommend Google's"," ",a.default.createElement("a",{href:"https://developers.google.com/web/fundamentals/accessibility/"},"collection of accessibility articles"),". WebAIM also provides a good"," ",a.default.createElement("a",{href:"https://webaim.org/standards/wcag/checklist"},"checklist")," ","to consult."),a.default.createElement("p",null,"The"," ",a.default.createElement("a",{href:"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en"},"ChromeVox")," ","extension for Chrome is a free screen reader that you can use to experience your site like a user using a screen reader would. This documentation site uses the above announcement and focus techniques, so you can see how they work by activating a screen reader and navigating throughout this site."))))};var a=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),o=n(1),l=n(6),r=n(11),i=n(10),s=n(7)}}]);