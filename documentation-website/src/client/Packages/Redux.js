import React from 'react';
import BasePackage from '../components/BasePackage';
import {
  PrismBlock,
  InlineJS as IJS,
  InlineComponent as Cmp
} from '../components/PrismBlocks';
import APIBlock from '../components/APIBlock';
import { Section } from '../components/Sections';
import { Note } from '../components/Messages';
import { Link } from '@curi/react';

export default ({ name, version, globalName }) => (
  <BasePackage
    name={name}
    version={version}
    globalName={globalName}
    about={(
      <p>
        This package allows you to synchronize the response objects generated by Curi
        with your Redux store. Whenever location changes occur, they will be dispatched
        to your store. If you use this (with a React application), you do not have to
        use the <Cmp>Navigator</Cmp>.
      </p>
    )}
  >
    <APIBlock>
      <PrismBlock lang='javascript'>
        {
`import { syncResponses, responseReducer, curiReducer } from '@curi/redux';`
        }
      </PrismBlock>

      <Section
        tag='h3'
        title='syncResponses'
        id='syncResponses'
      >
        <p>
          <IJS>syncResponses</IJS> is responsible for linking your Redux store with your Curi
          configuration object. It subscribes to location changes emitted from your configuration
          object with a function that will dispatch a "location changed" event to the Redux store.
          It will also add your Curi configuration object to the store. You can get the object
          from the store using the <IJS>curi</IJS> property identifier.
        </p>
        <Note>
          <p>
            You will probably want to wait for your configuration object to generate its initial
            response before syncing by using <IJS>config.ready</IJS>. Otherwise, the initial
            response will be <IJS>undefined</IJS>.
          </p>
        </Note>
        <PrismBlock lang='javascript'>
          {
`const config = createConfig(history, routes);
const store = createStore(reducer);

config.ready().then(() => {
  syncResponses(store, config);
});`
          }
        </PrismBlock>
      </Section>

      <Section
        tag='h3'
        title='curiReducer'
        id='curiReducer'
      >
        <p>
          Use the <IJS>curiReducer</IJS> to keep your Curi configuration object in the store. When
          you call <IJS>syncResponses</IJS>, your configuration object will be added to the store.
        </p>
        <PrismBlock lang='javascript'>
          {
`const config = createConfig(history, routes);
const reducer = combineReducers({
  curi: config,
  ...
});
const store = createStore(reducer);
syncResponses(store, config);
const { curi } = store.getState();
// curi === config`
          }
        </PrismBlock>
      </Section>


      <Section
        tag='h3'
        title='responseReducer'
        id='responseReducer'
      >
        <p>
          Use the <IJS>responseReducer</IJS> to store the latest response object in your Redux store.
          If you use <IJS>syncResponses</IJS>, this will automatically be done for you (by subscribing to
          your Curi configuration object's <IJS>history</IJS>).
        </p>
        <PrismBlock lang='javascript'>
          {
`const reducer = combineReducers({
  response: responseReducer,
  ...
});
const store = createStore(reducer);`
          }
        </PrismBlock>
      </Section>
    </APIBlock>
  </BasePackage>
);
