import React from 'react';
import BasePackage from '../components/BasePackage';
import { InlineJS as IJS, PrismBlock } from '../components/PrismBlocks';
import APIBlock from '../components/APIBlock';

export default ({ name, version, globalName }) => (
  <BasePackage
    name={name}
    version={version}
    globalName={globalName}
    about={(
      <p>
        The curious higher-order component creates a component that will inject two props
        (<IJS>curi</IJS> and <IJS>response</IJS>) into the component that it wraps. The curi prop
        is your application's configuration object. The response prop is the current response
        object generated by your Curi configuration object.
      </p>
    )}
  >
    <APIBlock>
    <h3>curious()</h3>
      <PrismBlock lang='javascript'>
        {
`import curious from '@curi/react-curious';`
        }
      </PrismBlock>

      <PrismBlock lang='javascript'>
        {
`class MyComponent extends React.Component {
  render() {
    // because this component is wrapped with curious,
    // you can access this.props.curi and
    // this.props.response
  }
}

export default curious(MyComponent);`
        }
      </PrismBlock>


      <div className='section'>
        <h3>props</h3>

        <div className='subsection'>
          <h4>internalRef</h4>
          <p>
            A ref function that you can use to access the wrapped component.
          </p>
          <PrismBlock lang='jsx'>
            {
`const WrappedComponent = curious(MyComponent);

<WrappedComponent internalRef={node => ref = node} />`
            }
          </PrismBlock>
        </div>

        <div className='subsection'>
          <h4>Other props</h4>
          <p>
            Any other props that you pass to the wrapped component will be available to the
            base component.
          </p>

          <PrismBlock lang='jsx'>
            {
`const WrappedComponent = curious(MyComponent);

<WrappedComponent one='two' red='blue' />
// MyComponent's props: { curi: {...}, response: {...}, one: 'two', red: 'blue' }`
            }
          </PrismBlock>
        </div>
      </div>
    </APIBlock>
  </BasePackage>
);
